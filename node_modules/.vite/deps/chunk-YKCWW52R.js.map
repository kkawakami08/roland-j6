{
  "version": 3,
  "sources": ["../../@tonaljs/collection/index.ts", "../../@tonaljs/pcset/node_modules/@tonaljs/pitch/index.ts", "../../@tonaljs/pcset/node_modules/@tonaljs/pitch-interval/index.ts", "../../@tonaljs/pcset/index.ts", "../../@tonaljs/scale/node_modules/@tonaljs/chord-type/index.ts", "../../@tonaljs/scale/node_modules/@tonaljs/chord-type/data.ts", "../../@tonaljs/scale-type/index.ts", "../../@tonaljs/scale-type/data.ts", "../../@tonaljs/scale/index.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-explicit-any */\n// ascending range\nfunction ascR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = n + b);\n  return a;\n}\n// descending range\nfunction descR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = b - n);\n  return a;\n}\n\n/**\n * Creates a numeric range\n *\n * @param {number} from\n * @param {number} to\n * @return {Array<number>}\n *\n * @example\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\n * range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(from: number, to: number): number[] {\n  return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\n}\n\n/**\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} collection\n * @return {Array} the rotated collection\n *\n * @example\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nexport function rotate<T>(times: number, arr: T[]): T[] {\n  const len = arr.length;\n  const n = ((times % len) + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the collection with the null values removed\n * @function\n * @param {Array} collection\n * @return {Array}\n *\n * @example\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nexport function compact(arr: any[]): any[] {\n  return arr.filter((n) => n === 0 || n);\n}\n\n/**\n * Randomizes the order of the specified collection in-place, using the Fisherâ€“Yates shuffle.\n *\n * @function\n * @param {Array} collection\n * @return {Array} the collection shuffled\n *\n * @example\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\n */\nexport function shuffle(arr: any[], rnd = Math.random): any[] {\n  let i: number;\n  let t: any;\n  let m: number = arr.length;\n  while (m) {\n    i = Math.floor(rnd() * m--);\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n}\n\n/**\n * Get all permutations of an collection\n *\n * @param {Array} collection - the collection\n * @return {Array<Array>} an collection with all the permutations\n * @example\n * permutations([\"a\", \"b\", \"c\"])) // =>\n * [\n *   [\"a\", \"b\", \"c\"],\n *   [\"b\", \"a\", \"c\"],\n *   [\"b\", \"c\", \"a\"],\n *   [\"a\", \"c\", \"b\"],\n *   [\"c\", \"a\", \"b\"],\n *   [\"c\", \"b\", \"a\"]\n * ]\n */\nexport function permutations(arr: any[]): any[] {\n  if (arr.length === 0) {\n    return [[]];\n  }\n  return permutations(arr.slice(1)).reduce((acc, perm) => {\n    return acc.concat(\n      arr.map((e, pos) => {\n        const newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      }),\n    );\n  }, []);\n}\n\n/** @deprecated */\nexport default {\n  compact,\n  permutations,\n  range,\n  rotate,\n  shuffle,\n};\n", "export interface NamedPitch {\n  readonly name: string;\n}\n\n/*** @deprecated use NamedPitch */\nexport interface Named {\n  readonly name: string;\n}\n\nexport interface NotFound extends NamedPitch {\n  readonly empty: true;\n  readonly name: \"\";\n}\n\nexport function isNamedPitch(src: unknown): src is NamedPitch {\n  return src !== null &&\n    typeof src === \"object\" &&\n    \"name\" in src &&\n    typeof src.name === \"string\"\n    ? true\n    : false;\n}\n\ntype Fifths = number;\ntype Octaves = number;\nexport type Direction = 1 | -1;\n\nexport type PitchClassCoordinates = [Fifths];\nexport type NoteCoordinates = [Fifths, Octaves];\nexport type IntervalCoordinates = [Fifths, Octaves, Direction];\nexport type PitchCoordinates =\n  | PitchClassCoordinates\n  | NoteCoordinates\n  | IntervalCoordinates;\n\n/**\n * Pitch properties\n *\n * - {number} step - The step number: 0 = C, 1 = D, ... 6 = B\n * - {number} alt - Number of alterations: -2 = 'bb', -1 = 'b', 0 = '', 1 = '#', ...\n * - {number} [oct] = The octave (undefined when is a coord class)\n * - {number} [dir] = Interval direction (undefined when is not an interval)\n */\nexport interface Pitch {\n  readonly step: number;\n  readonly alt: number;\n  readonly oct?: number; // undefined for pitch classes\n  readonly dir?: Direction; // undefined for notes\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nexport const chroma = ({ step, alt }: Pitch) => (SIZES[step] + alt + 120) % 12;\n\nexport const height = ({ step, alt, oct, dir = 1 }: Pitch) =>\n  dir * (SIZES[step] + alt + 12 * (oct === undefined ? -100 : oct));\n\nexport const midi = (pitch: Pitch) => {\n  const h = height(pitch);\n  return pitch.oct !== undefined && h >= -12 && h <= 115 ? h + 12 : null;\n};\n\nexport function isPitch(pitch: unknown): pitch is Pitch {\n  return pitch !== null &&\n    typeof pitch === \"object\" &&\n    \"step\" in pitch &&\n    typeof pitch.step === \"number\" &&\n    \"alt\" in pitch &&\n    typeof pitch.alt === \"number\" &&\n    !isNaN(pitch.step) &&\n    !isNaN(pitch.alt)\n    ? true\n    : false;\n}\n\n// The number of fifths of [C, D, E, F, G, A, B]\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n// The number of octaves it span each step\nconst STEPS_TO_OCTS = FIFTHS.map((fifths: number) =>\n  Math.floor((fifths * 7) / 12),\n);\n\n/**\n * Get coordinates from pitch object\n */\nexport function coordinates(pitch: Pitch): PitchCoordinates {\n  const { step, alt, oct, dir = 1 } = pitch;\n  const f = FIFTHS[step] + 7 * alt;\n  if (oct === undefined) {\n    return [dir * f];\n  }\n  const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n}\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\nconst FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n/**\n * Get pitch from coordinate objects\n */\nexport function pitch(coord: PitchCoordinates): Pitch {\n  const [f, o, dir] = coord;\n  const step = FIFTHS_TO_STEPS[unaltered(f)];\n  const alt = Math.floor((f + 1) / 7);\n  if (o === undefined) {\n    return { step, alt, dir };\n  }\n  const oct = o + 4 * alt + STEPS_TO_OCTS[step];\n  return { step, alt, oct, dir };\n}\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f: number): number {\n  const i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n", "import {\n  coordinates,\n  Direction,\n  IntervalCoordinates,\n  isNamedPitch,\n  isPitch,\n  NamedPitch,\n  Pitch,\n  pitch,\n  PitchCoordinates,\n} from \"@tonaljs/pitch\";\n\nconst fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport type IntervalName = string;\nexport type IntervalLiteral = IntervalName | Pitch | NamedPitch;\n\ntype Quality =\n  | \"dddd\"\n  | \"ddd\"\n  | \"dd\"\n  | \"d\"\n  | \"m\"\n  | \"M\"\n  | \"P\"\n  | \"A\"\n  | \"AA\"\n  | \"AAA\"\n  | \"AAAA\";\ntype Type = \"perfectable\" | \"majorable\";\n\nexport interface Interval extends Pitch, NamedPitch {\n  readonly empty: boolean;\n  readonly name: IntervalName;\n  readonly num: number;\n  readonly q: Quality;\n  readonly type: Type;\n  readonly step: number;\n  readonly alt: number;\n  readonly dir: Direction;\n  readonly simple: number;\n  readonly semitones: number;\n  readonly chroma: number;\n  readonly coord: IntervalCoordinates;\n  readonly oct: number;\n}\n\nconst NoInterval: Interval = Object.freeze({\n  empty: true,\n  name: \"\",\n  num: NaN,\n  q: \"\" as Quality,\n  type: \"\" as Type,\n  step: NaN,\n  alt: NaN,\n  dir: NaN as Direction,\n  simple: NaN,\n  semitones: NaN,\n  chroma: NaN,\n  coord: [] as unknown as IntervalCoordinates,\n  oct: NaN,\n});\n\n// shorthand tonal notation (with quality after number)\nconst INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\n// standard shorthand notation (with quality before number)\nconst INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nconst REGEX = new RegExp(\n  \"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\",\n);\n\ntype IntervalTokens = [string, string];\n\n/**\n * @private\n */\nexport function tokenizeInterval(str?: IntervalName): IntervalTokens {\n  const m = REGEX.exec(`${str}`);\n  if (m === null) {\n    return [\"\", \"\"];\n  }\n  return m[1] ? [m[1], m[2]] : [m[4], m[3]];\n}\n\nconst cache: { [key in string]: Interval } = {};\n\n/**\n * Get interval properties. It returns an object with:\n *\n * - name: the interval name\n * - num: the interval number\n * - type: 'perfectable' or 'majorable'\n * - q: the interval quality (d, m, M, A)\n * - dir: interval direction (1 ascending, -1 descending)\n * - simple: the simplified number\n * - semitones: the size in semitones\n * - chroma: the interval chroma\n *\n * @param {string} interval - the interval name\n * @return {Object} the interval properties\n *\n * @example\n * import { interval } from '@tonaljs/core'\n * interval('P5').semitones // => 7\n * interval('m3').type // => 'majorable'\n */\nexport function interval(src: IntervalLiteral): Interval {\n  return typeof src === \"string\"\n    ? cache[src] || (cache[src] = parse(src))\n    : isPitch(src)\n      ? interval(pitchName(src))\n      : isNamedPitch(src)\n        ? interval(src.name)\n        : NoInterval;\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nconst TYPES = \"PMMPPMM\";\nfunction parse(str?: string): Interval {\n  const tokens = tokenizeInterval(str);\n  if (tokens[0] === \"\") {\n    return NoInterval;\n  }\n  const num = +tokens[0];\n  const q = tokens[1] as Quality;\n  const step = (Math.abs(num) - 1) % 7;\n  const t = TYPES[step];\n  if (t === \"M\" && q === \"P\") {\n    return NoInterval;\n  }\n  const type = t === \"M\" ? \"majorable\" : \"perfectable\";\n\n  const name = \"\" + num + q;\n  const dir = num < 0 ? -1 : 1;\n  const simple = num === 8 || num === -8 ? num : dir * (step + 1);\n  const alt = qToAlt(type, q);\n  const oct = Math.floor((Math.abs(num) - 1) / 7);\n  const semitones = dir * (SIZES[step] + alt + 12 * oct);\n  const chroma = (((dir * (SIZES[step] + alt)) % 12) + 12) % 12;\n  const coord = coordinates({ step, alt, oct, dir }) as IntervalCoordinates;\n  return {\n    empty: false,\n    name,\n    num,\n    q,\n    step,\n    alt,\n    dir,\n    type,\n    simple,\n    semitones,\n    chroma,\n    coord,\n    oct,\n  };\n}\n\n/**\n * @private\n *\n * forceDescending is used in the case of unison (#243)\n */\nexport function coordToInterval(\n  coord: PitchCoordinates,\n  forceDescending?: boolean,\n): Interval {\n  const [f, o = 0] = coord;\n  const isDescending = f * 7 + o * 12 < 0;\n  const ivl: IntervalCoordinates =\n    forceDescending || isDescending ? [-f, -o, -1] : [f, o, 1];\n  return interval(pitch(ivl)) as Interval;\n}\n\nfunction qToAlt(type: Type, q: string): number {\n  return (q === \"M\" && type === \"majorable\") ||\n    (q === \"P\" && type === \"perfectable\")\n    ? 0\n    : q === \"m\" && type === \"majorable\"\n      ? -1\n      : /^A+$/.test(q)\n        ? q.length\n        : /^d+$/.test(q)\n          ? -1 * (type === \"perfectable\" ? q.length : q.length + 1)\n          : 0;\n}\n\n// return the interval name of a pitch\nfunction pitchName(props: Pitch): string {\n  const { step, alt, oct = 0, dir } = props;\n  if (!dir) {\n    return \"\";\n  }\n  const calcNum = step + 1 + 7 * oct;\n  // this is an edge case: descending pitch class unison (see #243)\n  const num = calcNum === 0 ? step + 1 : calcNum;\n  const d = dir < 0 ? \"-\" : \"\";\n  const type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\n  const name = d + num + altToQ(type, alt);\n  return name;\n}\n\nfunction altToQ(type: Type, alt: number): Quality {\n  if (alt === 0) {\n    return type === \"majorable\" ? \"M\" : \"P\";\n  } else if (alt === -1 && type === \"majorable\") {\n    return \"m\";\n  } else if (alt > 0) {\n    return fillStr(\"A\", alt) as Quality;\n  } else {\n    return fillStr(\"d\", type === \"perfectable\" ? alt : alt + 1) as Quality;\n  }\n}\n", "import { compact, range, rotate } from \"@tonaljs/collection\";\nimport { NotFound } from \"@tonaljs/pitch\";\nimport { transpose } from \"@tonaljs/pitch-distance\";\nimport { Interval, IntervalName, interval } from \"@tonaljs/pitch-interval\";\nimport { Note, NoteName, note } from \"@tonaljs/pitch-note\";\n\n/**\n * The properties of a pitch class set\n * @param {number} num - a number between 1 and 4095 (both included) that\n * uniquely identifies the set. It's the decimal number of the chrom.\n * @param {string} chroma - a string representation of the set: a 12-char string\n * with either \"1\" or \"0\" as characters, representing a pitch class or not\n * for the given position in the octave. For example, a \"1\" at index 0 means 'C',\n * a \"1\" at index 2 means 'D', and so on...\n * @param {string} normalized - the chroma but shifted to the first 1\n * @param {number} length - the number of notes of the pitch class set\n * @param {IntervalName[]} intervals - the intervals of the pitch class set\n * *starting from C*\n */\nexport interface Pcset {\n  readonly name: string;\n  readonly empty: boolean;\n  readonly setNum: number;\n  readonly chroma: PcsetChroma;\n  readonly normalized: PcsetChroma;\n  readonly intervals: IntervalName[];\n}\n\nexport const EmptyPcset: Pcset = {\n  empty: true,\n  name: \"\",\n  setNum: 0,\n  chroma: \"000000000000\",\n  normalized: \"000000000000\",\n  intervals: [],\n};\n\nexport type PcsetChroma = string;\nexport type PcsetNum = number;\n\n// UTILITIES\nconst setNumToChroma = (num: number): string =>\n  Number(num).toString(2).padStart(12, \"0\");\nconst chromaToNumber = (chroma: string): number => parseInt(chroma, 2);\nconst REGEX = /^[01]{12}$/;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isChroma(set: any): set is PcsetChroma {\n  return REGEX.test(set);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isPcsetNum = (set: any): set is PcsetNum =>\n  typeof set === \"number\" && set >= 0 && set <= 4095;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isPcset = (set: any): set is Pcset => set && isChroma(set.chroma);\n\nconst cache: { [key in string]: Pcset } = { [EmptyPcset.chroma]: EmptyPcset };\n\n/**\n * A definition of a pitch class set. It could be:\n * - The pitch class set chroma (a 12-length string with only 1s or 0s)\n * - The pitch class set number (an integer between 1 and 4095)\n * - An array of note names\n * - An array of interval names\n */\nexport type Set =\n  | Partial<Pcset>\n  | PcsetChroma\n  | PcsetNum\n  | NoteName[]\n  | IntervalName[];\n\n/**\n * Get the pitch class set of a collection of notes or set number or chroma\n */\nexport function get(src: Set): Pcset {\n  const chroma: PcsetChroma = isChroma(src)\n    ? src\n    : isPcsetNum(src)\n      ? setNumToChroma(src)\n      : Array.isArray(src)\n        ? listToChroma(src)\n        : isPcset(src)\n          ? src.chroma\n          : EmptyPcset.chroma;\n\n  return (cache[chroma] = cache[chroma] || chromaToPcset(chroma));\n}\n\n/**\n * @use Pcset.get\n * @deprecated\n */\nexport const pcset = get;\n\n/**\n * Get pitch class set chroma\n * @function\n * @example\n * Pcset.chroma([\"c\", \"d\", \"e\"]); //=> \"101010000000\"\n */\nexport const chroma = (set: Set) => get(set).chroma;\n\n/**\n * Get intervals (from C) of a set\n * @function\n * @example\n * Pcset.intervals([\"c\", \"d\", \"e\"]); //=>\n */\nexport const intervals = (set: Set) => get(set).intervals;\n\n/**\n * Get pitch class set number\n * @function\n * @example\n * Pcset.num([\"c\", \"d\", \"e\"]); //=> 2192\n */\nexport const num = (set: Set) => get(set).setNum;\n\nconst IVLS = [\n  \"1P\",\n  \"2m\",\n  \"2M\",\n  \"3m\",\n  \"3M\",\n  \"4P\",\n  \"5d\",\n  \"5P\",\n  \"6m\",\n  \"6M\",\n  \"7m\",\n  \"7M\",\n];\n\n/**\n * Get the intervals of a pcset *starting from C*\n * @private\n * @param {Set} set - the pitch class set\n * @return {IntervalName[]} an array of interval names or an empty array\n * if not a valid pitch class set\n */\nfunction chromaToIntervals(chroma: PcsetChroma): IntervalName[] {\n  const intervals = [];\n  for (let i = 0; i < 12; i++) {\n    // tslint:disable-next-line:curly\n    if (chroma.charAt(i) === \"1\") intervals.push(IVLS[i]);\n  }\n  return intervals;\n}\n\nexport function notes(set: Set): NoteName[] {\n  return get(set).intervals.map((ivl) => transpose(\"C\", ivl));\n}\n\n/**\n * Get a list of all possible pitch class sets (all possible chromas) *having\n * C as root*. There are 2048 different chromas. If you want them with another\n * note you have to transpose it\n *\n * @see http://allthescales.org/\n * @return {Array<PcsetChroma>} an array of possible chromas from '10000000000' to '11111111111'\n */\nexport function chromas(): PcsetChroma[] {\n  return range(2048, 4095).map(setNumToChroma);\n}\n\n/**\n * Given a a list of notes or a pcset chroma, produce the rotations\n * of the chroma discarding the ones that starts with \"0\"\n *\n * This is used, for example, to get all the modes of a scale.\n *\n * @param {Array|string} set - the list of notes or pitchChr of the set\n * @param {boolean} normalize - (Optional, true by default) remove all\n * the rotations that starts with \"0\"\n * @return {Array<string>} an array with all the modes of the chroma\n *\n * @example\n * Pcset.modes([\"C\", \"D\", \"E\"]).map(Pcset.intervals)\n */\nexport function modes(set: Set, normalize = true): PcsetChroma[] {\n  const pcs = get(set);\n\n  const binary = pcs.chroma.split(\"\");\n  return compact(\n    binary.map((_, i) => {\n      const r = rotate(i, binary);\n      return normalize && r[0] === \"0\" ? null : r.join(\"\");\n    }),\n  );\n}\n\n/**\n * Test if two pitch class sets are equal\n *\n * @param {Array|string} set1 - one of the pitch class sets\n * @param {Array|string} set2 - the other pitch class set\n * @return {boolean} true if they are equal\n * @example\n * Pcset.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\n */\nexport function isEqual(s1: Set, s2: Set) {\n  return get(s1).setNum === get(s2).setNum;\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * subset of a given set\n *\n * The function is curryfied.\n *\n * @param {PcsetChroma|NoteName[]} set - the superset to test against (chroma or\n * list of notes)\n * @return{function(PcsetChroma|NoteNames[]): boolean} a function accepting a set\n * to test against (chroma or list of notes)\n * @example\n * const inCMajor = Pcset.isSubsetOf([\"C\", \"E\", \"G\"])\n * inCMajor([\"e6\", \"c4\"]) // => true\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\n */\nexport function isSubsetOf(set: Set) {\n  const s = get(set).setNum;\n\n  return (notes: Set | Pcset) => {\n    const o = get(notes).setNum;\n    // tslint:disable-next-line: no-bitwise\n    return s && s !== o && (o & s) === o;\n  };\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * superset of a given set (it contains all notes and at least one more)\n *\n * @param {Set} set - an array of notes or a chroma set string to test against\n * @return {(subset: Set): boolean} a function that given a set\n * returns true if is a subset of the first one\n * @example\n * const extendsCMajor = Pcset.isSupersetOf([\"C\", \"E\", \"G\"])\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\n */\nexport function isSupersetOf(set: Set) {\n  const s = get(set).setNum;\n  return (notes: Set) => {\n    const o = get(notes).setNum;\n    // tslint:disable-next-line: no-bitwise\n    return s && s !== o && (o | s) === o;\n  };\n}\n\n/**\n * Test if a given pitch class set includes a note\n *\n * @param {Array<string>} set - the base set to test against\n * @param {string} note - the note to test\n * @return {boolean} true if the note is included in the pcset\n *\n * Can be partially applied\n *\n * @example\n * const isNoteInCMajor = isNoteIncludedIn(['C', 'E', 'G'])\n * isNoteInCMajor('C4') // => true\n * isNoteInCMajor('C#4') // => false\n */\nexport function isNoteIncludedIn(set: Set) {\n  const s = get(set);\n\n  return (noteName: NoteName): boolean => {\n    const n = note(noteName);\n    return s && !n.empty && s.chroma.charAt(n.chroma) === \"1\";\n  };\n}\n\n/** @deprecated use: isNoteIncludedIn */\nexport const includes = isNoteIncludedIn;\n\n/**\n * Filter a list with a pitch class set\n *\n * @param {Array|string} set - the pitch class set notes\n * @param {Array|string} notes - the note list to be filtered\n * @return {Array} the filtered notes\n *\n * @example\n * Pcset.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\n * Pcset.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\n */\nexport function filter(set: Set) {\n  const isIncluded = isNoteIncludedIn(set);\n  return (notes: NoteName[]) => {\n    return notes.filter(isIncluded);\n  };\n}\n\n/** @deprecated */\nexport default {\n  get,\n  chroma,\n  num,\n  intervals,\n  chromas,\n  isSupersetOf,\n  isSubsetOf,\n  isNoteIncludedIn,\n  isEqual,\n  filter,\n  modes,\n  notes,\n  // deprecated\n  pcset,\n};\n\n//// PRIVATE ////\n\nfunction chromaRotations(chroma: string): string[] {\n  const binary = chroma.split(\"\");\n  return binary.map((_, i) => rotate(i, binary).join(\"\"));\n}\n\nfunction chromaToPcset(chroma: PcsetChroma): Pcset {\n  const setNum = chromaToNumber(chroma);\n  const normalizedNum = chromaRotations(chroma)\n    .map(chromaToNumber)\n    .filter((n) => n >= 2048)\n    .sort()[0];\n  const normalized = setNumToChroma(normalizedNum);\n\n  const intervals = chromaToIntervals(chroma);\n\n  return {\n    empty: false,\n    name: \"\",\n    setNum,\n    chroma,\n    normalized,\n    intervals,\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction listToChroma(set: any[]): PcsetChroma {\n  if (set.length === 0) {\n    return EmptyPcset.chroma;\n  }\n\n  let pitch: Note | Interval | NotFound;\n  const binary = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  // tslint:disable-next-line:prefer-for-of\n  for (let i = 0; i < set.length; i++) {\n    pitch = note(set[i]);\n    // tslint:disable-next-line: curly\n    if (pitch.empty) pitch = interval(set[i]);\n    // tslint:disable-next-line: curly\n    if (!pitch.empty) binary[pitch.chroma] = 1;\n  }\n  return binary.join(\"\");\n}\n", "import {\n  EmptyPcset,\n  get as pcset,\n  Pcset,\n  PcsetChroma,\n  PcsetNum,\n} from \"@tonaljs/pcset\";\nimport data from \"./data\";\n\nexport type ChordQuality =\n  | \"Major\"\n  | \"Minor\"\n  | \"Augmented\"\n  | \"Diminished\"\n  | \"Unknown\";\n\nexport interface ChordType extends Pcset {\n  name: string;\n  quality: ChordQuality;\n  aliases: string[];\n}\nconst NoChordType: ChordType = {\n  ...EmptyPcset,\n  name: \"\",\n  quality: \"Unknown\",\n  intervals: [],\n  aliases: [],\n};\n\ntype ChordTypeName = string | PcsetChroma | PcsetNum;\n\nlet dictionary: ChordType[] = [];\nlet index: Record<ChordTypeName, ChordType> = {};\n\n/**\n * Given a chord name or chroma, return the chord properties\n * @param {string} source - chord name or pitch class set chroma\n * @example\n * import { get } from 'tonaljs/chord-type'\n * get('major') // => { name: 'major', ... }\n */\nexport function get(type: ChordTypeName): ChordType {\n  return index[type] || NoChordType;\n}\n\n/** @deprecated */\nexport const chordType = get;\n\n/**\n * Get all chord (long) names\n */\nexport function names() {\n  return dictionary.map((chord) => chord.name).filter((x) => x);\n}\n\n/**\n * Get all chord symbols\n */\nexport function symbols() {\n  return dictionary.map((chord) => chord.aliases[0]).filter((x) => x);\n}\n\n/**\n * Keys used to reference chord types\n */\nexport function keys() {\n  return Object.keys(index);\n}\n\n/**\n * Return a list of all chord types\n */\nexport function all(): ChordType[] {\n  return dictionary.slice();\n}\n\n/** @deprecated */\nexport const entries = all;\n\n/**\n * Clear the dictionary\n */\nexport function removeAll() {\n  dictionary = [];\n  index = {};\n}\n\n/**\n * Add a chord to the dictionary.\n * @param intervals\n * @param aliases\n * @param [fullName]\n */\nexport function add(intervals: string[], aliases: string[], fullName?: string) {\n  const quality = getQuality(intervals);\n  const chord = {\n    ...pcset(intervals),\n    name: fullName || \"\",\n    quality,\n    intervals,\n    aliases,\n  };\n  dictionary.push(chord);\n  if (chord.name) {\n    index[chord.name] = chord;\n  }\n  index[chord.setNum] = chord;\n  index[chord.chroma] = chord;\n  chord.aliases.forEach((alias) => addAlias(chord, alias));\n}\n\nexport function addAlias(chord: ChordType, alias: string) {\n  index[alias] = chord;\n}\n\nfunction getQuality(intervals: string[]): ChordQuality {\n  const has = (interval: string) => intervals.indexOf(interval) !== -1;\n  return has(\"5A\")\n    ? \"Augmented\"\n    : has(\"3M\")\n      ? \"Major\"\n      : has(\"5d\")\n        ? \"Diminished\"\n        : has(\"3m\")\n          ? \"Minor\"\n          : \"Unknown\";\n}\n\ndata.forEach(([ivls, fullName, names]: string[]) =>\n  add(ivls.split(\" \"), names.split(\" \"), fullName),\n);\ndictionary.sort((a, b) => a.setNum - b.setNum);\n\n/** @deprecated */\nexport default {\n  names,\n  symbols,\n  get,\n  all,\n  add,\n  removeAll,\n  keys,\n  // deprecated\n  entries,\n  chordType,\n};\n", "/**\n * @private\n * Chord List\n * Source: https://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns\n * Format: [\"intervals\", \"full name\", \"abrv1 abrv2\"]\n */\nconst CHORDS: string[][] = [\n  // ==Major==\n  [\"1P 3M 5P\", \"major\", \"M ^  maj\"],\n  [\"1P 3M 5P 7M\", \"major seventh\", \"maj7 Î” ma7 M7 Maj7 ^7\"],\n  [\"1P 3M 5P 7M 9M\", \"major ninth\", \"maj9 Î”9 ^9\"],\n  [\"1P 3M 5P 7M 9M 13M\", \"major thirteenth\", \"maj13 Maj13 ^13\"],\n  [\"1P 3M 5P 6M\", \"sixth\", \"6 add6 add13 M6\"],\n  [\"1P 3M 5P 6M 9M\", \"sixth added ninth\", \"6add9 6/9 69 M69\"],\n  [\"1P 3M 6m 7M\", \"major seventh flat sixth\", \"M7b6 ^7b6\"],\n  [\n    \"1P 3M 5P 7M 11A\",\n    \"major seventh sharp eleventh\",\n    \"maj#4 Î”#4 Î”#11 M7#11 ^7#11 maj7#11\",\n  ],\n  // ==Minor==\n  // '''Normal'''\n  [\"1P 3m 5P\", \"minor\", \"m min -\"],\n  [\"1P 3m 5P 7m\", \"minor seventh\", \"m7 min7 mi7 -7\"],\n  [\n    \"1P 3m 5P 7M\",\n    \"minor/major seventh\",\n    \"m/ma7 m/maj7 mM7 mMaj7 m/M7 -Î”7 mÎ” -^7 -maj7\",\n  ],\n  [\"1P 3m 5P 6M\", \"minor sixth\", \"m6 -6\"],\n  [\"1P 3m 5P 7m 9M\", \"minor ninth\", \"m9 -9\"],\n  [\"1P 3m 5P 7M 9M\", \"minor/major ninth\", \"mM9 mMaj9 -^9\"],\n  [\"1P 3m 5P 7m 9M 11P\", \"minor eleventh\", \"m11 -11\"],\n  [\"1P 3m 5P 7m 9M 13M\", \"minor thirteenth\", \"m13 -13\"],\n  // '''Diminished'''\n  [\"1P 3m 5d\", \"diminished\", \"dim Â° o\"],\n  [\"1P 3m 5d 7d\", \"diminished seventh\", \"dim7 Â°7 o7\"],\n  [\"1P 3m 5d 7m\", \"half-diminished\", \"m7b5 Ã¸ -7b5 h7 h\"],\n  // ==Dominant/Seventh==\n  // '''Normal'''\n  [\"1P 3M 5P 7m\", \"dominant seventh\", \"7 dom\"],\n  [\"1P 3M 5P 7m 9M\", \"dominant ninth\", \"9\"],\n  [\"1P 3M 5P 7m 9M 13M\", \"dominant thirteenth\", \"13\"],\n  [\"1P 3M 5P 7m 11A\", \"lydian dominant seventh\", \"7#11 7#4\"],\n  // '''Altered'''\n  [\"1P 3M 5P 7m 9m\", \"dominant flat ninth\", \"7b9\"],\n  [\"1P 3M 5P 7m 9A\", \"dominant sharp ninth\", \"7#9\"],\n  [\"1P 3M 7m 9m\", \"altered\", \"alt7\"],\n  // '''Suspended'''\n  [\"1P 4P 5P\", \"suspended fourth\", \"sus4 sus\"],\n  [\"1P 2M 5P\", \"suspended second\", \"sus2\"],\n  [\"1P 4P 5P 7m\", \"suspended fourth seventh\", \"7sus4 7sus\"],\n  [\"1P 5P 7m 9M 11P\", \"eleventh\", \"11\"],\n  [\n    \"1P 4P 5P 7m 9m\",\n    \"suspended fourth flat ninth\",\n    \"b9sus phryg 7b9sus 7b9sus4\",\n  ],\n  // ==Other==\n  [\"1P 5P\", \"fifth\", \"5\"],\n  [\"1P 3M 5A\", \"augmented\", \"aug + +5 ^#5\"],\n  [\"1P 3m 5A\", \"minor augmented\", \"m#5 -#5 m+\"],\n  [\"1P 3M 5A 7M\", \"augmented seventh\", \"maj7#5 maj7+5 +maj7 ^7#5\"],\n  [\n    \"1P 3M 5P 7M 9M 11A\",\n    \"major sharp eleventh (lydian)\",\n    \"maj9#11 Î”9#11 ^9#11\",\n  ],\n  // ==Legacy==\n  [\"1P 2M 4P 5P\", \"\", \"sus24 sus4add9\"],\n  [\"1P 3M 5A 7M 9M\", \"\", \"maj9#5 Maj9#5\"],\n  [\"1P 3M 5A 7m\", \"\", \"7#5 +7 7+ 7aug aug7\"],\n  [\"1P 3M 5A 7m 9A\", \"\", \"7#5#9 7#9#5 7alt\"],\n  [\"1P 3M 5A 7m 9M\", \"\", \"9#5 9+\"],\n  [\"1P 3M 5A 7m 9M 11A\", \"\", \"9#5#11\"],\n  [\"1P 3M 5A 7m 9m\", \"\", \"7#5b9 7b9#5\"],\n  [\"1P 3M 5A 7m 9m 11A\", \"\", \"7#5b9#11\"],\n  [\"1P 3M 5A 9A\", \"\", \"+add#9\"],\n  [\"1P 3M 5A 9M\", \"\", \"M#5add9 +add9\"],\n  [\"1P 3M 5P 6M 11A\", \"\", \"M6#11 M6b5 6#11 6b5\"],\n  [\"1P 3M 5P 6M 7M 9M\", \"\", \"M7add13\"],\n  [\"1P 3M 5P 6M 9M 11A\", \"\", \"69#11\"],\n  [\"1P 3m 5P 6M 9M\", \"\", \"m69 -69\"],\n  [\"1P 3M 5P 6m 7m\", \"\", \"7b6\"],\n  [\"1P 3M 5P 7M 9A 11A\", \"\", \"maj7#9#11\"],\n  [\"1P 3M 5P 7M 9M 11A 13M\", \"\", \"M13#11 maj13#11 M13+4 M13#4\"],\n  [\"1P 3M 5P 7M 9m\", \"\", \"M7b9\"],\n  [\"1P 3M 5P 7m 11A 13m\", \"\", \"7#11b13 7b5b13\"],\n  [\"1P 3M 5P 7m 13M\", \"\", \"7add6 67 7add13\"],\n  [\"1P 3M 5P 7m 9A 11A\", \"\", \"7#9#11 7b5#9 7#9b5\"],\n  [\"1P 3M 5P 7m 9A 11A 13M\", \"\", \"13#9#11\"],\n  [\"1P 3M 5P 7m 9A 11A 13m\", \"\", \"7#9#11b13\"],\n  [\"1P 3M 5P 7m 9A 13M\", \"\", \"13#9\"],\n  [\"1P 3M 5P 7m 9A 13m\", \"\", \"7#9b13\"],\n  [\"1P 3M 5P 7m 9M 11A\", \"\", \"9#11 9+4 9#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13M\", \"\", \"13#11 13+4 13#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13m\", \"\", \"9#11b13 9b5b13\"],\n  [\"1P 3M 5P 7m 9m 11A\", \"\", \"7b9#11 7b5b9 7b9b5\"],\n  [\"1P 3M 5P 7m 9m 11A 13M\", \"\", \"13b9#11\"],\n  [\"1P 3M 5P 7m 9m 11A 13m\", \"\", \"7b9b13#11 7b9#11b13 7b5b9b13\"],\n  [\"1P 3M 5P 7m 9m 13M\", \"\", \"13b9\"],\n  [\"1P 3M 5P 7m 9m 13m\", \"\", \"7b9b13\"],\n  [\"1P 3M 5P 7m 9m 9A\", \"\", \"7b9#9\"],\n  [\"1P 3M 5P 9M\", \"\", \"Madd9 2 add9 add2\"],\n  [\"1P 3M 5P 9m\", \"\", \"Maddb9\"],\n  [\"1P 3M 5d\", \"\", \"Mb5\"],\n  [\"1P 3M 5d 6M 7m 9M\", \"\", \"13b5\"],\n  [\"1P 3M 5d 7M\", \"\", \"M7b5\"],\n  [\"1P 3M 5d 7M 9M\", \"\", \"M9b5\"],\n  [\"1P 3M 5d 7m\", \"\", \"7b5\"],\n  [\"1P 3M 5d 7m 9M\", \"\", \"9b5\"],\n  [\"1P 3M 7m\", \"\", \"7no5\"],\n  [\"1P 3M 7m 13m\", \"\", \"7b13\"],\n  [\"1P 3M 7m 9M\", \"\", \"9no5\"],\n  [\"1P 3M 7m 9M 13M\", \"\", \"13no5\"],\n  [\"1P 3M 7m 9M 13m\", \"\", \"9b13\"],\n  [\"1P 3m 4P 5P\", \"\", \"madd4\"],\n  [\"1P 3m 5P 6m 7M\", \"\", \"mMaj7b6\"],\n  [\"1P 3m 5P 6m 7M 9M\", \"\", \"mMaj9b6\"],\n  [\"1P 3m 5P 7m 11P\", \"\", \"m7add11 m7add4\"],\n  [\"1P 3m 5P 9M\", \"\", \"madd9\"],\n  [\"1P 3m 5d 6M 7M\", \"\", \"o7M7\"],\n  [\"1P 3m 5d 7M\", \"\", \"oM7\"],\n  [\"1P 3m 6m 7M\", \"\", \"mb6M7\"],\n  [\"1P 3m 6m 7m\", \"\", \"m7#5\"],\n  [\"1P 3m 6m 7m 9M\", \"\", \"m9#5\"],\n  [\"1P 3m 5A 7m 9M 11P\", \"\", \"m11A\"],\n  [\"1P 3m 6m 9m\", \"\", \"mb6b9\"],\n  [\"1P 2M 3m 5d 7m\", \"\", \"m9b5\"],\n  [\"1P 4P 5A 7M\", \"\", \"M7#5sus4\"],\n  [\"1P 4P 5A 7M 9M\", \"\", \"M9#5sus4\"],\n  [\"1P 4P 5A 7m\", \"\", \"7#5sus4\"],\n  [\"1P 4P 5P 7M\", \"\", \"M7sus4\"],\n  [\"1P 4P 5P 7M 9M\", \"\", \"M9sus4\"],\n  [\"1P 4P 5P 7m 9M\", \"\", \"9sus4 9sus\"],\n  [\"1P 4P 5P 7m 9M 13M\", \"\", \"13sus4 13sus\"],\n  [\"1P 4P 5P 7m 9m 13m\", \"\", \"7sus4b9b13 7b9b13sus4\"],\n  [\"1P 4P 7m 10m\", \"\", \"4 quartal\"],\n  [\"1P 5P 7m 9m 11P\", \"\", \"11b9\"],\n];\n\nexport default CHORDS;\n", "import {\n  EmptyPcset,\n  get as pcset,\n  Pcset,\n  PcsetChroma,\n  PcsetNum,\n} from \"@tonaljs/pcset\";\nimport data from \"./data\";\n\n/**\n * Properties for a scale in the scale dictionary. It's a pitch class set\n * properties with the following additional information:\n * - name: the scale name\n * - aliases: alternative list of names\n * - intervals: an array of interval names\n */\nexport interface ScaleType extends Pcset {\n  readonly name: string;\n  readonly aliases: string[];\n}\n\nexport const NoScaleType: ScaleType = {\n  ...EmptyPcset,\n  intervals: [],\n  aliases: [],\n};\n\ntype ScaleTypeName = string | PcsetChroma | PcsetNum;\n\nlet dictionary: ScaleType[] = [];\nlet index: Record<ScaleTypeName, ScaleType> = {};\n\nexport function names() {\n  return dictionary.map((scale) => scale.name);\n}\n\n/**\n * Given a scale name or chroma, return the scale properties\n *\n * @param {string} type - scale name or pitch class set chroma\n * @example\n * import { get } from 'tonaljs/scale-type'\n * get('major') // => { name: 'major', ... }\n */\nexport function get(type: ScaleTypeName): ScaleType {\n  return index[type] || NoScaleType;\n}\n\n/**\n * @deprecated\n * @use ScaleType.get\n */\nexport const scaleType = get;\n\n/**\n * Return a list of all scale types\n */\nexport function all() {\n  return dictionary.slice();\n}\n\n/**\n * @deprecated\n * @use ScaleType.all\n */\nexport const entries = all;\n\n/**\n * Keys used to reference scale types\n */\nexport function keys() {\n  return Object.keys(index);\n}\n\n/**\n * Clear the dictionary\n */\nexport function removeAll() {\n  dictionary = [];\n  index = {};\n}\n\n/**\n * Add a scale into dictionary\n * @param intervals\n * @param name\n * @param aliases\n */\nexport function add(\n  intervals: string[],\n  name: string,\n  aliases: string[] = [],\n): ScaleType {\n  const scale = { ...pcset(intervals), name, intervals, aliases };\n  dictionary.push(scale);\n  index[scale.name] = scale;\n  index[scale.setNum] = scale;\n  index[scale.chroma] = scale;\n  scale.aliases.forEach((alias) => addAlias(scale, alias));\n  return scale;\n}\n\nexport function addAlias(scale: ScaleType, alias: string) {\n  index[alias] = scale;\n}\n\ndata.forEach(([ivls, name, ...aliases]: string[]) =>\n  add(ivls.split(\" \"), name, aliases),\n);\n\n/** @deprecated */\nexport default {\n  names,\n  get,\n  all,\n  add,\n  removeAll,\n  keys,\n\n  // deprecated\n  entries,\n  scaleType,\n};\n", "// SCALES\n// Format: [\"intervals\", \"name\", \"alias1\", \"alias2\", ...]\nconst SCALES: string[][] = [\n  // Basic scales\n  [\"1P 2M 3M 5P 6M\", \"major pentatonic\", \"pentatonic\"],\n  [\"1P 2M 3M 4P 5P 6M 7M\", \"major\", \"ionian\"],\n  [\"1P 2M 3m 4P 5P 6m 7m\", \"minor\", \"aeolian\"],\n\n  // Jazz common scales\n  [\"1P 2M 3m 3M 5P 6M\", \"major blues\"],\n  [\"1P 3m 4P 5d 5P 7m\", \"minor blues\", \"blues\"],\n  [\"1P 2M 3m 4P 5P 6M 7M\", \"melodic minor\"],\n  [\"1P 2M 3m 4P 5P 6m 7M\", \"harmonic minor\"],\n  [\"1P 2M 3M 4P 5P 6M 7m 7M\", \"bebop\"],\n  [\"1P 2M 3m 4P 5d 6m 6M 7M\", \"diminished\", \"whole-half diminished\"],\n\n  // Modes\n  [\"1P 2M 3m 4P 5P 6M 7m\", \"dorian\"],\n  [\"1P 2M 3M 4A 5P 6M 7M\", \"lydian\"],\n  [\"1P 2M 3M 4P 5P 6M 7m\", \"mixolydian\", \"dominant\"],\n  [\"1P 2m 3m 4P 5P 6m 7m\", \"phrygian\"],\n  [\"1P 2m 3m 4P 5d 6m 7m\", \"locrian\"],\n\n  // 5-note scales\n  [\"1P 3M 4P 5P 7M\", \"ionian pentatonic\"],\n  [\"1P 3M 4P 5P 7m\", \"mixolydian pentatonic\", \"indian\"],\n  [\"1P 2M 4P 5P 6M\", \"ritusen\"],\n  [\"1P 2M 4P 5P 7m\", \"egyptian\"],\n  [\"1P 3M 4P 5d 7m\", \"neopolitan major pentatonic\"],\n  [\"1P 3m 4P 5P 6m\", \"vietnamese 1\"],\n  [\"1P 2m 3m 5P 6m\", \"pelog\"],\n  [\"1P 2m 4P 5P 6m\", \"kumoijoshi\"],\n  [\"1P 2M 3m 5P 6m\", \"hirajoshi\"],\n  [\"1P 2m 4P 5d 7m\", \"iwato\"],\n  [\"1P 2m 4P 5P 7m\", \"in-sen\"],\n  [\"1P 3M 4A 5P 7M\", \"lydian pentatonic\", \"chinese\"],\n  [\"1P 3m 4P 6m 7m\", \"malkos raga\"],\n  [\"1P 3m 4P 5d 7m\", \"locrian pentatonic\", \"minor seven flat five pentatonic\"],\n  [\"1P 3m 4P 5P 7m\", \"minor pentatonic\", \"vietnamese 2\"],\n  [\"1P 3m 4P 5P 6M\", \"minor six pentatonic\"],\n  [\"1P 2M 3m 5P 6M\", \"flat three pentatonic\", \"kumoi\"],\n  [\"1P 2M 3M 5P 6m\", \"flat six pentatonic\"],\n  [\"1P 2m 3M 5P 6M\", \"scriabin\"],\n  [\"1P 3M 5d 6m 7m\", \"whole tone pentatonic\"],\n  [\"1P 3M 4A 5A 7M\", \"lydian #5P pentatonic\"],\n  [\"1P 3M 4A 5P 7m\", \"lydian dominant pentatonic\"],\n  [\"1P 3m 4P 5P 7M\", \"minor #7M pentatonic\"],\n  [\"1P 3m 4d 5d 7m\", \"super locrian pentatonic\"],\n\n  // 6-note scales\n  [\"1P 2M 3m 4P 5P 7M\", \"minor hexatonic\"],\n  [\"1P 2A 3M 5P 5A 7M\", \"augmented\"],\n  [\"1P 2M 4P 5P 6M 7m\", \"piongio\"],\n  [\"1P 2m 3M 4A 6M 7m\", \"prometheus neopolitan\"],\n  [\"1P 2M 3M 4A 6M 7m\", \"prometheus\"],\n  [\"1P 2m 3M 5d 6m 7m\", \"mystery #1\"],\n  [\"1P 2m 3M 4P 5A 6M\", \"six tone symmetric\"],\n  [\"1P 2M 3M 4A 5A 6A\", \"whole tone\", \"messiaen's mode #1\"],\n  [\"1P 2m 4P 4A 5P 7M\", \"messiaen's mode #5\"],\n\n  // 7-note scales\n  [\"1P 2M 3M 4P 5d 6m 7m\", \"locrian major\", \"arabian\"],\n  [\"1P 2m 3M 4A 5P 6m 7M\", \"double harmonic lydian\"],\n  [\n    \"1P 2m 2A 3M 4A 6m 7m\",\n    \"altered\",\n    \"super locrian\",\n    \"diminished whole tone\",\n    \"pomeroy\",\n  ],\n  [\"1P 2M 3m 4P 5d 6m 7m\", \"locrian #2\", \"half-diminished\", \"aeolian b5\"],\n  [\n    \"1P 2M 3M 4P 5P 6m 7m\",\n    \"mixolydian b6\",\n    \"melodic minor fifth mode\",\n    \"hindu\",\n  ],\n  [\"1P 2M 3M 4A 5P 6M 7m\", \"lydian dominant\", \"lydian b7\", \"overtone\"],\n  [\"1P 2M 3M 4A 5A 6M 7M\", \"lydian augmented\"],\n  [\n    \"1P 2m 3m 4P 5P 6M 7m\",\n    \"dorian b2\",\n    \"phrygian #6\",\n    \"melodic minor second mode\",\n  ],\n  [\n    \"1P 2m 3m 4d 5d 6m 7d\",\n    \"ultralocrian\",\n    \"superlocrian bb7\",\n    \"superlocrian diminished\",\n  ],\n  [\"1P 2m 3m 4P 5d 6M 7m\", \"locrian 6\", \"locrian natural 6\", \"locrian sharp 6\"],\n  [\"1P 2A 3M 4P 5P 5A 7M\", \"augmented heptatonic\"],\n  // Source https://en.wikipedia.org/wiki/Ukrainian_Dorian_scale\n  [\n    \"1P 2M 3m 4A 5P 6M 7m\",\n    \"dorian #4\",\n    \"ukrainian dorian\",\n    \"romanian minor\",\n    \"altered dorian\",\n  ],\n  [\"1P 2M 3m 4A 5P 6M 7M\", \"lydian diminished\"],\n  [\"1P 2M 3M 4A 5A 7m 7M\", \"leading whole tone\"],\n  [\"1P 2M 3M 4A 5P 6m 7m\", \"lydian minor\"],\n  [\"1P 2m 3M 4P 5P 6m 7m\", \"phrygian dominant\", \"spanish\", \"phrygian major\"],\n  [\"1P 2m 3m 4P 5P 6m 7M\", \"balinese\"],\n  [\"1P 2m 3m 4P 5P 6M 7M\", \"neopolitan major\"],\n  [\"1P 2M 3M 4P 5P 6m 7M\", \"harmonic major\"],\n  [\"1P 2m 3M 4P 5P 6m 7M\", \"double harmonic major\", \"gypsy\"],\n  [\"1P 2M 3m 4A 5P 6m 7M\", \"hungarian minor\"],\n  [\"1P 2A 3M 4A 5P 6M 7m\", \"hungarian major\"],\n  [\"1P 2m 3M 4P 5d 6M 7m\", \"oriental\"],\n  [\"1P 2m 3m 3M 4A 5P 7m\", \"flamenco\"],\n  [\"1P 2m 3m 4A 5P 6m 7M\", \"todi raga\"],\n  [\"1P 2m 3M 4P 5d 6m 7M\", \"persian\"],\n  [\"1P 2m 3M 5d 6m 7m 7M\", \"enigmatic\"],\n  [\n    \"1P 2M 3M 4P 5A 6M 7M\",\n    \"major augmented\",\n    \"major #5\",\n    \"ionian augmented\",\n    \"ionian #5\",\n  ],\n  [\"1P 2A 3M 4A 5P 6M 7M\", \"lydian #9\"],\n\n  // 8-note scales\n  [\"1P 2m 2M 4P 4A 5P 6m 7M\", \"messiaen's mode #4\"],\n  [\"1P 2m 3M 4P 4A 5P 6m 7M\", \"purvi raga\"],\n  [\"1P 2m 3m 3M 4P 5P 6m 7m\", \"spanish heptatonic\"],\n  [\"1P 2M 3m 3M 4P 5P 6M 7m\", \"bebop minor\"],\n  [\"1P 2M 3M 4P 5P 5A 6M 7M\", \"bebop major\"],\n  [\"1P 2m 3m 4P 5d 5P 6m 7m\", \"bebop locrian\"],\n  [\"1P 2M 3m 4P 5P 6m 7m 7M\", \"minor bebop\"],\n  [\"1P 2M 3M 4P 5d 5P 6M 7M\", \"ichikosucho\"],\n  [\"1P 2M 3m 4P 5P 6m 6M 7M\", \"minor six diminished\"],\n  [\n    \"1P 2m 3m 3M 4A 5P 6M 7m\",\n    \"half-whole diminished\",\n    \"dominant diminished\",\n    \"messiaen's mode #2\",\n  ],\n  [\"1P 3m 3M 4P 5P 6M 7m 7M\", \"kafi raga\"],\n  [\"1P 2M 3M 4P 4A 5A 6A 7M\", \"messiaen's mode #6\"],\n\n  // 9-note scales\n  [\"1P 2M 3m 3M 4P 5d 5P 6M 7m\", \"composite blues\"],\n  [\"1P 2M 3m 3M 4A 5P 6m 7m 7M\", \"messiaen's mode #3\"],\n\n  // 10-note scales\n  [\"1P 2m 2M 3m 4P 4A 5P 6m 6M 7M\", \"messiaen's mode #7\"],\n\n  // 12-note scales\n  [\"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\", \"chromatic\"],\n];\n\nexport default SCALES;\n", "/**\n * References:\n * - https://www.researchgate.net/publication/327567188_An_Algorithm_for_Spelling_the_Pitches_of_Any_Musical_Scale\n * @module scale\n */\nimport { all as chordTypes } from \"@tonaljs/chord-type\";\nimport { range as nums, rotate } from \"@tonaljs/collection\";\nimport { enharmonic, fromMidi, sortedUniqNames } from \"@tonaljs/note\";\nimport {\n  chroma,\n  isChroma,\n  isSubsetOf,\n  isSupersetOf,\n  modes,\n} from \"@tonaljs/pcset\";\nimport { tonicIntervalsTransposer, transpose } from \"@tonaljs/pitch-distance\";\nimport { note, NoteName } from \"@tonaljs/pitch-note\";\nimport {\n  all,\n  get as getScaleType,\n  ScaleType,\n  names as scaleTypeNames,\n  all as scaleTypes,\n} from \"@tonaljs/scale-type\";\n\ntype ScaleName = string;\ntype ScaleNameTokens = [string, string]; // [TONIC, SCALE TYPE]\n\nexport interface Scale extends ScaleType {\n  tonic: string | null;\n  type: string;\n  notes: NoteName[];\n}\n\nconst NoScale: Scale = {\n  empty: true,\n  name: \"\",\n  type: \"\",\n  tonic: null,\n  setNum: NaN,\n  chroma: \"\",\n  normalized: \"\",\n  aliases: [],\n  notes: [],\n  intervals: [],\n};\n\n/**\n * Given a string with a scale name and (optionally) a tonic, split\n * that components.\n *\n * It retuns an array with the form [ name, tonic ] where tonic can be a\n * note name or null and name can be any arbitrary string\n * (this function doesn\"t check if that scale name exists)\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array} an array [tonic, name]\n * @example\n * tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\n * tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\n * tokenize() // => [\"\", \"\"]\n */\nexport function tokenize(name: ScaleName): ScaleNameTokens {\n  if (typeof name !== \"string\") {\n    return [\"\", \"\"];\n  }\n  const i = name.indexOf(\" \");\n  const tonic = note(name.substring(0, i));\n  if (tonic.empty) {\n    const n = note(name);\n    return n.empty ? [\"\", name] : [n.name, \"\"];\n  }\n\n  const type = name.substring(tonic.name.length + 1).toLowerCase();\n  return [tonic.name, type.length ? type : \"\"];\n}\n\n/**\n * Get all scale names\n * @function\n */\nexport const names = scaleTypeNames;\n\n/**\n * Get a Scale from a scale name.\n */\nexport function get(src: ScaleName | ScaleNameTokens): Scale {\n  const tokens = Array.isArray(src) ? src : tokenize(src);\n  const tonic = note(tokens[0]).name;\n  const st = getScaleType(tokens[1]);\n  if (st.empty) {\n    return NoScale;\n  }\n\n  const type = st.name;\n  const notes: string[] = tonic\n    ? st.intervals.map((i) => transpose(tonic, i))\n    : [];\n\n  const name = tonic ? tonic + \" \" + type : type;\n\n  return { ...st, name, type, tonic, notes };\n}\n\n/**\n * @deprecated\n * @use Scale.get\n */\nexport const scale = get;\n\nexport function detect(\n  notes: string[],\n  options: { tonic?: string; match?: \"exact\" | \"fit\" } = {},\n): string[] {\n  const notesChroma = chroma(notes);\n  const tonic = note(options.tonic ?? notes[0] ?? \"\");\n  const tonicChroma = tonic.chroma;\n  if (tonicChroma === undefined) {\n    return [];\n  }\n\n  const pitchClasses = notesChroma.split(\"\");\n  pitchClasses[tonicChroma] = \"1\";\n  const scaleChroma = rotate(tonicChroma, pitchClasses).join(\"\");\n  const match = all().find((scaleType) => scaleType.chroma === scaleChroma);\n\n  const results: string[] = [];\n  if (match) {\n    results.push(tonic.name + \" \" + match.name);\n  }\n  if (options.match === \"exact\") {\n    return results;\n  }\n\n  extended(scaleChroma).forEach((scaleName) => {\n    results.push(tonic.name + \" \" + scaleName);\n  });\n\n  return results;\n}\n\n/**\n * Get all chords that fits a given scale\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array<string>} - the chord names\n *\n * @example\n * scaleChords(\"pentatonic\") // => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\n */\nexport function scaleChords(name: string): string[] {\n  const s = get(name);\n  const inScale = isSubsetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => inScale(chord.chroma))\n    .map((chord) => chord.aliases[0]);\n}\n/**\n * Get all scales names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n * @example\n * extended(\"major\") // => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\n */\nexport function extended(name: string): string[] {\n  const chroma = isChroma(name) ? name : get(name).chroma;\n  const isSuperset = isSupersetOf(chroma);\n  return scaleTypes()\n    .filter((scale) => isSuperset(scale.chroma))\n    .map((scale) => scale.name);\n}\n\n/**\n * Find all scales names that are a subset of the given one\n * (has less notes but all from the given scale)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n *\n * @example\n * reduced(\"major\") // => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\n */\nexport function reduced(name: string): string[] {\n  const isSubset = isSubsetOf(get(name).chroma);\n  return scaleTypes()\n    .filter((scale) => isSubset(scale.chroma))\n    .map((scale) => scale.name);\n}\n\n/**\n * Given an array of notes, return the scale: a pitch class set starting from\n * the first note of the array\n *\n * @function\n * @param {string[]} notes\n * @return {string[]} pitch classes with same tonic\n * @example\n * scaleNotes(['C4', 'c3', 'C5', 'C4', 'c4']) // => [\"C\"]\n * scaleNotes(['D4', 'c#5', 'A5', 'F#6']) // => [\"D\", \"F#\", \"A\", \"C#\"]\n */\nexport function scaleNotes(notes: NoteName[]) {\n  const pcset: string[] = notes.map((n) => note(n).pc).filter((x) => x);\n  const tonic = pcset[0];\n  const scale = sortedUniqNames(pcset);\n  return rotate(scale.indexOf(tonic), scale);\n}\n\ntype ScaleMode = [string, string];\n/**\n * Find mode names of a scale\n *\n * @function\n * @param {string} name - scale name\n * @example\n * modeNames(\"C pentatonic\") // => [\n *   [\"C\", \"major pentatonic\"],\n *   [\"D\", \"egyptian\"],\n *   [\"E\", \"malkos raga\"],\n *   [\"G\", \"ritusen\"],\n *   [\"A\", \"minor pentatonic\"]\n * ]\n */\nexport function modeNames(name: string): ScaleMode[] {\n  const s = get(name);\n  if (s.empty) {\n    return [];\n  }\n\n  const tonics = s.tonic ? s.notes : s.intervals;\n  return modes(s.chroma)\n    .map((chroma: string, i: number): ScaleMode => {\n      const modeName = get(chroma).name;\n      return modeName ? [tonics[i], modeName] : [\"\", \"\"];\n    })\n    .filter((x) => x[0]);\n}\n\nfunction getNoteNameOf(scale: string | string[]) {\n  const names = Array.isArray(scale) ? scaleNotes(scale) : get(scale).notes;\n  const chromas = names.map((name) => note(name).chroma);\n\n  return (noteOrMidi: string | number): string | undefined => {\n    const currNote =\n      typeof noteOrMidi === \"number\"\n        ? note(fromMidi(noteOrMidi))\n        : note(noteOrMidi);\n    const height = currNote.height;\n\n    if (height === undefined) return undefined;\n    const chroma = height % 12;\n    const position = chromas.indexOf(chroma);\n    if (position === -1) return undefined;\n    return enharmonic(currNote.name, names[position]);\n  };\n}\n\nexport function rangeOf(scale: string | string[]) {\n  const getName = getNoteNameOf(scale);\n  return (fromNote: string, toNote: string) => {\n    const from = note(fromNote).height;\n    const to = note(toNote).height;\n    if (from === undefined || to === undefined) return [];\n\n    return nums(from, to)\n      .map(getName)\n      .filter((x) => x);\n  };\n}\n\n/**\n * Returns a function to get a note name from the scale degree.\n *\n * @example\n * [1, 2, 3].map(Scale.degrees(\"C major\")) => [\"C\", \"D\", \"E\"]\n * [1, 2, 3].map(Scale.degrees(\"C4 major\")) => [\"C4\", \"D4\", \"E4\"]\n */\nexport function degrees(scaleName: string | ScaleNameTokens) {\n  const { intervals, tonic } = get(scaleName);\n  const transpose = tonicIntervalsTransposer(intervals, tonic);\n  return (degree: number) =>\n    degree ? transpose(degree > 0 ? degree - 1 : degree) : \"\";\n}\n\n/**\n * Sames as `degree` but with 0-based index\n */\nexport function steps(scaleName: string | ScaleNameTokens) {\n  const { intervals, tonic } = get(scaleName);\n  return tonicIntervalsTransposer(intervals, tonic);\n}\n\n/** @deprecated */\nexport default {\n  degrees,\n  detect,\n  extended,\n  get,\n  modeNames,\n  names,\n  rangeOf,\n  reduced,\n  scaleChords,\n  scaleNotes,\n  steps,\n  tokenize,\n\n  // deprecated\n  scale,\n};\n"],
  "mappings": ";;;;;;;;;;AAEA,SAAS,KAAK,GAAW,GAAW;AAClC,QAAM,IAAI,CAAC;AAEX,SAAO,KAAK,EAAE,CAAC,IAAI,IAAI,EAAE;AACzB,SAAO;AACT;AAEA,SAAS,MAAM,GAAW,GAAW;AACnC,QAAM,IAAI,CAAC;AAEX,SAAO,KAAK,EAAE,CAAC,IAAI,IAAI,EAAE;AACzB,SAAO;AACT;AAaO,SAAS,MAAM,MAAc,IAAsB;AACxD,SAAO,OAAO,KAAK,KAAK,MAAM,KAAK,OAAO,CAAC,IAAI,MAAM,MAAM,OAAO,KAAK,CAAC;AAC1E;AAaO,SAAS,OAAU,OAAe,KAAe;AACtD,QAAM,MAAM,IAAI;AAChB,QAAM,KAAM,QAAQ,MAAO,OAAO;AAClC,SAAO,IAAI,MAAM,GAAG,GAAG,EAAE,OAAO,IAAI,MAAM,GAAG,CAAC,CAAC;AACjD;AAWO,SAAS,QAAQ,KAAmB;AACzC,SAAO,IAAI,OAAO,CAAC,MAAM,MAAM,KAAK,CAAC;AACvC;AAYO,SAAS,QAAQ,KAAY,MAAM,KAAK,QAAe;AAC5D,MAAI;AACJ,MAAI;AACJ,MAAI,IAAY,IAAI;AACpB,SAAO,GAAG;AACR,QAAI,KAAK,MAAM,IAAI,IAAI,GAAG;AAC1B,QAAI,IAAI,CAAC;AACT,QAAI,CAAC,IAAI,IAAI,CAAC;AACd,QAAI,CAAC,IAAI;EACX;AACA,SAAO;AACT;AAkBO,SAAS,aAAa,KAAmB;AAC9C,MAAI,IAAI,WAAW,GAAG;AACpB,WAAO,CAAC,CAAC,CAAC;EACZ;AACA,SAAO,aAAa,IAAI,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,SAAS;AACtD,WAAO,IAAI;MACT,IAAI,IAAI,CAAC,GAAG,QAAQ;AAClB,cAAM,UAAU,KAAK,MAAM;AAC3B,gBAAQ,OAAO,KAAK,GAAG,IAAI,CAAC,CAAC;AAC7B,eAAO;MACT,CAAC;IACH;EACF,GAAG,CAAC,CAAC;AACP;AAGA,IAAO,qBAAQ;EACb;EACA;EACA;EACA;EACA;AACF;;;AC5GO,SAAS,aAAa,KAAiC;AAC5D,SAAO,QAAQ,QACb,OAAO,QAAQ,YACf,UAAU,OACV,OAAO,IAAI,SAAS,WAClB,OACA;AACN;AAwCO,SAAS,QAAQA,QAAgC;AACtD,SAAOA,WAAU,QACf,OAAOA,WAAU,YACjB,UAAUA,UACV,OAAOA,OAAM,SAAS,YACtB,SAASA,UACT,OAAOA,OAAM,QAAQ,YACrB,CAAC,MAAMA,OAAM,IAAI,KACjB,CAAC,MAAMA,OAAM,GAAG,IACd,OACA;AACN;AAGA,IAAM,SAAS,CAAC,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC;AAEpC,IAAM,gBAAgB,OAAO;EAAI,CAAC,WAChC,KAAK,MAAO,SAAS,IAAK,EAAE;AAC9B;AAKO,SAAS,YAAYA,QAAgC;AAC1D,QAAM,EAAE,MAAM,KAAK,KAAK,MAAM,EAAE,IAAIA;AACpC,QAAM,IAAI,OAAO,IAAI,IAAI,IAAI;AAC7B,MAAI,QAAQ,QAAW;AACrB,WAAO,CAAC,MAAM,CAAC;EACjB;AACA,QAAM,IAAI,MAAM,cAAc,IAAI,IAAI,IAAI;AAC1C,SAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AAC1B;;;AChFA,IAAM,UAAU,CAAC,GAAW,MAAc,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC;AAmCvE,IAAM,aAAuB,OAAO,OAAO;EACzC,OAAO;EACP,MAAM;EACN,KAAK;EACL,GAAG;EACH,MAAM;EACN,MAAM;EACN,KAAK;EACL,KAAK;EACL,QAAQ;EACR,WAAW;EACX,QAAQ;EACR,OAAO,CAAC;EACR,KAAK;AACP,CAAC;AAGD,IAAM,uBAAuB;AAE7B,IAAM,2BAA2B;AACjC,IAAM,QAAQ,IAAI;EAChB,MAAM,uBAAuB,MAAM,2BAA2B;AAChE;AAOO,SAAS,iBAAiB,KAAoC;AACnE,QAAM,IAAI,MAAM,KAAK,GAAG,GAAG,EAAE;AAC7B,MAAI,MAAM,MAAM;AACd,WAAO,CAAC,IAAI,EAAE;EAChB;AACA,SAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC1C;AAEA,IAAM,QAAuC,CAAC;AAsBvC,SAAS,SAAS,KAAgC;AACvD,SAAO,OAAO,QAAQ,WAClB,MAAM,GAAG,MAAM,MAAM,GAAG,IAAI,MAAM,GAAG,KACrC,QAAQ,GAAG,IACT,SAAS,UAAU,GAAG,CAAC,IACvB,aAAa,GAAG,IACd,SAAS,IAAI,IAAI,IACjB;AACV;AAEA,IAAM,QAAQ,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE;AACnC,IAAM,QAAQ;AACd,SAAS,MAAM,KAAwB;AACrC,QAAM,SAAS,iBAAiB,GAAG;AACnC,MAAI,OAAO,CAAC,MAAM,IAAI;AACpB,WAAO;EACT;AACA,QAAMC,OAAM,CAAC,OAAO,CAAC;AACrB,QAAM,IAAI,OAAO,CAAC;AAClB,QAAM,QAAQ,KAAK,IAAIA,IAAG,IAAI,KAAK;AACnC,QAAM,IAAI,MAAM,IAAI;AACpB,MAAI,MAAM,OAAO,MAAM,KAAK;AAC1B,WAAO;EACT;AACA,QAAM,OAAO,MAAM,MAAM,cAAc;AAEvC,QAAM,OAAO,KAAKA,OAAM;AACxB,QAAM,MAAMA,OAAM,IAAI,KAAK;AAC3B,QAAM,SAASA,SAAQ,KAAKA,SAAQ,KAAKA,OAAM,OAAO,OAAO;AAC7D,QAAM,MAAM,OAAO,MAAM,CAAC;AAC1B,QAAM,MAAM,KAAK,OAAO,KAAK,IAAIA,IAAG,IAAI,KAAK,CAAC;AAC9C,QAAM,YAAY,OAAO,MAAM,IAAI,IAAI,MAAM,KAAK;AAClD,QAAMC,WAAY,OAAO,MAAM,IAAI,IAAI,OAAQ,KAAM,MAAM;AAC3D,QAAM,QAAQ,YAAY,EAAE,MAAM,KAAK,KAAK,IAAI,CAAC;AACjD,SAAO;IACL,OAAO;IACP;IACA,KAAAD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAAC;IACA;IACA;EACF;AACF;AAkBA,SAAS,OAAO,MAAY,GAAmB;AAC7C,SAAQ,MAAM,OAAO,SAAS,eAC3B,MAAM,OAAO,SAAS,gBACrB,IACA,MAAM,OAAO,SAAS,cACpB,KACA,OAAO,KAAK,CAAC,IACX,EAAE,SACF,OAAO,KAAK,CAAC,IACX,MAAM,SAAS,gBAAgB,EAAE,SAAS,EAAE,SAAS,KACrD;AACZ;AAGA,SAAS,UAAU,OAAsB;AACvC,QAAM,EAAE,MAAM,KAAK,MAAM,GAAG,IAAI,IAAI;AACpC,MAAI,CAAC,KAAK;AACR,WAAO;EACT;AACA,QAAM,UAAU,OAAO,IAAI,IAAI;AAE/B,QAAMC,OAAM,YAAY,IAAI,OAAO,IAAI;AACvC,QAAM,IAAI,MAAM,IAAI,MAAM;AAC1B,QAAM,OAAO,MAAM,IAAI,MAAM,MAAM,cAAc;AACjD,QAAM,OAAO,IAAIA,OAAM,OAAO,MAAM,GAAG;AACvC,SAAO;AACT;AAEA,SAAS,OAAO,MAAY,KAAsB;AAChD,MAAI,QAAQ,GAAG;AACb,WAAO,SAAS,cAAc,MAAM;EACtC,WAAW,QAAQ,MAAM,SAAS,aAAa;AAC7C,WAAO;EACT,WAAW,MAAM,GAAG;AAClB,WAAO,QAAQ,KAAK,GAAG;EACzB,OAAO;AACL,WAAO,QAAQ,KAAK,SAAS,gBAAgB,MAAM,MAAM,CAAC;EAC5D;AACF;;;ACvLO,IAAM,aAAoB;EAC/B,OAAO;EACP,MAAM;EACN,QAAQ;EACR,QAAQ;EACR,YAAY;EACZ,WAAW,CAAC;AACd;AAMA,IAAM,iBAAiB,CAACC,SACtB,OAAOA,IAAG,EAAE,SAAS,CAAC,EAAE,SAAS,IAAI,GAAG;AAC1C,IAAM,iBAAiB,CAACC,YAA2B,SAASA,SAAQ,CAAC;AACrE,IAAMC,SAAQ;AAGP,SAAS,SAAS,KAA8B;AACrD,SAAOA,OAAM,KAAK,GAAG;AACvB;AAGA,IAAM,aAAa,CAAC,QAClB,OAAO,QAAQ,YAAY,OAAO,KAAK,OAAO;AAGhD,IAAM,UAAU,CAAC,QAA2B,OAAO,SAAS,IAAI,MAAM;AAEtE,IAAMC,SAAoC,EAAE,CAAC,WAAW,MAAM,GAAG,WAAW;AAmBrE,SAAS,IAAI,KAAiB;AACnC,QAAMF,UAAsB,SAAS,GAAG,IACpC,MACA,WAAW,GAAG,IACZ,eAAe,GAAG,IAClB,MAAM,QAAQ,GAAG,IACf,aAAa,GAAG,IAChB,QAAQ,GAAG,IACT,IAAI,SACJ,WAAW;AAErB,SAAQE,OAAMF,OAAM,IAAIE,OAAMF,OAAM,KAAK,cAAcA,OAAM;AAC/D;AAMO,IAAM,QAAQ;AAQd,IAAM,SAAS,CAAC,QAAa,IAAI,GAAG,EAAE;AAQtC,IAAM,YAAY,CAAC,QAAa,IAAI,GAAG,EAAE;AAQzC,IAAM,MAAM,CAAC,QAAa,IAAI,GAAG,EAAE;AAE1C,IAAM,OAAO;EACX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AASA,SAAS,kBAAkBA,SAAqC;AAC9D,QAAMG,aAAY,CAAC;AACnB,WAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAE3B,QAAIH,QAAO,OAAO,CAAC,MAAM,IAAKG,YAAU,KAAK,KAAK,CAAC,CAAC;EACtD;AACA,SAAOA;AACT;AAEO,SAAS,MAAM,KAAsB;AAC1C,SAAO,IAAI,GAAG,EAAE,UAAU,IAAI,CAAC,QAAQ,UAAU,KAAK,GAAG,CAAC;AAC5D;AAUO,SAAS,UAAyB;AACvC,SAAO,MAAM,MAAM,IAAI,EAAE,IAAI,cAAc;AAC7C;AAgBO,SAAS,MAAM,KAAU,YAAY,MAAqB;AAC/D,QAAM,MAAM,IAAI,GAAG;AAEnB,QAAM,SAAS,IAAI,OAAO,MAAM,EAAE;AAClC,SAAO;IACL,OAAO,IAAI,CAAC,GAAG,MAAM;AACnB,YAAM,IAAI,OAAO,GAAG,MAAM;AAC1B,aAAO,aAAa,EAAE,CAAC,MAAM,MAAM,OAAO,EAAE,KAAK,EAAE;IACrD,CAAC;EACH;AACF;AAWO,SAAS,QAAQ,IAAS,IAAS;AACxC,SAAO,IAAI,EAAE,EAAE,WAAW,IAAI,EAAE,EAAE;AACpC;AAiBO,SAAS,WAAW,KAAU;AACnC,QAAM,IAAI,IAAI,GAAG,EAAE;AAEnB,SAAO,CAACC,WAAuB;AAC7B,UAAM,IAAI,IAAIA,MAAK,EAAE;AAErB,WAAO,KAAK,MAAM,MAAM,IAAI,OAAO;EACrC;AACF;AAcO,SAAS,aAAa,KAAU;AACrC,QAAM,IAAI,IAAI,GAAG,EAAE;AACnB,SAAO,CAACA,WAAe;AACrB,UAAM,IAAI,IAAIA,MAAK,EAAE;AAErB,WAAO,KAAK,MAAM,MAAM,IAAI,OAAO;EACrC;AACF;AAgBO,SAAS,iBAAiB,KAAU;AACzC,QAAM,IAAI,IAAI,GAAG;AAEjB,SAAO,CAAC,aAAgC;AACtC,UAAM,IAAI,KAAK,QAAQ;AACvB,WAAO,KAAK,CAAC,EAAE,SAAS,EAAE,OAAO,OAAO,EAAE,MAAM,MAAM;EACxD;AACF;AAgBO,SAAS,OAAO,KAAU;AAC/B,QAAM,aAAa,iBAAiB,GAAG;AACvC,SAAO,CAACC,WAAsB;AAC5B,WAAOA,OAAM,OAAO,UAAU;EAChC;AACF;AAGA,IAAO,gBAAQ;EACb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;AACF;AAIA,SAAS,gBAAgBC,SAA0B;AACjD,QAAM,SAASA,QAAO,MAAM,EAAE;AAC9B,SAAO,OAAO,IAAI,CAAC,GAAG,MAAM,OAAO,GAAG,MAAM,EAAE,KAAK,EAAE,CAAC;AACxD;AAEA,SAAS,cAAcA,SAA4B;AACjD,QAAM,SAAS,eAAeA,OAAM;AACpC,QAAM,gBAAgB,gBAAgBA,OAAM,EACzC,IAAI,cAAc,EAClB,OAAO,CAAC,MAAM,KAAK,IAAI,EACvB,KAAK,EAAE,CAAC;AACX,QAAM,aAAa,eAAe,aAAa;AAE/C,QAAMC,aAAY,kBAAkBD,OAAM;AAE1C,SAAO;IACL,OAAO;IACP,MAAM;IACN;IACA,QAAAA;IACA;IACA,WAAAC;EACF;AACF;AAGA,SAAS,aAAa,KAAyB;AAC7C,MAAI,IAAI,WAAW,GAAG;AACpB,WAAO,WAAW;EACpB;AAEA,MAAIC;AACJ,QAAM,SAAS,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAElD,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,IAAAA,SAAQ,KAAK,IAAI,CAAC,CAAC;AAEnB,QAAIA,OAAM,MAAO,CAAAA,SAAQ,SAAS,IAAI,CAAC,CAAC;AAExC,QAAI,CAACA,OAAM,MAAO,QAAOA,OAAM,MAAM,IAAI;EAC3C;AACA,SAAO,OAAO,KAAK,EAAE;AACvB;;;AEjWA,IAAM,SAAqB;;EAEzB,CAAC,YAAY,SAAS,UAAU;EAChC,CAAC,eAAe,iBAAiB,uBAAuB;EACxD,CAAC,kBAAkB,eAAe,YAAY;EAC9C,CAAC,sBAAsB,oBAAoB,iBAAiB;EAC5D,CAAC,eAAe,SAAS,iBAAiB;EAC1C,CAAC,kBAAkB,qBAAqB,kBAAkB;EAC1D,CAAC,eAAe,4BAA4B,WAAW;EACvD;IACE;IACA;IACA;EACF;;;EAGA,CAAC,YAAY,SAAS,SAAS;EAC/B,CAAC,eAAe,iBAAiB,gBAAgB;EACjD;IACE;IACA;IACA;EACF;EACA,CAAC,eAAe,eAAe,OAAO;EACtC,CAAC,kBAAkB,eAAe,OAAO;EACzC,CAAC,kBAAkB,qBAAqB,eAAe;EACvD,CAAC,sBAAsB,kBAAkB,SAAS;EAClD,CAAC,sBAAsB,oBAAoB,SAAS;;EAEpD,CAAC,YAAY,cAAc,SAAS;EACpC,CAAC,eAAe,sBAAsB,YAAY;EAClD,CAAC,eAAe,mBAAmB,kBAAkB;;;EAGrD,CAAC,eAAe,oBAAoB,OAAO;EAC3C,CAAC,kBAAkB,kBAAkB,GAAG;EACxC,CAAC,sBAAsB,uBAAuB,IAAI;EAClD,CAAC,mBAAmB,2BAA2B,UAAU;;EAEzD,CAAC,kBAAkB,uBAAuB,KAAK;EAC/C,CAAC,kBAAkB,wBAAwB,KAAK;EAChD,CAAC,eAAe,WAAW,MAAM;;EAEjC,CAAC,YAAY,oBAAoB,UAAU;EAC3C,CAAC,YAAY,oBAAoB,MAAM;EACvC,CAAC,eAAe,4BAA4B,YAAY;EACxD,CAAC,mBAAmB,YAAY,IAAI;EACpC;IACE;IACA;IACA;EACF;;EAEA,CAAC,SAAS,SAAS,GAAG;EACtB,CAAC,YAAY,aAAa,cAAc;EACxC,CAAC,YAAY,mBAAmB,YAAY;EAC5C,CAAC,eAAe,qBAAqB,0BAA0B;EAC/D;IACE;IACA;IACA;EACF;;EAEA,CAAC,eAAe,IAAI,gBAAgB;EACpC,CAAC,kBAAkB,IAAI,eAAe;EACtC,CAAC,eAAe,IAAI,qBAAqB;EACzC,CAAC,kBAAkB,IAAI,kBAAkB;EACzC,CAAC,kBAAkB,IAAI,QAAQ;EAC/B,CAAC,sBAAsB,IAAI,QAAQ;EACnC,CAAC,kBAAkB,IAAI,aAAa;EACpC,CAAC,sBAAsB,IAAI,UAAU;EACrC,CAAC,eAAe,IAAI,QAAQ;EAC5B,CAAC,eAAe,IAAI,eAAe;EACnC,CAAC,mBAAmB,IAAI,qBAAqB;EAC7C,CAAC,qBAAqB,IAAI,SAAS;EACnC,CAAC,sBAAsB,IAAI,OAAO;EAClC,CAAC,kBAAkB,IAAI,SAAS;EAChC,CAAC,kBAAkB,IAAI,KAAK;EAC5B,CAAC,sBAAsB,IAAI,WAAW;EACtC,CAAC,0BAA0B,IAAI,6BAA6B;EAC5D,CAAC,kBAAkB,IAAI,MAAM;EAC7B,CAAC,uBAAuB,IAAI,gBAAgB;EAC5C,CAAC,mBAAmB,IAAI,iBAAiB;EACzC,CAAC,sBAAsB,IAAI,oBAAoB;EAC/C,CAAC,0BAA0B,IAAI,SAAS;EACxC,CAAC,0BAA0B,IAAI,WAAW;EAC1C,CAAC,sBAAsB,IAAI,MAAM;EACjC,CAAC,sBAAsB,IAAI,QAAQ;EACnC,CAAC,sBAAsB,IAAI,cAAc;EACzC,CAAC,0BAA0B,IAAI,iBAAiB;EAChD,CAAC,0BAA0B,IAAI,gBAAgB;EAC/C,CAAC,sBAAsB,IAAI,oBAAoB;EAC/C,CAAC,0BAA0B,IAAI,SAAS;EACxC,CAAC,0BAA0B,IAAI,8BAA8B;EAC7D,CAAC,sBAAsB,IAAI,MAAM;EACjC,CAAC,sBAAsB,IAAI,QAAQ;EACnC,CAAC,qBAAqB,IAAI,OAAO;EACjC,CAAC,eAAe,IAAI,mBAAmB;EACvC,CAAC,eAAe,IAAI,QAAQ;EAC5B,CAAC,YAAY,IAAI,KAAK;EACtB,CAAC,qBAAqB,IAAI,MAAM;EAChC,CAAC,eAAe,IAAI,MAAM;EAC1B,CAAC,kBAAkB,IAAI,MAAM;EAC7B,CAAC,eAAe,IAAI,KAAK;EACzB,CAAC,kBAAkB,IAAI,KAAK;EAC5B,CAAC,YAAY,IAAI,MAAM;EACvB,CAAC,gBAAgB,IAAI,MAAM;EAC3B,CAAC,eAAe,IAAI,MAAM;EAC1B,CAAC,mBAAmB,IAAI,OAAO;EAC/B,CAAC,mBAAmB,IAAI,MAAM;EAC9B,CAAC,eAAe,IAAI,OAAO;EAC3B,CAAC,kBAAkB,IAAI,SAAS;EAChC,CAAC,qBAAqB,IAAI,SAAS;EACnC,CAAC,mBAAmB,IAAI,gBAAgB;EACxC,CAAC,eAAe,IAAI,OAAO;EAC3B,CAAC,kBAAkB,IAAI,MAAM;EAC7B,CAAC,eAAe,IAAI,KAAK;EACzB,CAAC,eAAe,IAAI,OAAO;EAC3B,CAAC,eAAe,IAAI,MAAM;EAC1B,CAAC,kBAAkB,IAAI,MAAM;EAC7B,CAAC,sBAAsB,IAAI,MAAM;EACjC,CAAC,eAAe,IAAI,OAAO;EAC3B,CAAC,kBAAkB,IAAI,MAAM;EAC7B,CAAC,eAAe,IAAI,UAAU;EAC9B,CAAC,kBAAkB,IAAI,UAAU;EACjC,CAAC,eAAe,IAAI,SAAS;EAC7B,CAAC,eAAe,IAAI,QAAQ;EAC5B,CAAC,kBAAkB,IAAI,QAAQ;EAC/B,CAAC,kBAAkB,IAAI,YAAY;EACnC,CAAC,sBAAsB,IAAI,cAAc;EACzC,CAAC,sBAAsB,IAAI,uBAAuB;EAClD,CAAC,gBAAgB,IAAI,WAAW;EAChC,CAAC,mBAAmB,IAAI,MAAM;AAChC;AAEA,IAAO,eAAQ;ADxHf,IAAM,cAAyB;EAC7B,GAAG;EACH,MAAM;EACN,SAAS;EACT,WAAW,CAAC;EACZ,SAAS,CAAC;AACZ;AAIA,IAAI,aAA0B,CAAC;AAC/B,IAAI,QAA0C,CAAC;AAwCxC,SAAS,MAAmB;AACjC,SAAO,WAAW,MAAM;AAC1B;AAmBO,SAAS,IAAIC,YAAqB,SAAmB,UAAmB;AAC7E,QAAM,UAAU,WAAWA,UAAS;AACpC,QAAM,QAAQ;IACZ,GAAG,IAAMA,UAAS;IAClB,MAAM,YAAY;IAClB;IACA,WAAAA;IACA;EACF;AACA,aAAW,KAAK,KAAK;AACrB,MAAI,MAAM,MAAM;AACd,UAAM,MAAM,IAAI,IAAI;EACtB;AACA,QAAM,MAAM,MAAM,IAAI;AACtB,QAAM,MAAM,MAAM,IAAI;AACtB,QAAM,QAAQ,QAAQ,CAAC,UAAU,SAAS,OAAO,KAAK,CAAC;AACzD;AAEO,SAAS,SAAS,OAAkB,OAAe;AACxD,QAAM,KAAK,IAAI;AACjB;AAEA,SAAS,WAAWA,YAAmC;AACrD,QAAM,MAAM,CAACC,cAAqBD,WAAU,QAAQC,SAAQ,MAAM;AAClE,SAAO,IAAI,IAAI,IACX,cACA,IAAI,IAAI,IACN,UACA,IAAI,IAAI,IACN,eACA,IAAI,IAAI,IACN,UACA;AACZ;AAEA,aAAK;EAAQ,CAAC,CAAC,MAAM,UAAUC,OAAK,MAClC,IAAI,KAAK,MAAM,GAAG,GAAGA,QAAM,MAAM,GAAG,GAAG,QAAQ;AACjD;AACA,WAAW,KAAK,CAAC,GAAG,MAAM,EAAE,SAAS,EAAE,MAAM;;;AGjI7C,IAAM,SAAqB;;EAEzB,CAAC,kBAAkB,oBAAoB,YAAY;EACnD,CAAC,wBAAwB,SAAS,QAAQ;EAC1C,CAAC,wBAAwB,SAAS,SAAS;;EAG3C,CAAC,qBAAqB,aAAa;EACnC,CAAC,qBAAqB,eAAe,OAAO;EAC5C,CAAC,wBAAwB,eAAe;EACxC,CAAC,wBAAwB,gBAAgB;EACzC,CAAC,2BAA2B,OAAO;EACnC,CAAC,2BAA2B,cAAc,uBAAuB;;EAGjE,CAAC,wBAAwB,QAAQ;EACjC,CAAC,wBAAwB,QAAQ;EACjC,CAAC,wBAAwB,cAAc,UAAU;EACjD,CAAC,wBAAwB,UAAU;EACnC,CAAC,wBAAwB,SAAS;;EAGlC,CAAC,kBAAkB,mBAAmB;EACtC,CAAC,kBAAkB,yBAAyB,QAAQ;EACpD,CAAC,kBAAkB,SAAS;EAC5B,CAAC,kBAAkB,UAAU;EAC7B,CAAC,kBAAkB,6BAA6B;EAChD,CAAC,kBAAkB,cAAc;EACjC,CAAC,kBAAkB,OAAO;EAC1B,CAAC,kBAAkB,YAAY;EAC/B,CAAC,kBAAkB,WAAW;EAC9B,CAAC,kBAAkB,OAAO;EAC1B,CAAC,kBAAkB,QAAQ;EAC3B,CAAC,kBAAkB,qBAAqB,SAAS;EACjD,CAAC,kBAAkB,aAAa;EAChC,CAAC,kBAAkB,sBAAsB,kCAAkC;EAC3E,CAAC,kBAAkB,oBAAoB,cAAc;EACrD,CAAC,kBAAkB,sBAAsB;EACzC,CAAC,kBAAkB,yBAAyB,OAAO;EACnD,CAAC,kBAAkB,qBAAqB;EACxC,CAAC,kBAAkB,UAAU;EAC7B,CAAC,kBAAkB,uBAAuB;EAC1C,CAAC,kBAAkB,uBAAuB;EAC1C,CAAC,kBAAkB,4BAA4B;EAC/C,CAAC,kBAAkB,sBAAsB;EACzC,CAAC,kBAAkB,0BAA0B;;EAG7C,CAAC,qBAAqB,iBAAiB;EACvC,CAAC,qBAAqB,WAAW;EACjC,CAAC,qBAAqB,SAAS;EAC/B,CAAC,qBAAqB,uBAAuB;EAC7C,CAAC,qBAAqB,YAAY;EAClC,CAAC,qBAAqB,YAAY;EAClC,CAAC,qBAAqB,oBAAoB;EAC1C,CAAC,qBAAqB,cAAc,oBAAoB;EACxD,CAAC,qBAAqB,oBAAoB;;EAG1C,CAAC,wBAAwB,iBAAiB,SAAS;EACnD,CAAC,wBAAwB,wBAAwB;EACjD;IACE;IACA;IACA;IACA;IACA;EACF;EACA,CAAC,wBAAwB,cAAc,mBAAmB,YAAY;EACtE;IACE;IACA;IACA;IACA;EACF;EACA,CAAC,wBAAwB,mBAAmB,aAAa,UAAU;EACnE,CAAC,wBAAwB,kBAAkB;EAC3C;IACE;IACA;IACA;IACA;EACF;EACA;IACE;IACA;IACA;IACA;EACF;EACA,CAAC,wBAAwB,aAAa,qBAAqB,iBAAiB;EAC5E,CAAC,wBAAwB,sBAAsB;;EAE/C;IACE;IACA;IACA;IACA;IACA;EACF;EACA,CAAC,wBAAwB,mBAAmB;EAC5C,CAAC,wBAAwB,oBAAoB;EAC7C,CAAC,wBAAwB,cAAc;EACvC,CAAC,wBAAwB,qBAAqB,WAAW,gBAAgB;EACzE,CAAC,wBAAwB,UAAU;EACnC,CAAC,wBAAwB,kBAAkB;EAC3C,CAAC,wBAAwB,gBAAgB;EACzC,CAAC,wBAAwB,yBAAyB,OAAO;EACzD,CAAC,wBAAwB,iBAAiB;EAC1C,CAAC,wBAAwB,iBAAiB;EAC1C,CAAC,wBAAwB,UAAU;EACnC,CAAC,wBAAwB,UAAU;EACnC,CAAC,wBAAwB,WAAW;EACpC,CAAC,wBAAwB,SAAS;EAClC,CAAC,wBAAwB,WAAW;EACpC;IACE;IACA;IACA;IACA;IACA;EACF;EACA,CAAC,wBAAwB,WAAW;;EAGpC,CAAC,2BAA2B,oBAAoB;EAChD,CAAC,2BAA2B,YAAY;EACxC,CAAC,2BAA2B,oBAAoB;EAChD,CAAC,2BAA2B,aAAa;EACzC,CAAC,2BAA2B,aAAa;EACzC,CAAC,2BAA2B,eAAe;EAC3C,CAAC,2BAA2B,aAAa;EACzC,CAAC,2BAA2B,aAAa;EACzC,CAAC,2BAA2B,sBAAsB;EAClD;IACE;IACA;IACA;IACA;EACF;EACA,CAAC,2BAA2B,WAAW;EACvC,CAAC,2BAA2B,oBAAoB;;EAGhD,CAAC,8BAA8B,iBAAiB;EAChD,CAAC,8BAA8B,oBAAoB;;EAGnD,CAAC,iCAAiC,oBAAoB;;EAGtD,CAAC,uCAAuC,WAAW;AACrD;AAEA,IAAOC,gBAAQ;ADtIR,IAAM,cAAyB;EACpC,GAAG;EACH,WAAW,CAAC;EACZ,SAAS,CAAC;AACZ;AAIA,IAAIC,cAA0B,CAAC;AAC/B,IAAIC,SAA0C,CAAC;AAExC,SAAS,QAAQ;AACtB,SAAOD,YAAW,IAAI,CAACE,WAAUA,OAAM,IAAI;AAC7C;AAUO,SAASC,KAAI,MAAgC;AAClD,SAAOF,OAAM,IAAI,KAAK;AACxB;AAMO,IAAM,YAAYE;AAKlB,SAASC,OAAM;AACpB,SAAOJ,YAAW,MAAM;AAC1B;AAMO,IAAM,UAAUI;AAKhB,SAAS,OAAO;AACrB,SAAO,OAAO,KAAKH,MAAK;AAC1B;AAKO,SAAS,YAAY;AAC1B,EAAAD,cAAa,CAAC;AACd,EAAAC,SAAQ,CAAC;AACX;AAQO,SAASI,KACdC,YACA,MACA,UAAoB,CAAC,GACV;AACX,QAAMJ,SAAQ,EAAE,GAAG,IAAMI,UAAS,GAAG,MAAM,WAAAA,YAAW,QAAQ;AAC9D,EAAAN,YAAW,KAAKE,MAAK;AACrB,EAAAD,OAAMC,OAAM,IAAI,IAAIA;AACpB,EAAAD,OAAMC,OAAM,MAAM,IAAIA;AACtB,EAAAD,OAAMC,OAAM,MAAM,IAAIA;AACtB,EAAAA,OAAM,QAAQ,QAAQ,CAAC,UAAUK,UAASL,QAAO,KAAK,CAAC;AACvD,SAAOA;AACT;AAEO,SAASK,UAASL,QAAkB,OAAe;AACxD,EAAAD,OAAM,KAAK,IAAIC;AACjB;AAEAH,cAAK;EAAQ,CAAC,CAAC,MAAM,MAAS,UAAO,MACnCM,KAAI,KAAK,MAAM,GAAG,GAAG,MAAM,OAAO;AACpC;AAGA,IAAO,qBAAQ;EACb;EACA,KAAAF;EACA,KAAAC;EACA,KAAAC;EACA;EACA;;EAGA;EACA;AACF;;;AExFA,IAAM,UAAiB;EACrB,OAAO;EACP,MAAM;EACN,MAAM;EACN,OAAO;EACP,QAAQ;EACR,QAAQ;EACR,YAAY;EACZ,SAAS,CAAC;EACV,OAAO,CAAC;EACR,WAAW,CAAC;AACd;AAkBO,SAAS,SAAS,MAAkC;AACzD,MAAI,OAAO,SAAS,UAAU;AAC5B,WAAO,CAAC,IAAI,EAAE;EAChB;AACA,QAAM,IAAI,KAAK,QAAQ,GAAG;AAC1B,QAAM,QAAQ,KAAK,KAAK,UAAU,GAAG,CAAC,CAAC;AACvC,MAAI,MAAM,OAAO;AACf,UAAM,IAAI,KAAK,IAAI;AACnB,WAAO,EAAE,QAAQ,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE,MAAM,EAAE;EAC3C;AAEA,QAAM,OAAO,KAAK,UAAU,MAAM,KAAK,SAAS,CAAC,EAAE,YAAY;AAC/D,SAAO,CAAC,MAAM,MAAM,KAAK,SAAS,OAAO,EAAE;AAC7C;AAMO,IAAMG,SAAQ;AAKd,SAASC,KAAI,KAAyC;AAC3D,QAAM,SAAS,MAAM,QAAQ,GAAG,IAAI,MAAM,SAAS,GAAG;AACtD,QAAM,QAAQ,KAAK,OAAO,CAAC,CAAC,EAAE;AAC9B,QAAM,KAAKA,KAAa,OAAO,CAAC,CAAC;AACjC,MAAI,GAAG,OAAO;AACZ,WAAO;EACT;AAEA,QAAM,OAAO,GAAG;AAChB,QAAMC,SAAkB,QACpB,GAAG,UAAU,IAAI,CAAC,MAAM,UAAU,OAAO,CAAC,CAAC,IAC3C,CAAC;AAEL,QAAM,OAAO,QAAQ,QAAQ,MAAM,OAAO;AAE1C,SAAO,EAAE,GAAG,IAAI,MAAM,MAAM,OAAO,OAAAA,OAAM;AAC3C;AAMO,IAAM,QAAQD;AAEd,SAAS,OACdC,QACA,UAAuD,CAAC,GAC9C;AACV,QAAM,cAAc,OAAOA,MAAK;AAChC,QAAM,QAAQ,KAAK,QAAQ,SAASA,OAAM,CAAC,KAAK,EAAE;AAClD,QAAM,cAAc,MAAM;AAC1B,MAAI,gBAAgB,QAAW;AAC7B,WAAO,CAAC;EACV;AAEA,QAAM,eAAe,YAAY,MAAM,EAAE;AACzC,eAAa,WAAW,IAAI;AAC5B,QAAM,cAAc,OAAO,aAAa,YAAY,EAAE,KAAK,EAAE;AAC7D,QAAM,QAAQC,KAAI,EAAE,KAAK,CAACC,eAAcA,WAAU,WAAW,WAAW;AAExE,QAAM,UAAoB,CAAC;AAC3B,MAAI,OAAO;AACT,YAAQ,KAAK,MAAM,OAAO,MAAM,MAAM,IAAI;EAC5C;AACA,MAAI,QAAQ,UAAU,SAAS;AAC7B,WAAO;EACT;AAEA,WAAS,WAAW,EAAE,QAAQ,CAAC,cAAc;AAC3C,YAAQ,KAAK,MAAM,OAAO,MAAM,SAAS;EAC3C,CAAC;AAED,SAAO;AACT;AAYO,SAAS,YAAY,MAAwB;AAClD,QAAM,IAAIH,KAAI,IAAI;AAClB,QAAM,UAAU,WAAW,EAAE,MAAM;AACnC,SAAO,IAAW,EACf,OAAO,CAAC,UAAU,QAAQ,MAAM,MAAM,CAAC,EACvC,IAAI,CAAC,UAAU,MAAM,QAAQ,CAAC,CAAC;AACpC;AAWO,SAAS,SAAS,MAAwB;AAC/C,QAAMI,UAAS,SAAS,IAAI,IAAI,OAAOJ,KAAI,IAAI,EAAE;AACjD,QAAM,aAAa,aAAaI,OAAM;AACtC,SAAOF,KAAW,EACf,OAAO,CAACG,WAAU,WAAWA,OAAM,MAAM,CAAC,EAC1C,IAAI,CAACA,WAAUA,OAAM,IAAI;AAC9B;AAaO,SAAS,QAAQ,MAAwB;AAC9C,QAAM,WAAW,WAAWL,KAAI,IAAI,EAAE,MAAM;AAC5C,SAAOE,KAAW,EACf,OAAO,CAACG,WAAU,SAASA,OAAM,MAAM,CAAC,EACxC,IAAI,CAACA,WAAUA,OAAM,IAAI;AAC9B;AAaO,SAAS,WAAWJ,QAAmB;AAC5C,QAAMK,SAAkBL,OAAM,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,MAAM,CAAC;AACpE,QAAM,QAAQK,OAAM,CAAC;AACrB,QAAMD,SAAQ,gBAAgBC,MAAK;AACnC,SAAO,OAAOD,OAAM,QAAQ,KAAK,GAAGA,MAAK;AAC3C;AAiBO,SAAS,UAAU,MAA2B;AACnD,QAAM,IAAIL,KAAI,IAAI;AAClB,MAAI,EAAE,OAAO;AACX,WAAO,CAAC;EACV;AAEA,QAAM,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE;AACrC,SAAO,MAAM,EAAE,MAAM,EAClB,IAAI,CAACI,SAAgB,MAAyB;AAC7C,UAAM,WAAWJ,KAAII,OAAM,EAAE;AAC7B,WAAO,WAAW,CAAC,OAAO,CAAC,GAAG,QAAQ,IAAI,CAAC,IAAI,EAAE;EACnD,CAAC,EACA,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;AACvB;AAEA,SAAS,cAAcC,QAA0B;AAC/C,QAAMN,UAAQ,MAAM,QAAQM,MAAK,IAAI,WAAWA,MAAK,IAAIL,KAAIK,MAAK,EAAE;AACpE,QAAME,WAAUR,QAAM,IAAI,CAAC,SAAS,KAAK,IAAI,EAAE,MAAM;AAErD,SAAO,CAAC,eAAoD;AAC1D,UAAM,WACJ,OAAO,eAAe,WAClB,KAAK,SAAS,UAAU,CAAC,IACzB,KAAK,UAAU;AACrB,UAAM,SAAS,SAAS;AAExB,QAAI,WAAW,OAAW,QAAO;AACjC,UAAMK,UAAS,SAAS;AACxB,UAAM,WAAWG,SAAQ,QAAQH,OAAM;AACvC,QAAI,aAAa,GAAI,QAAO;AAC5B,WAAO,WAAW,SAAS,MAAML,QAAM,QAAQ,CAAC;EAClD;AACF;AAEO,SAAS,QAAQM,QAA0B;AAChD,QAAM,UAAU,cAAcA,MAAK;AACnC,SAAO,CAAC,UAAkB,WAAmB;AAC3C,UAAM,OAAO,KAAK,QAAQ,EAAE;AAC5B,UAAM,KAAK,KAAK,MAAM,EAAE;AACxB,QAAI,SAAS,UAAa,OAAO,OAAW,QAAO,CAAC;AAEpD,WAAO,MAAK,MAAM,EAAE,EACjB,IAAI,OAAO,EACX,OAAO,CAAC,MAAM,CAAC;EACpB;AACF;AASO,SAAS,QAAQ,WAAqC;AAC3D,QAAM,EAAE,WAAAG,YAAW,MAAM,IAAIR,KAAI,SAAS;AAC1C,QAAMS,aAAY,yBAAyBD,YAAW,KAAK;AAC3D,SAAO,CAAC,WACN,SAASC,WAAU,SAAS,IAAI,SAAS,IAAI,MAAM,IAAI;AAC3D;AAKO,SAAS,MAAM,WAAqC;AACzD,QAAM,EAAE,WAAAD,YAAW,MAAM,IAAIR,KAAI,SAAS;AAC1C,SAAO,yBAAyBQ,YAAW,KAAK;AAClD;AAGA,IAAO,gBAAQ;EACb;EACA;EACA;EACA,KAAAR;EACA;EACA,OAAAD;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;AACF;",
  "names": ["pitch", "num", "chroma", "num", "num", "chroma", "REGEX", "cache", "intervals", "notes", "notes", "chroma", "intervals", "pitch", "intervals", "interval", "names", "data_default", "dictionary", "index", "scale", "get", "all", "add", "intervals", "addAlias", "names", "get", "notes", "all", "scaleType", "chroma", "scale", "pcset", "chromas", "intervals", "transpose"]
}
