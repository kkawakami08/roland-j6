{
  "version": 3,
  "sources": ["../../@tonaljs/abc-notation/index.ts", "../../@tonaljs/array/index.ts", "../../@tonaljs/chord-detect/node_modules/@tonaljs/chord-type/index.ts", "../../@tonaljs/chord-detect/node_modules/@tonaljs/chord-type/data.ts", "../../@tonaljs/chord-detect/index.ts", "../../@tonaljs/pitch/index.ts", "../../@tonaljs/pitch-interval/index.ts", "../../@tonaljs/core/node_modules/@tonaljs/pitch-note/index.ts", "../../@tonaljs/core/node_modules/@tonaljs/pitch-distance/index.ts", "../../@tonaljs/core/index.ts", "../../@tonaljs/chord-type/index.ts", "../../@tonaljs/chord-type/data.ts", "../../@tonaljs/tonal/node_modules/@tonaljs/chord/index.ts", "../../@tonaljs/duration-value/data.ts", "../../@tonaljs/duration-value/index.ts", "../../@tonaljs/interval/index.ts", "../../@tonaljs/roman-numeral/node_modules/@tonaljs/pitch/index.ts", "../../@tonaljs/roman-numeral/node_modules/@tonaljs/pitch-interval/index.ts", "../../@tonaljs/roman-numeral/index.ts", "../../@tonaljs/key/index.ts", "../../@tonaljs/mode/node_modules/@tonaljs/pitch/index.ts", "../../@tonaljs/mode/node_modules/@tonaljs/pitch-interval/index.ts", "../../@tonaljs/mode/node_modules/@tonaljs/interval/index.ts", "../../@tonaljs/mode/index.ts", "../../@tonaljs/chord/node_modules/@tonaljs/chord-type/index.ts", "../../@tonaljs/chord/node_modules/@tonaljs/chord-type/data.ts", "../../@tonaljs/chord/node_modules/@tonaljs/pitch/index.ts", "../../@tonaljs/chord/node_modules/@tonaljs/pitch-interval/index.ts", "../../@tonaljs/chord/node_modules/@tonaljs/interval/index.ts", "../../@tonaljs/chord/index.ts", "../../@tonaljs/progression/node_modules/@tonaljs/pitch/index.ts", "../../@tonaljs/progression/node_modules/@tonaljs/pitch-interval/index.ts", "../../@tonaljs/progression/index.ts", "../../@tonaljs/range/index.ts", "../../@tonaljs/time-signature/index.ts", "../../@tonaljs/tonal/index.ts"],
  "sourcesContent": ["import { distance as dist, transpose as tr } from \"@tonaljs/pitch-distance\";\nimport { note } from \"@tonaljs/pitch-note\";\n\nconst fillStr = (character: string, times: number) =>\n  Array(times + 1).join(character);\n\nconst REGEX = /^(_{1,}|=|\\^{1,}|)([abcdefgABCDEFG])([,']*)$/;\n\ntype AbcTokens = [string, string, string];\n\nexport function tokenize(str: string): AbcTokens {\n  const m = REGEX.exec(str);\n  if (!m) {\n    return [\"\", \"\", \"\"];\n  }\n  return [m[1], m[2], m[3]];\n}\n\n/**\n * Convert a (string) note in ABC notation into a (string) note in scientific notation\n *\n * @example\n * abcToScientificNotation(\"c\") // => \"C5\"\n */\nexport function abcToScientificNotation(str: string): string {\n  const [acc, letter, oct] = tokenize(str);\n  if (letter === \"\") {\n    return \"\";\n  }\n  let o = 4;\n  for (let i = 0; i < oct.length; i++) {\n    o += oct.charAt(i) === \",\" ? -1 : 1;\n  }\n  const a =\n    acc[0] === \"_\"\n      ? acc.replace(/_/g, \"b\")\n      : acc[0] === \"^\"\n        ? acc.replace(/\\^/g, \"#\")\n        : \"\";\n  return letter.charCodeAt(0) > 96\n    ? letter.toUpperCase() + a + (o + 1)\n    : letter + a + o;\n}\n\n/**\n * Convert a (string) note in scientific notation into a (string) note in ABC notation\n *\n * @example\n * scientificToAbcNotation(\"C#4\") // => \"^C\"\n */\nexport function scientificToAbcNotation(str: string): string {\n  const n = note(str);\n  if (n.empty || (!n.oct && n.oct !== 0)) {\n    return \"\";\n  }\n  const { letter, acc, oct } = n;\n  const a = acc[0] === \"b\" ? acc.replace(/b/g, \"_\") : acc.replace(/#/g, \"^\");\n  const l = oct > 4 ? letter.toLowerCase() : letter;\n  const o =\n    oct === 5 ? \"\" : oct > 4 ? fillStr(\"'\", oct - 5) : fillStr(\",\", 4 - oct);\n  return a + l + o;\n}\n\nexport function transpose(note: string, interval: string): string {\n  return scientificToAbcNotation(tr(abcToScientificNotation(note), interval));\n}\n\nexport function distance(from: string, to: string): string {\n  return dist(abcToScientificNotation(from), abcToScientificNotation(to));\n}\n\n/** @deprecated */\nexport default {\n  abcToScientificNotation,\n  scientificToAbcNotation,\n  tokenize,\n  transpose,\n  distance,\n};\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { note, Note } from \"@tonaljs/pitch-note\";\n\n// ascending range\nfunction ascR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = n + b);\n  return a;\n}\n// descending range\nfunction descR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = b - n);\n  return a;\n}\n\n/**\n * Creates a numeric range\n *\n * @param {number} from\n * @param {number} to\n * @return {Array<number>}\n *\n * @example\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\n * range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(from: number, to: number): number[] {\n  return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\n}\n\n/**\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} array\n * @return {Array} the rotated array\n *\n * @example\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nexport function rotate<T>(times: number, arr: T[]): T[] {\n  const len = arr.length;\n  const n = ((times % len) + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the array with the null values removed\n * @function\n * @param {Array} array\n * @return {Array}\n *\n * @example\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nexport function compact(arr: any[]): any[] {\n  return arr.filter((n) => n === 0 || n);\n}\n\n/**\n * Sort an array of notes in ascending order. Pitch classes are listed\n * before notes. Any string that is not a note is removed.\n *\n * @param {string[]} notes\n * @return {string[]} sorted array of notes\n *\n * @example\n * sortedNoteNames(['c2', 'c5', 'c1', 'c0', 'c6', 'c'])\n * // => ['C', 'C0', 'C1', 'C2', 'C5', 'C6']\n * sortedNoteNames(['c', 'F', 'G', 'a', 'b', 'h', 'J'])\n * // => ['C', 'F', 'G', 'A', 'B']\n */\nexport function sortedNoteNames(notes: string[]): string[] {\n  const valid = notes.map((n) => note(n)).filter((n) => !n.empty) as Note[];\n  return valid.sort((a, b) => a.height - b.height).map((n) => n.name);\n}\n\n/**\n * Get sorted notes with duplicates removed. Pitch classes are listed\n * before notes.\n *\n * @function\n * @param {string[]} array\n * @return {string[]} unique sorted notes\n *\n * @example\n * Array.sortedUniqNoteNames(['a', 'b', 'c2', '1p', 'p2', 'c2', 'b', 'c', 'c3' ])\n * // => [ 'C', 'A', 'B', 'C2', 'C3' ]\n */\nexport function sortedUniqNoteNames(arr: string[]): string[] {\n  return sortedNoteNames(arr).filter((n, i, a) => i === 0 || n !== a[i - 1]);\n}\n\n/**\n * Randomizes the order of the specified array in-place, using the Fisherâ€“Yates shuffle.\n *\n * @function\n * @param {Array} array\n * @return {Array} the array shuffled\n *\n * @example\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\n */\nexport function shuffle(arr: any[], rnd = Math.random): any[] {\n  let i: number;\n  let t: any;\n  let m: number = arr.length;\n  while (m) {\n    i = Math.floor(rnd() * m--);\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n}\n\n/**\n * Get all permutations of an array\n *\n * @param {Array} array - the array\n * @return {Array<Array>} an array with all the permutations\n * @example\n * permutations([\"a\", \"b\", \"c\"])) // =>\n * [\n *   [\"a\", \"b\", \"c\"],\n *   [\"b\", \"a\", \"c\"],\n *   [\"b\", \"c\", \"a\"],\n *   [\"a\", \"c\", \"b\"],\n *   [\"c\", \"a\", \"b\"],\n *   [\"c\", \"b\", \"a\"]\n * ]\n */\nexport function permutations(arr: any[]): any[] {\n  if (arr.length === 0) {\n    return [[]];\n  }\n  return permutations(arr.slice(1)).reduce((acc, perm) => {\n    return acc.concat(\n      arr.map((e, pos) => {\n        const newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      }),\n    );\n  }, []);\n}\n", "import {\n  EmptyPcset,\n  get as pcset,\n  Pcset,\n  PcsetChroma,\n  PcsetNum,\n} from \"@tonaljs/pcset\";\nimport data from \"./data\";\n\nexport type ChordQuality =\n  | \"Major\"\n  | \"Minor\"\n  | \"Augmented\"\n  | \"Diminished\"\n  | \"Unknown\";\n\nexport interface ChordType extends Pcset {\n  name: string;\n  quality: ChordQuality;\n  aliases: string[];\n}\nconst NoChordType: ChordType = {\n  ...EmptyPcset,\n  name: \"\",\n  quality: \"Unknown\",\n  intervals: [],\n  aliases: [],\n};\n\ntype ChordTypeName = string | PcsetChroma | PcsetNum;\n\nlet dictionary: ChordType[] = [];\nlet index: Record<ChordTypeName, ChordType> = {};\n\n/**\n * Given a chord name or chroma, return the chord properties\n * @param {string} source - chord name or pitch class set chroma\n * @example\n * import { get } from 'tonaljs/chord-type'\n * get('major') // => { name: 'major', ... }\n */\nexport function get(type: ChordTypeName): ChordType {\n  return index[type] || NoChordType;\n}\n\n/** @deprecated */\nexport const chordType = get;\n\n/**\n * Get all chord (long) names\n */\nexport function names() {\n  return dictionary.map((chord) => chord.name).filter((x) => x);\n}\n\n/**\n * Get all chord symbols\n */\nexport function symbols() {\n  return dictionary.map((chord) => chord.aliases[0]).filter((x) => x);\n}\n\n/**\n * Keys used to reference chord types\n */\nexport function keys() {\n  return Object.keys(index);\n}\n\n/**\n * Return a list of all chord types\n */\nexport function all(): ChordType[] {\n  return dictionary.slice();\n}\n\n/** @deprecated */\nexport const entries = all;\n\n/**\n * Clear the dictionary\n */\nexport function removeAll() {\n  dictionary = [];\n  index = {};\n}\n\n/**\n * Add a chord to the dictionary.\n * @param intervals\n * @param aliases\n * @param [fullName]\n */\nexport function add(intervals: string[], aliases: string[], fullName?: string) {\n  const quality = getQuality(intervals);\n  const chord = {\n    ...pcset(intervals),\n    name: fullName || \"\",\n    quality,\n    intervals,\n    aliases,\n  };\n  dictionary.push(chord);\n  if (chord.name) {\n    index[chord.name] = chord;\n  }\n  index[chord.setNum] = chord;\n  index[chord.chroma] = chord;\n  chord.aliases.forEach((alias) => addAlias(chord, alias));\n}\n\nexport function addAlias(chord: ChordType, alias: string) {\n  index[alias] = chord;\n}\n\nfunction getQuality(intervals: string[]): ChordQuality {\n  const has = (interval: string) => intervals.indexOf(interval) !== -1;\n  return has(\"5A\")\n    ? \"Augmented\"\n    : has(\"3M\")\n      ? \"Major\"\n      : has(\"5d\")\n        ? \"Diminished\"\n        : has(\"3m\")\n          ? \"Minor\"\n          : \"Unknown\";\n}\n\ndata.forEach(([ivls, fullName, names]: string[]) =>\n  add(ivls.split(\" \"), names.split(\" \"), fullName),\n);\ndictionary.sort((a, b) => a.setNum - b.setNum);\n\n/** @deprecated */\nexport default {\n  names,\n  symbols,\n  get,\n  all,\n  add,\n  removeAll,\n  keys,\n  // deprecated\n  entries,\n  chordType,\n};\n", "/**\n * @private\n * Chord List\n * Source: https://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns\n * Format: [\"intervals\", \"full name\", \"abrv1 abrv2\"]\n */\nconst CHORDS: string[][] = [\n  // ==Major==\n  [\"1P 3M 5P\", \"major\", \"M ^  maj\"],\n  [\"1P 3M 5P 7M\", \"major seventh\", \"maj7 Î” ma7 M7 Maj7 ^7\"],\n  [\"1P 3M 5P 7M 9M\", \"major ninth\", \"maj9 Î”9 ^9\"],\n  [\"1P 3M 5P 7M 9M 13M\", \"major thirteenth\", \"maj13 Maj13 ^13\"],\n  [\"1P 3M 5P 6M\", \"sixth\", \"6 add6 add13 M6\"],\n  [\"1P 3M 5P 6M 9M\", \"sixth added ninth\", \"6add9 6/9 69 M69\"],\n  [\"1P 3M 6m 7M\", \"major seventh flat sixth\", \"M7b6 ^7b6\"],\n  [\n    \"1P 3M 5P 7M 11A\",\n    \"major seventh sharp eleventh\",\n    \"maj#4 Î”#4 Î”#11 M7#11 ^7#11 maj7#11\",\n  ],\n  // ==Minor==\n  // '''Normal'''\n  [\"1P 3m 5P\", \"minor\", \"m min -\"],\n  [\"1P 3m 5P 7m\", \"minor seventh\", \"m7 min7 mi7 -7\"],\n  [\n    \"1P 3m 5P 7M\",\n    \"minor/major seventh\",\n    \"m/ma7 m/maj7 mM7 mMaj7 m/M7 -Î”7 mÎ” -^7 -maj7\",\n  ],\n  [\"1P 3m 5P 6M\", \"minor sixth\", \"m6 -6\"],\n  [\"1P 3m 5P 7m 9M\", \"minor ninth\", \"m9 -9\"],\n  [\"1P 3m 5P 7M 9M\", \"minor/major ninth\", \"mM9 mMaj9 -^9\"],\n  [\"1P 3m 5P 7m 9M 11P\", \"minor eleventh\", \"m11 -11\"],\n  [\"1P 3m 5P 7m 9M 13M\", \"minor thirteenth\", \"m13 -13\"],\n  // '''Diminished'''\n  [\"1P 3m 5d\", \"diminished\", \"dim Â° o\"],\n  [\"1P 3m 5d 7d\", \"diminished seventh\", \"dim7 Â°7 o7\"],\n  [\"1P 3m 5d 7m\", \"half-diminished\", \"m7b5 Ã¸ -7b5 h7 h\"],\n  // ==Dominant/Seventh==\n  // '''Normal'''\n  [\"1P 3M 5P 7m\", \"dominant seventh\", \"7 dom\"],\n  [\"1P 3M 5P 7m 9M\", \"dominant ninth\", \"9\"],\n  [\"1P 3M 5P 7m 9M 13M\", \"dominant thirteenth\", \"13\"],\n  [\"1P 3M 5P 7m 11A\", \"lydian dominant seventh\", \"7#11 7#4\"],\n  // '''Altered'''\n  [\"1P 3M 5P 7m 9m\", \"dominant flat ninth\", \"7b9\"],\n  [\"1P 3M 5P 7m 9A\", \"dominant sharp ninth\", \"7#9\"],\n  [\"1P 3M 7m 9m\", \"altered\", \"alt7\"],\n  // '''Suspended'''\n  [\"1P 4P 5P\", \"suspended fourth\", \"sus4 sus\"],\n  [\"1P 2M 5P\", \"suspended second\", \"sus2\"],\n  [\"1P 4P 5P 7m\", \"suspended fourth seventh\", \"7sus4 7sus\"],\n  [\"1P 5P 7m 9M 11P\", \"eleventh\", \"11\"],\n  [\n    \"1P 4P 5P 7m 9m\",\n    \"suspended fourth flat ninth\",\n    \"b9sus phryg 7b9sus 7b9sus4\",\n  ],\n  // ==Other==\n  [\"1P 5P\", \"fifth\", \"5\"],\n  [\"1P 3M 5A\", \"augmented\", \"aug + +5 ^#5\"],\n  [\"1P 3m 5A\", \"minor augmented\", \"m#5 -#5 m+\"],\n  [\"1P 3M 5A 7M\", \"augmented seventh\", \"maj7#5 maj7+5 +maj7 ^7#5\"],\n  [\n    \"1P 3M 5P 7M 9M 11A\",\n    \"major sharp eleventh (lydian)\",\n    \"maj9#11 Î”9#11 ^9#11\",\n  ],\n  // ==Legacy==\n  [\"1P 2M 4P 5P\", \"\", \"sus24 sus4add9\"],\n  [\"1P 3M 5A 7M 9M\", \"\", \"maj9#5 Maj9#5\"],\n  [\"1P 3M 5A 7m\", \"\", \"7#5 +7 7+ 7aug aug7\"],\n  [\"1P 3M 5A 7m 9A\", \"\", \"7#5#9 7#9#5 7alt\"],\n  [\"1P 3M 5A 7m 9M\", \"\", \"9#5 9+\"],\n  [\"1P 3M 5A 7m 9M 11A\", \"\", \"9#5#11\"],\n  [\"1P 3M 5A 7m 9m\", \"\", \"7#5b9 7b9#5\"],\n  [\"1P 3M 5A 7m 9m 11A\", \"\", \"7#5b9#11\"],\n  [\"1P 3M 5A 9A\", \"\", \"+add#9\"],\n  [\"1P 3M 5A 9M\", \"\", \"M#5add9 +add9\"],\n  [\"1P 3M 5P 6M 11A\", \"\", \"M6#11 M6b5 6#11 6b5\"],\n  [\"1P 3M 5P 6M 7M 9M\", \"\", \"M7add13\"],\n  [\"1P 3M 5P 6M 9M 11A\", \"\", \"69#11\"],\n  [\"1P 3m 5P 6M 9M\", \"\", \"m69 -69\"],\n  [\"1P 3M 5P 6m 7m\", \"\", \"7b6\"],\n  [\"1P 3M 5P 7M 9A 11A\", \"\", \"maj7#9#11\"],\n  [\"1P 3M 5P 7M 9M 11A 13M\", \"\", \"M13#11 maj13#11 M13+4 M13#4\"],\n  [\"1P 3M 5P 7M 9m\", \"\", \"M7b9\"],\n  [\"1P 3M 5P 7m 11A 13m\", \"\", \"7#11b13 7b5b13\"],\n  [\"1P 3M 5P 7m 13M\", \"\", \"7add6 67 7add13\"],\n  [\"1P 3M 5P 7m 9A 11A\", \"\", \"7#9#11 7b5#9 7#9b5\"],\n  [\"1P 3M 5P 7m 9A 11A 13M\", \"\", \"13#9#11\"],\n  [\"1P 3M 5P 7m 9A 11A 13m\", \"\", \"7#9#11b13\"],\n  [\"1P 3M 5P 7m 9A 13M\", \"\", \"13#9\"],\n  [\"1P 3M 5P 7m 9A 13m\", \"\", \"7#9b13\"],\n  [\"1P 3M 5P 7m 9M 11A\", \"\", \"9#11 9+4 9#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13M\", \"\", \"13#11 13+4 13#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13m\", \"\", \"9#11b13 9b5b13\"],\n  [\"1P 3M 5P 7m 9m 11A\", \"\", \"7b9#11 7b5b9 7b9b5\"],\n  [\"1P 3M 5P 7m 9m 11A 13M\", \"\", \"13b9#11\"],\n  [\"1P 3M 5P 7m 9m 11A 13m\", \"\", \"7b9b13#11 7b9#11b13 7b5b9b13\"],\n  [\"1P 3M 5P 7m 9m 13M\", \"\", \"13b9\"],\n  [\"1P 3M 5P 7m 9m 13m\", \"\", \"7b9b13\"],\n  [\"1P 3M 5P 7m 9m 9A\", \"\", \"7b9#9\"],\n  [\"1P 3M 5P 9M\", \"\", \"Madd9 2 add9 add2\"],\n  [\"1P 3M 5P 9m\", \"\", \"Maddb9\"],\n  [\"1P 3M 5d\", \"\", \"Mb5\"],\n  [\"1P 3M 5d 6M 7m 9M\", \"\", \"13b5\"],\n  [\"1P 3M 5d 7M\", \"\", \"M7b5\"],\n  [\"1P 3M 5d 7M 9M\", \"\", \"M9b5\"],\n  [\"1P 3M 5d 7m\", \"\", \"7b5\"],\n  [\"1P 3M 5d 7m 9M\", \"\", \"9b5\"],\n  [\"1P 3M 7m\", \"\", \"7no5\"],\n  [\"1P 3M 7m 13m\", \"\", \"7b13\"],\n  [\"1P 3M 7m 9M\", \"\", \"9no5\"],\n  [\"1P 3M 7m 9M 13M\", \"\", \"13no5\"],\n  [\"1P 3M 7m 9M 13m\", \"\", \"9b13\"],\n  [\"1P 3m 4P 5P\", \"\", \"madd4\"],\n  [\"1P 3m 5P 6m 7M\", \"\", \"mMaj7b6\"],\n  [\"1P 3m 5P 6m 7M 9M\", \"\", \"mMaj9b6\"],\n  [\"1P 3m 5P 7m 11P\", \"\", \"m7add11 m7add4\"],\n  [\"1P 3m 5P 9M\", \"\", \"madd9\"],\n  [\"1P 3m 5d 6M 7M\", \"\", \"o7M7\"],\n  [\"1P 3m 5d 7M\", \"\", \"oM7\"],\n  [\"1P 3m 6m 7M\", \"\", \"mb6M7\"],\n  [\"1P 3m 6m 7m\", \"\", \"m7#5\"],\n  [\"1P 3m 6m 7m 9M\", \"\", \"m9#5\"],\n  [\"1P 3m 5A 7m 9M 11P\", \"\", \"m11A\"],\n  [\"1P 3m 6m 9m\", \"\", \"mb6b9\"],\n  [\"1P 2M 3m 5d 7m\", \"\", \"m9b5\"],\n  [\"1P 4P 5A 7M\", \"\", \"M7#5sus4\"],\n  [\"1P 4P 5A 7M 9M\", \"\", \"M9#5sus4\"],\n  [\"1P 4P 5A 7m\", \"\", \"7#5sus4\"],\n  [\"1P 4P 5P 7M\", \"\", \"M7sus4\"],\n  [\"1P 4P 5P 7M 9M\", \"\", \"M9sus4\"],\n  [\"1P 4P 5P 7m 9M\", \"\", \"9sus4 9sus\"],\n  [\"1P 4P 5P 7m 9M 13M\", \"\", \"13sus4 13sus\"],\n  [\"1P 4P 5P 7m 9m 13m\", \"\", \"7sus4b9b13 7b9b13sus4\"],\n  [\"1P 4P 7m 10m\", \"\", \"4 quartal\"],\n  [\"1P 5P 7m 9m 11P\", \"\", \"11b9\"],\n];\n\nexport default CHORDS;\n", "import { all, ChordType } from \"@tonaljs/chord-type\";\nimport { modes } from \"@tonaljs/pcset\";\nimport { note } from \"@tonaljs/pitch-note\";\n\ninterface FoundChord {\n  readonly weight: number;\n  readonly name: string;\n}\n\nconst namedSet = (notes: string[]) => {\n  const pcToName = notes.reduce<Record<number, string>>((record, n) => {\n    const chroma = note(n).chroma;\n    if (chroma !== undefined) {\n      record[chroma] = record[chroma] || note(n).name;\n    }\n    return record;\n  }, {});\n\n  return (chroma: number) => pcToName[chroma];\n};\n\ntype DetectOptions = {\n  assumePerfectFifth: boolean;\n};\nexport function detect(\n  source: string[],\n  options: Partial<DetectOptions> = {},\n): string[] {\n  const notes = source.map((n) => note(n).pc).filter((x) => x);\n  if (note.length === 0) {\n    return [];\n  }\n\n  const found: FoundChord[] = findMatches(notes, 1, options);\n\n  return found\n    .filter((chord) => chord.weight)\n    .sort((a, b) => b.weight - a.weight)\n    .map((chord) => chord.name);\n}\n\n/* tslint:disable:no-bitwise */\nconst BITMASK = {\n  // 3m 000100000000\n  // 3M 000010000000\n  anyThirds: 384,\n  // 5P 000000010000\n  perfectFifth: 16,\n  // 5d 000000100000\n  // 5A 000000001000\n  nonPerfectFifths: 40,\n  anySeventh: 3,\n};\n\nconst testChromaNumber = (bitmask: number) => (chromaNumber: number) =>\n  Boolean(chromaNumber & bitmask);\nconst hasAnyThird = testChromaNumber(BITMASK.anyThirds);\nconst hasPerfectFifth = testChromaNumber(BITMASK.perfectFifth);\nconst hasAnySeventh = testChromaNumber(BITMASK.anySeventh);\nconst hasNonPerfectFifth = testChromaNumber(BITMASK.nonPerfectFifths);\n\nfunction hasAnyThirdAndPerfectFifthAndAnySeventh(chordType: ChordType) {\n  const chromaNumber = parseInt(chordType.chroma, 2);\n  return (\n    hasAnyThird(chromaNumber) &&\n    hasPerfectFifth(chromaNumber) &&\n    hasAnySeventh(chromaNumber)\n  );\n}\n\nfunction withPerfectFifth(chroma: string): string {\n  const chromaNumber = parseInt(chroma, 2);\n  return hasNonPerfectFifth(chromaNumber)\n    ? chroma\n    : (chromaNumber | 16).toString(2);\n}\n\n/* tslint:enable:no-bitwise */\n\ntype FindMatchesOptions = {\n  assumePerfectFifth: boolean;\n};\nfunction findMatches(\n  notes: string[],\n  weight: number,\n  options: Partial<FindMatchesOptions>,\n): FoundChord[] {\n  const tonic = notes[0];\n  const tonicChroma = note(tonic).chroma;\n  const noteName = namedSet(notes);\n  // we need to test all chromas to get the correct baseNote\n  const allModes = modes(notes, false);\n\n  const found: FoundChord[] = [];\n  allModes.forEach((mode, index) => {\n    const modeWithPerfectFifth =\n      options.assumePerfectFifth && withPerfectFifth(mode);\n    // some chords could have the same chroma but different interval spelling\n    const chordTypes = all().filter((chordType) => {\n      if (\n        options.assumePerfectFifth &&\n        hasAnyThirdAndPerfectFifthAndAnySeventh(chordType)\n      ) {\n        return chordType.chroma === modeWithPerfectFifth;\n      }\n      return chordType.chroma === mode;\n    });\n\n    chordTypes.forEach((chordType) => {\n      const chordName = chordType.aliases[0];\n      const baseNote = noteName(index);\n      const isInversion = index !== tonicChroma;\n      if (isInversion) {\n        found.push({\n          weight: 0.5 * weight,\n          name: `${baseNote}${chordName}/${tonic}`,\n        });\n      } else {\n        found.push({ weight: 1 * weight, name: `${baseNote}${chordName}` });\n      }\n    });\n  });\n\n  return found;\n}\n\n/** @deprecated */\nexport default { detect };\n", "export interface NamedPitch {\n  readonly name: string;\n}\n\n/*** @deprecated use NamedPitch */\nexport interface Named {\n  readonly name: string;\n}\n\nexport interface NotFound extends NamedPitch {\n  readonly empty: true;\n  readonly name: \"\";\n}\n\nexport function isNamedPitch(src: unknown): src is NamedPitch {\n  return src !== null &&\n    typeof src === \"object\" &&\n    \"name\" in src &&\n    typeof src.name === \"string\"\n    ? true\n    : false;\n}\n\ntype Fifths = number;\ntype Octaves = number;\nexport type Direction = 1 | -1;\n\nexport type PitchClassCoordinates = [Fifths];\nexport type NoteCoordinates = [Fifths, Octaves];\nexport type IntervalCoordinates = [Fifths, Octaves, Direction];\nexport type PitchCoordinates =\n  | PitchClassCoordinates\n  | NoteCoordinates\n  | IntervalCoordinates;\n\n/**\n * Pitch properties\n *\n * - {number} step - The step number: 0 = C, 1 = D, ... 6 = B\n * - {number} alt - Number of alterations: -2 = 'bb', -1 = 'b', 0 = '', 1 = '#', ...\n * - {number} [oct] = The octave (undefined when is a coord class)\n * - {number} [dir] = Interval direction (undefined when is not an interval)\n */\nexport interface Pitch {\n  readonly step: number;\n  readonly alt: number;\n  readonly oct?: number; // undefined for pitch classes\n  readonly dir?: Direction; // undefined for notes\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nexport const chroma = ({ step, alt }: Pitch) => (SIZES[step] + alt + 120) % 12;\n\nexport const height = ({ step, alt, oct, dir = 1 }: Pitch) =>\n  dir * (SIZES[step] + alt + 12 * (oct === undefined ? -100 : oct));\n\nexport const midi = (pitch: Pitch) => {\n  const h = height(pitch);\n  return pitch.oct !== undefined && h >= -12 && h <= 115 ? h + 12 : null;\n};\n\nexport function isPitch(pitch: unknown): pitch is Pitch {\n  return pitch !== null &&\n    typeof pitch === \"object\" &&\n    \"step\" in pitch &&\n    typeof pitch.step === \"number\" &&\n    \"alt\" in pitch &&\n    typeof pitch.alt === \"number\"\n    ? true\n    : false;\n}\n\n// The number of fifths of [C, D, E, F, G, A, B]\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n// The number of octaves it span each step\nconst STEPS_TO_OCTS = FIFTHS.map((fifths: number) =>\n  Math.floor((fifths * 7) / 12),\n);\n\n/**\n * Get coordinates from pitch object\n */\nexport function coordinates(pitch: Pitch): PitchCoordinates {\n  const { step, alt, oct, dir = 1 } = pitch;\n  const f = FIFTHS[step] + 7 * alt;\n  if (oct === undefined) {\n    return [dir * f];\n  }\n  const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n}\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\nconst FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n/**\n * Get pitch from coordinate objects\n */\nexport function pitch(coord: PitchCoordinates): Pitch {\n  const [f, o, dir] = coord;\n  const step = FIFTHS_TO_STEPS[unaltered(f)];\n  const alt = Math.floor((f + 1) / 7);\n  if (o === undefined) {\n    return { step, alt, dir };\n  }\n  const oct = o + 4 * alt + STEPS_TO_OCTS[step];\n  return { step, alt, oct, dir };\n}\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f: number): number {\n  const i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n", "import {\n  coordinates,\n  Direction,\n  IntervalCoordinates,\n  isNamedPitch,\n  isPitch,\n  NamedPitch,\n  Pitch,\n  pitch,\n  PitchCoordinates,\n} from \"@tonaljs/pitch\";\n\nconst fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport type IntervalName = string;\nexport type IntervalLiteral = IntervalName | Pitch | NamedPitch;\n\ntype Quality =\n  | \"dddd\"\n  | \"ddd\"\n  | \"dd\"\n  | \"d\"\n  | \"m\"\n  | \"M\"\n  | \"P\"\n  | \"A\"\n  | \"AA\"\n  | \"AAA\"\n  | \"AAAA\";\ntype Type = \"perfectable\" | \"majorable\";\n\nexport interface Interval extends Pitch, NamedPitch {\n  readonly empty: boolean;\n  readonly name: IntervalName;\n  readonly num: number;\n  readonly q: Quality;\n  readonly type: Type;\n  readonly step: number;\n  readonly alt: number;\n  readonly dir: Direction;\n  readonly simple: number;\n  readonly semitones: number;\n  readonly chroma: number;\n  readonly coord: IntervalCoordinates;\n  readonly oct: number;\n}\n\nexport interface NoInterval extends Partial<Interval> {\n  readonly empty: true;\n  readonly name: \"\";\n  readonly acc: \"\";\n}\n\nconst NoInterval: NoInterval = { empty: true, name: \"\", acc: \"\" };\n\n// shorthand tonal notation (with quality after number)\nconst INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\n// standard shorthand notation (with quality before number)\nconst INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nconst REGEX = new RegExp(\n  \"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\",\n);\n\ntype IntervalTokens = [string, string];\n\n/**\n * @private\n */\nexport function tokenizeInterval(str?: IntervalName): IntervalTokens {\n  const m = REGEX.exec(`${str}`);\n  if (m === null) {\n    return [\"\", \"\"];\n  }\n  return m[1] ? [m[1], m[2]] : [m[4], m[3]];\n}\n\nconst cache: { [key in string]: Interval | NoInterval } = {};\n\n/**\n * Get interval properties. It returns an object with:\n *\n * - name: the interval name\n * - num: the interval number\n * - type: 'perfectable' or 'majorable'\n * - q: the interval quality (d, m, M, A)\n * - dir: interval direction (1 ascending, -1 descending)\n * - simple: the simplified number\n * - semitones: the size in semitones\n * - chroma: the interval chroma\n *\n * @param {string} interval - the interval name\n * @return {Object} the interval properties\n *\n * @example\n * import { interval } from '@tonaljs/core'\n * interval('P5').semitones // => 7\n * interval('m3').type // => 'majorable'\n */\nexport function interval(src: IntervalLiteral): Interval | NoInterval {\n  return typeof src === \"string\"\n    ? cache[src] || (cache[src] = parse(src))\n    : isPitch(src)\n      ? interval(pitchName(src))\n      : isNamedPitch(src)\n        ? interval(src.name)\n        : NoInterval;\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nconst TYPES = \"PMMPPMM\";\nfunction parse(str?: string): Interval | NoInterval {\n  const tokens = tokenizeInterval(str);\n  if (tokens[0] === \"\") {\n    return NoInterval;\n  }\n  const num = +tokens[0];\n  const q = tokens[1] as Quality;\n  const step = (Math.abs(num) - 1) % 7;\n  const t = TYPES[step];\n  if (t === \"M\" && q === \"P\") {\n    return NoInterval;\n  }\n  const type = t === \"M\" ? \"majorable\" : \"perfectable\";\n\n  const name = \"\" + num + q;\n  const dir = num < 0 ? -1 : 1;\n  const simple = num === 8 || num === -8 ? num : dir * (step + 1);\n  const alt = qToAlt(type, q);\n  const oct = Math.floor((Math.abs(num) - 1) / 7);\n  const semitones = dir * (SIZES[step] + alt + 12 * oct);\n  const chroma = (((dir * (SIZES[step] + alt)) % 12) + 12) % 12;\n  const coord = coordinates({ step, alt, oct, dir }) as IntervalCoordinates;\n  return {\n    empty: false,\n    name,\n    num,\n    q,\n    step,\n    alt,\n    dir,\n    type,\n    simple,\n    semitones,\n    chroma,\n    coord,\n    oct,\n  };\n}\n\n/**\n * @private\n *\n * forceDescending is used in the case of unison (#243)\n */\nexport function coordToInterval(\n  coord: PitchCoordinates,\n  forceDescending?: boolean,\n): Interval {\n  const [f, o = 0] = coord;\n  const isDescending = f * 7 + o * 12 < 0;\n  const ivl: IntervalCoordinates =\n    forceDescending || isDescending ? [-f, -o, -1] : [f, o, 1];\n  return interval(pitch(ivl)) as Interval;\n}\n\nfunction qToAlt(type: Type, q: string): number {\n  return (q === \"M\" && type === \"majorable\") ||\n    (q === \"P\" && type === \"perfectable\")\n    ? 0\n    : q === \"m\" && type === \"majorable\"\n      ? -1\n      : /^A+$/.test(q)\n        ? q.length\n        : /^d+$/.test(q)\n          ? -1 * (type === \"perfectable\" ? q.length : q.length + 1)\n          : 0;\n}\n\n// return the interval name of a pitch\nfunction pitchName(props: Pitch): string {\n  const { step, alt, oct = 0, dir } = props;\n  if (!dir) {\n    return \"\";\n  }\n  const calcNum = step + 1 + 7 * oct;\n  // this is an edge case: descending pitch class unison (see #243)\n  const num = calcNum === 0 ? step + 1 : calcNum;\n  const d = dir < 0 ? \"-\" : \"\";\n  const type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\n  const name = d + num + altToQ(type, alt);\n  return name;\n}\n\nfunction altToQ(type: Type, alt: number): Quality {\n  if (alt === 0) {\n    return type === \"majorable\" ? \"M\" : \"P\";\n  } else if (alt === -1 && type === \"majorable\") {\n    return \"m\";\n  } else if (alt > 0) {\n    return fillStr(\"A\", alt) as Quality;\n  } else {\n    return fillStr(\"d\", type === \"perfectable\" ? alt : alt + 1) as Quality;\n  }\n}\n", "import {\n  coordinates,\n  isNamedPitch,\n  isPitch,\n  NamedPitch,\n  Pitch,\n  pitch,\n  PitchCoordinates,\n} from \"@tonaljs/pitch\";\n\nconst fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport type NoteWithOctave = string;\nexport type PcName = string;\nexport type NoteName = NoteWithOctave | PcName;\nexport type NoteLiteral = NoteName | Pitch | NamedPitch;\n\nexport interface Note extends Pitch, NamedPitch {\n  readonly empty: boolean;\n  readonly name: NoteName;\n  readonly letter: string;\n  readonly acc: string;\n  readonly pc: PcName;\n  readonly chroma: number;\n  readonly height: number;\n  readonly coord: PitchCoordinates;\n  readonly midi: number | null;\n  readonly freq: number | null;\n}\n\nexport interface NoNote extends Partial<Note> {\n  empty: true;\n  name: \"\";\n  pc: \"\";\n  acc: \"\";\n}\nconst NoNote: NoNote = { empty: true, name: \"\", pc: \"\", acc: \"\" };\n\nconst cache: Map<NoteLiteral | undefined, Note | NoNote> = new Map();\n\nexport const stepToLetter = (step: number) => \"CDEFGAB\".charAt(step);\nexport const altToAcc = (alt: number): string =>\n  alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt);\nexport const accToAlt = (acc: string): number =>\n  acc[0] === \"b\" ? -acc.length : acc.length;\n\n/**\n * Given a note literal (a note name or a note object), returns the Note object\n * @example\n * note('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\n */\nexport function note(src: NoteLiteral): Note | NoNote {\n  const stringSrc = JSON.stringify(src);\n\n  const cached = cache.get(stringSrc);\n  if (cached) {\n    return cached;\n  }\n\n  const value =\n    typeof src === \"string\"\n      ? parse(src)\n      : isPitch(src)\n        ? note(pitchName(src))\n        : isNamedPitch(src)\n          ? note(src.name)\n          : NoNote;\n  cache.set(stringSrc, value);\n  return value;\n}\n\ntype NoteTokens = [string, string, string, string];\n\nconst REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\n\n/**\n * @private\n */\nexport function tokenizeNote(str: string): NoteTokens {\n  const m = REGEX.exec(str) as string[];\n  return m\n    ? [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]]\n    : [\"\", \"\", \"\", \"\"];\n}\n\n/**\n * @private\n */\nexport function coordToNote(noteCoord: PitchCoordinates): Note {\n  return note(pitch(noteCoord)) as Note;\n}\n\nconst mod = (n: number, m: number) => ((n % m) + m) % m;\n\nconst SEMI = [0, 2, 4, 5, 7, 9, 11];\nfunction parse(noteName: NoteName): Note | NoNote {\n  const tokens = tokenizeNote(noteName);\n  if (tokens[0] === \"\" || tokens[3] !== \"\") {\n    return NoNote;\n  }\n\n  const letter = tokens[0];\n  const acc = tokens[1];\n  const octStr = tokens[2];\n\n  const step = (letter.charCodeAt(0) + 3) % 7;\n  const alt = accToAlt(acc);\n  const oct = octStr.length ? +octStr : undefined;\n  const coord = coordinates({ step, alt, oct });\n\n  const name = letter + acc + octStr;\n  const pc = letter + acc;\n  const chroma = (SEMI[step] + alt + 120) % 12;\n  const height =\n    oct === undefined\n      ? mod(SEMI[step] + alt, 12) - 12 * 99\n      : SEMI[step] + alt + 12 * (oct + 1);\n  const midi = height >= 0 && height <= 127 ? height : null;\n  const freq = oct === undefined ? null : Math.pow(2, (height - 69) / 12) * 440;\n\n  return {\n    empty: false,\n    acc,\n    alt,\n    chroma,\n    coord,\n    freq,\n    height,\n    letter,\n    midi,\n    name,\n    oct,\n    pc,\n    step,\n  };\n}\n\nfunction pitchName(props: Pitch): NoteName {\n  const { step, alt, oct } = props;\n  const letter = stepToLetter(step);\n  if (!letter) {\n    return \"\";\n  }\n\n  const pc = letter + altToAcc(alt);\n  return oct || oct === 0 ? pc + oct : pc;\n}\n", "import { PitchCoordinates } from \"@tonaljs/pitch\";\nimport {\n  IntervalLiteral,\n  IntervalName,\n  interval as asInterval,\n  coordToInterval,\n} from \"@tonaljs/pitch-interval\";\nimport {\n  NoteLiteral,\n  NoteName,\n  note as asNote,\n  coordToNote,\n} from \"@tonaljs/pitch-note\";\n\n/**\n * Transpose a note by an interval.\n *\n * @param {string} note - the note or note name\n * @param {string} interval - the interval or interval name\n * @return {string} the transposed note name or empty string if not valid notes\n * @example\n * import { transpose } from \"@tonaljs/core\"\n * transpose(\"d3\", \"3M\") // => \"F#3\"\n * transpose(\"D\", \"3M\") // => \"F#\"\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(pc => transpose(pc, \"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\n */\nexport function transpose(\n  noteName: NoteLiteral,\n  intervalName: IntervalLiteral | [number, number],\n): NoteName {\n  const note = asNote(noteName);\n  const intervalCoord = Array.isArray(intervalName)\n    ? intervalName\n    : asInterval(intervalName).coord;\n  if (note.empty || !intervalCoord || intervalCoord.length < 2) {\n    return \"\";\n  }\n  const noteCoord = note.coord;\n  const tr: PitchCoordinates =\n    noteCoord.length === 1\n      ? [noteCoord[0] + intervalCoord[0]]\n      : [noteCoord[0] + intervalCoord[0], noteCoord[1] + intervalCoord[1]];\n  return coordToNote(tr).name;\n}\n\n// Private\nexport function tonicIntervalsTransposer(\n  intervals: string[],\n  tonic: string | undefined | null,\n) {\n  const len = intervals.length;\n  return (normalized: number) => {\n    if (!tonic) return \"\";\n    const index =\n      normalized < 0 ? (len - (-normalized % len)) % len : normalized % len;\n    const octaves = Math.floor(normalized / len);\n    const root = transpose(tonic, [0, octaves]);\n    return transpose(root, intervals[index]);\n  };\n}\n\n/**\n * Find the interval distance between two notes or coord classes.\n *\n * To find distance between coord classes, both notes must be coord classes and\n * the interval is always ascending\n *\n * @param {Note|string} from - the note or note name to calculate distance from\n * @param {Note|string} to - the note or note name to calculate distance to\n * @return {string} the interval name or empty string if not valid notes\n *\n */\nexport function distance(\n  fromNote: NoteLiteral,\n  toNote: NoteLiteral,\n): IntervalName {\n  const from = asNote(fromNote);\n  const to = asNote(toNote);\n  if (from.empty || to.empty) {\n    return \"\";\n  }\n\n  const fcoord = from.coord;\n  const tcoord = to.coord;\n  const fifths = tcoord[0] - fcoord[0];\n  const octs =\n    fcoord.length === 2 && tcoord.length === 2\n      ? tcoord[1] - fcoord[1]\n      : -Math.floor((fifths * 7) / 12);\n\n  // If it's unison and not pitch class, it can be descending interval (#243)\n  const forceDescending =\n    to.height === from.height &&\n    to.midi !== null &&\n    from.midi !== null &&\n    from.step > to.step;\n  return coordToInterval([fifths, octs], forceDescending).name;\n}\n", "import { isNamedPitch } from \"@tonaljs/pitch\";\n\nexport * from \"@tonaljs/pitch\";\nexport * from \"@tonaljs/pitch-distance\";\nexport * from \"@tonaljs/pitch-interval\";\nexport * from \"@tonaljs/pitch-note\";\n\nexport const fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport function deprecate<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ResultFn extends (this: any, ...newArgs: any[]) => ReturnType<ResultFn>,\n>(original: string, alternative: string, fn: ResultFn) {\n  return function (this: unknown, ...args: unknown[]): ReturnType<ResultFn> {\n    // tslint:disable-next-line\n    console.warn(`${original} is deprecated. Use ${alternative}.`);\n    return fn.apply(this, args);\n  };\n}\n\nexport const isNamed = deprecate(\"isNamed\", \"isNamedPitch\", isNamedPitch);\n", "import { deprecate } from \"@tonaljs/core\";\nimport {\n  EmptyPcset,\n  get as pcset,\n  Pcset,\n  PcsetChroma,\n  PcsetNum,\n} from \"@tonaljs/pcset\";\nimport data from \"./data\";\n\nexport type ChordQuality =\n  | \"Major\"\n  | \"Minor\"\n  | \"Augmented\"\n  | \"Diminished\"\n  | \"Unknown\";\n\nexport interface ChordType extends Pcset {\n  name: string;\n  quality: ChordQuality;\n  aliases: string[];\n}\nconst NoChordType: ChordType = {\n  ...EmptyPcset,\n  name: \"\",\n  quality: \"Unknown\",\n  intervals: [],\n  aliases: [],\n};\n\ntype ChordTypeName = string | PcsetChroma | PcsetNum;\n\nlet dictionary: ChordType[] = [];\nlet index: Record<ChordTypeName, ChordType> = {};\n\n/**\n * Given a chord name or chroma, return the chord properties\n * @param {string} source - chord name or pitch class set chroma\n * @example\n * import { get } from 'tonaljs/chord-type'\n * get('major') // => { name: 'major', ... }\n */\nexport function get(type: ChordTypeName): ChordType {\n  return index[type] || NoChordType;\n}\n\nexport const chordType = deprecate(\"ChordType.chordType\", \"ChordType.get\", get);\n\n/**\n * Get all chord (long) names\n */\nexport function names() {\n  return dictionary.map((chord) => chord.name).filter((x) => x);\n}\n\n/**\n * Get all chord symbols\n */\nexport function symbols() {\n  return dictionary.map((chord) => chord.aliases[0]).filter((x) => x);\n}\n\n/**\n * Keys used to reference chord types\n */\nexport function keys() {\n  return Object.keys(index);\n}\n\n/**\n * Return a list of all chord types\n */\nexport function all(): ChordType[] {\n  return dictionary.slice();\n}\n\nexport const entries = deprecate(\"ChordType.entries\", \"ChordType.all\", all);\n\n/**\n * Clear the dictionary\n */\nexport function removeAll() {\n  dictionary = [];\n  index = {};\n}\n\n/**\n * Add a chord to the dictionary.\n * @param intervals\n * @param aliases\n * @param [fullName]\n */\nexport function add(intervals: string[], aliases: string[], fullName?: string) {\n  const quality = getQuality(intervals);\n  const chord = {\n    ...pcset(intervals),\n    name: fullName || \"\",\n    quality,\n    intervals,\n    aliases,\n  };\n  dictionary.push(chord);\n  if (chord.name) {\n    index[chord.name] = chord;\n  }\n  index[chord.setNum] = chord;\n  index[chord.chroma] = chord;\n  chord.aliases.forEach((alias) => addAlias(chord, alias));\n}\n\nexport function addAlias(chord: ChordType, alias: string) {\n  index[alias] = chord;\n}\n\nfunction getQuality(intervals: string[]): ChordQuality {\n  const has = (interval: string) => intervals.indexOf(interval) !== -1;\n  return has(\"5A\")\n    ? \"Augmented\"\n    : has(\"3M\")\n    ? \"Major\"\n    : has(\"5d\")\n    ? \"Diminished\"\n    : has(\"3m\")\n    ? \"Minor\"\n    : \"Unknown\";\n}\n\ndata.forEach(([ivls, fullName, names]: string[]) =>\n  add(ivls.split(\" \"), names.split(\" \"), fullName)\n);\ndictionary.sort((a, b) => a.setNum - b.setNum);\n\nexport default {\n  names,\n  symbols,\n  get,\n  all,\n  add,\n  removeAll,\n  keys,\n  // deprecated\n  entries,\n  chordType,\n};\n", "/**\n * @private\n * Chord List\n * Source: https://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns\n * Format: [\"intervals\", \"full name\", \"abrv1 abrv2\"]\n */\nconst CHORDS: string[][] = [\n  // ==Major==\n  [\"1P 3M 5P\", \"major\", \"M ^  maj\"],\n  [\"1P 3M 5P 7M\", \"major seventh\", \"maj7 Î” ma7 M7 Maj7 ^7\"],\n  [\"1P 3M 5P 7M 9M\", \"major ninth\", \"maj9 Î”9 ^9\"],\n  [\"1P 3M 5P 7M 9M 13M\", \"major thirteenth\", \"maj13 Maj13 ^13\"],\n  [\"1P 3M 5P 6M\", \"sixth\", \"6 add6 add13 M6\"],\n  [\"1P 3M 5P 6M 9M\", \"sixth added ninth\", \"6add9 6/9 69 M69\"],\n  [\"1P 3M 6m 7M\", \"major seventh flat sixth\", \"M7b6 ^7b6\"],\n  [\n    \"1P 3M 5P 7M 11A\",\n    \"major seventh sharp eleventh\",\n    \"maj#4 Î”#4 Î”#11 M7#11 ^7#11 maj7#11\",\n  ],\n  // ==Minor==\n  // '''Normal'''\n  [\"1P 3m 5P\", \"minor\", \"m min -\"],\n  [\"1P 3m 5P 7m\", \"minor seventh\", \"m7 min7 mi7 -7\"],\n  [\n    \"1P 3m 5P 7M\",\n    \"minor/major seventh\",\n    \"m/ma7 m/maj7 mM7 mMaj7 m/M7 -Î”7 mÎ” -^7\",\n  ],\n  [\"1P 3m 5P 6M\", \"minor sixth\", \"m6 -6\"],\n  [\"1P 3m 5P 7m 9M\", \"minor ninth\", \"m9 -9\"],\n  [\"1P 3m 5P 7M 9M\", \"minor/major ninth\", \"mM9 mMaj9 -^9\"],\n  [\"1P 3m 5P 7m 9M 11P\", \"minor eleventh\", \"m11 -11\"],\n  [\"1P 3m 5P 7m 9M 13M\", \"minor thirteenth\", \"m13 -13\"],\n  // '''Diminished'''\n  [\"1P 3m 5d\", \"diminished\", \"dim Â° o\"],\n  [\"1P 3m 5d 7d\", \"diminished seventh\", \"dim7 Â°7 o7\"],\n  [\"1P 3m 5d 7m\", \"half-diminished\", \"m7b5 Ã¸ -7b5 h7 h\"],\n  // ==Dominant/Seventh==\n  // '''Normal'''\n  [\"1P 3M 5P 7m\", \"dominant seventh\", \"7 dom\"],\n  [\"1P 3M 5P 7m 9M\", \"dominant ninth\", \"9\"],\n  [\"1P 3M 5P 7m 9M 13M\", \"dominant thirteenth\", \"13\"],\n  [\"1P 3M 5P 7m 11A\", \"lydian dominant seventh\", \"7#11 7#4\"],\n  // '''Altered'''\n  [\"1P 3M 5P 7m 9m\", \"dominant flat ninth\", \"7b9\"],\n  [\"1P 3M 5P 7m 9A\", \"dominant sharp ninth\", \"7#9\"],\n  [\"1P 3M 7m 9m\", \"altered\", \"alt7\"],\n  // '''Suspended'''\n  [\"1P 4P 5P\", \"suspended fourth\", \"sus4 sus\"],\n  [\"1P 2M 5P\", \"suspended second\", \"sus2\"],\n  [\"1P 4P 5P 7m\", \"suspended fourth seventh\", \"7sus4 7sus\"],\n  [\"1P 5P 7m 9M 11P\", \"eleventh\", \"11\"],\n  [\n    \"1P 4P 5P 7m 9m\",\n    \"suspended fourth flat ninth\",\n    \"b9sus phryg 7b9sus 7b9sus4\",\n  ],\n  // ==Other==\n  [\"1P 5P\", \"fifth\", \"5\"],\n  [\"1P 3M 5A\", \"augmented\", \"aug + +5 ^#5\"],\n  [\"1P 3m 5A\", \"minor augmented\", \"m#5 -#5 m+\"],\n  [\"1P 3M 5A 7M\", \"augmented seventh\", \"maj7#5 maj7+5 +maj7 ^7#5\"],\n  [\n    \"1P 3M 5P 7M 9M 11A\",\n    \"major sharp eleventh (lydian)\",\n    \"maj9#11 Î”9#11 ^9#11\",\n  ],\n  // ==Legacy==\n  [\"1P 2M 4P 5P\", \"\", \"sus24 sus4add9\"],\n  [\"1P 3M 5A 7M 9M\", \"\", \"maj9#5 Maj9#5\"],\n  [\"1P 3M 5A 7m\", \"\", \"7#5 +7 7+ 7aug aug7\"],\n  [\"1P 3M 5A 7m 9A\", \"\", \"7#5#9 7#9#5 7alt\"],\n  [\"1P 3M 5A 7m 9M\", \"\", \"9#5 9+\"],\n  [\"1P 3M 5A 7m 9M 11A\", \"\", \"9#5#11\"],\n  [\"1P 3M 5A 7m 9m\", \"\", \"7#5b9 7b9#5\"],\n  [\"1P 3M 5A 7m 9m 11A\", \"\", \"7#5b9#11\"],\n  [\"1P 3M 5A 9A\", \"\", \"+add#9\"],\n  [\"1P 3M 5A 9M\", \"\", \"M#5add9 +add9\"],\n  [\"1P 3M 5P 6M 11A\", \"\", \"M6#11 M6b5 6#11 6b5\"],\n  [\"1P 3M 5P 6M 7M 9M\", \"\", \"M7add13\"],\n  [\"1P 3M 5P 6M 9M 11A\", \"\", \"69#11\"],\n  [\"1P 3m 5P 6M 9M\", \"\", \"m69 -69\"],\n  [\"1P 3M 5P 6m 7m\", \"\", \"7b6\"],\n  [\"1P 3M 5P 7M 9A 11A\", \"\", \"maj7#9#11\"],\n  [\"1P 3M 5P 7M 9M 11A 13M\", \"\", \"M13#11 maj13#11 M13+4 M13#4\"],\n  [\"1P 3M 5P 7M 9m\", \"\", \"M7b9\"],\n  [\"1P 3M 5P 7m 11A 13m\", \"\", \"7#11b13 7b5b13\"],\n  [\"1P 3M 5P 7m 13M\", \"\", \"7add6 67 7add13\"],\n  [\"1P 3M 5P 7m 9A 11A\", \"\", \"7#9#11 7b5#9 7#9b5\"],\n  [\"1P 3M 5P 7m 9A 11A 13M\", \"\", \"13#9#11\"],\n  [\"1P 3M 5P 7m 9A 11A 13m\", \"\", \"7#9#11b13\"],\n  [\"1P 3M 5P 7m 9A 13M\", \"\", \"13#9\"],\n  [\"1P 3M 5P 7m 9A 13m\", \"\", \"7#9b13\"],\n  [\"1P 3M 5P 7m 9M 11A\", \"\", \"9#11 9+4 9#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13M\", \"\", \"13#11 13+4 13#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13m\", \"\", \"9#11b13 9b5b13\"],\n  [\"1P 3M 5P 7m 9m 11A\", \"\", \"7b9#11 7b5b9 7b9b5\"],\n  [\"1P 3M 5P 7m 9m 11A 13M\", \"\", \"13b9#11\"],\n  [\"1P 3M 5P 7m 9m 11A 13m\", \"\", \"7b9b13#11 7b9#11b13 7b5b9b13\"],\n  [\"1P 3M 5P 7m 9m 13M\", \"\", \"13b9\"],\n  [\"1P 3M 5P 7m 9m 13m\", \"\", \"7b9b13\"],\n  [\"1P 3M 5P 7m 9m 9A\", \"\", \"7b9#9\"],\n  [\"1P 3M 5P 9M\", \"\", \"Madd9 2 add9 add2\"],\n  [\"1P 3M 5P 9m\", \"\", \"Maddb9\"],\n  [\"1P 3M 5d\", \"\", \"Mb5\"],\n  [\"1P 3M 5d 6M 7m 9M\", \"\", \"13b5\"],\n  [\"1P 3M 5d 7M\", \"\", \"M7b5\"],\n  [\"1P 3M 5d 7M 9M\", \"\", \"M9b5\"],\n  [\"1P 3M 5d 7m\", \"\", \"7b5\"],\n  [\"1P 3M 5d 7m 9M\", \"\", \"9b5\"],\n  [\"1P 3M 7m\", \"\", \"7no5\"],\n  [\"1P 3M 7m 13m\", \"\", \"7b13\"],\n  [\"1P 3M 7m 9M\", \"\", \"9no5\"],\n  [\"1P 3M 7m 9M 13M\", \"\", \"13no5\"],\n  [\"1P 3M 7m 9M 13m\", \"\", \"9b13\"],\n  [\"1P 3m 4P 5P\", \"\", \"madd4\"],\n  [\"1P 3m 5P 6m 7M\", \"\", \"mMaj7b6\"],\n  [\"1P 3m 5P 6m 7M 9M\", \"\", \"mMaj9b6\"],\n  [\"1P 3m 5P 7m 11P\", \"\", \"m7add11 m7add4\"],\n  [\"1P 3m 5P 9M\", \"\", \"madd9\"],\n  [\"1P 3m 5d 6M 7M\", \"\", \"o7M7\"],\n  [\"1P 3m 5d 7M\", \"\", \"oM7\"],\n  [\"1P 3m 6m 7M\", \"\", \"mb6M7\"],\n  [\"1P 3m 6m 7m\", \"\", \"m7#5\"],\n  [\"1P 3m 6m 7m 9M\", \"\", \"m9#5\"],\n  [\"1P 3m 5A 7m 9M 11P\", \"\", \"m11A\"],\n  [\"1P 3m 6m 9m\", \"\", \"mb6b9\"],\n  [\"1P 2M 3m 5d 7m\", \"\", \"m9b5\"],\n  [\"1P 4P 5A 7M\", \"\", \"M7#5sus4\"],\n  [\"1P 4P 5A 7M 9M\", \"\", \"M9#5sus4\"],\n  [\"1P 4P 5A 7m\", \"\", \"7#5sus4\"],\n  [\"1P 4P 5P 7M\", \"\", \"M7sus4\"],\n  [\"1P 4P 5P 7M 9M\", \"\", \"M9sus4\"],\n  [\"1P 4P 5P 7m 9M\", \"\", \"9sus4 9sus\"],\n  [\"1P 4P 5P 7m 9M 13M\", \"\", \"13sus4 13sus\"],\n  [\"1P 4P 5P 7m 9m 13m\", \"\", \"7sus4b9b13 7b9b13sus4\"],\n  [\"1P 4P 7m 10m\", \"\", \"4 quartal\"],\n  [\"1P 5P 7m 9m 11P\", \"\", \"11b9\"],\n];\n\nexport default CHORDS;\n", "import { detect } from \"@tonaljs/chord-detect\";\nimport {\n  ChordType,\n  all as chordTypes,\n  get as getChordType,\n} from \"@tonaljs/chord-type\";\nimport { tonicIntervalsTransposer } from \"@tonaljs/core\";\n\nimport {\n  deprecate,\n  distance,\n  note,\n  NoteName,\n  tokenizeNote,\n  transpose as transposeNote,\n} from \"@tonaljs/core\";\n\nimport { isSubsetOf, isSupersetOf } from \"@tonaljs/pcset\";\n\nimport { all as scaleTypes } from \"@tonaljs/scale-type\";\nexport { detect } from \"@tonaljs/chord-detect\";\n\ntype ChordName = string;\ntype ChordNameTokens = [string, string]; // [TONIC, SCALE TYPE]\n\nexport interface Chord extends ChordType {\n  tonic: string | null;\n  type: string;\n  root: string;\n  rootDegree: number;\n  symbol: string;\n  notes: NoteName[];\n}\n\nconst NoChord: Chord = {\n  empty: true,\n  name: \"\",\n  symbol: \"\",\n  root: \"\",\n  rootDegree: 0,\n  type: \"\",\n  tonic: null,\n  setNum: NaN,\n  quality: \"Unknown\",\n  chroma: \"\",\n  normalized: \"\",\n  aliases: [],\n  notes: [],\n  intervals: [],\n};\n\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\n// (see https://github.com/danigb/tonal/issues/55)\nconst NUM_TYPES = /^(6|64|7|9|11|13)$/;\n/**\n * Tokenize a chord name. It returns an array with the tonic and chord type\n * If not tonic is found, all the name is considered the chord name.\n *\n * This function does NOT check if the chord type exists or not. It only tries\n * to split the tonic and chord type.\n *\n * @function\n * @param {string} name - the chord name\n * @return {Array} an array with [tonic, type]\n * @example\n * tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\n * tokenize(\"C7\") // => [ \"C\", \"7\" ]\n * tokenize(\"mMaj7\") // => [ null, \"mMaj7\" ]\n * tokenize(\"Cnonsense\") // => [ null, \"nonsense\" ]\n */\nexport function tokenize(name: string): ChordNameTokens {\n  const [letter, acc, oct, type] = tokenizeNote(name);\n  if (letter === \"\") {\n    return [\"\", name];\n  }\n  // aug is augmented (see https://github.com/danigb/tonal/issues/55)\n  if (letter === \"A\" && type === \"ug\") {\n    return [\"\", \"aug\"];\n  }\n  return [letter + acc, oct + type];\n}\n\n/**\n * Get a Chord from a chord name.\n */\nexport function get(src: ChordName | ChordNameTokens): Chord {\n  if (src === \"\") {\n    return NoChord;\n  }\n  if (Array.isArray(src) && src.length === 2) {\n    return getChord(src[1], src[0]);\n  } else {\n    const [tonic, type] = tokenize(src);\n    const chord = getChord(type, tonic);\n    return chord.empty ? getChord(src) : chord;\n  }\n}\n\n/**\n * Get chord properties\n *\n * @param typeName - the chord type name\n * @param [tonic] - Optional tonic\n * @param [root]  - Optional root (requires a tonic)\n */\nexport function getChord(\n  typeName: string,\n  optionalTonic?: string,\n  optionalRoot?: string\n): Chord {\n  const type = getChordType(typeName);\n  const tonic = note(optionalTonic || \"\");\n  const root = note(optionalRoot || \"\");\n\n  if (\n    type.empty ||\n    (optionalTonic && tonic.empty) ||\n    (optionalRoot && root.empty)\n  ) {\n    return NoChord;\n  }\n\n  const rootInterval = distance(tonic.pc, root.pc);\n  const rootDegree = type.intervals.indexOf(rootInterval) + 1;\n  if (!root.empty && !rootDegree) {\n    return NoChord;\n  }\n\n  const intervals = Array.from(type.intervals);\n\n  for (let i = 1; i < rootDegree; i++) {\n    const num = intervals[0][0];\n    const quality = intervals[0][1];\n    const newNum = parseInt(num, 10) + 7;\n    intervals.push(`${newNum}${quality}`);\n    intervals.shift();\n  }\n\n  const notes = tonic.empty\n    ? []\n    : intervals.map((i) => transposeNote(tonic, i));\n\n  typeName = type.aliases.indexOf(typeName) !== -1 ? typeName : type.aliases[0];\n  const symbol = `${tonic.empty ? \"\" : tonic.pc}${typeName}${\n    root.empty || rootDegree <= 1 ? \"\" : \"/\" + root.pc\n  }`;\n  const name = `${optionalTonic ? tonic.pc + \" \" : \"\"}${type.name}${\n    rootDegree > 1 && optionalRoot ? \" over \" + root.pc : \"\"\n  }`;\n  return {\n    ...type,\n    name,\n    symbol,\n    type: type.name,\n    root: root.name,\n    intervals,\n    rootDegree,\n    tonic: tonic.name,\n    notes,\n  };\n}\n\nexport const chord = deprecate(\"Chord.chord\", \"Chord.get\", get);\n\n/**\n * Transpose a chord name\n *\n * @param {string} chordName - the chord name\n * @return {string} the transposed chord\n *\n * @example\n * transpose('Dm7', 'P4') // => 'Gm7\n */\nexport function transpose(chordName: string, interval: string): string {\n  const [tonic, type] = tokenize(chordName);\n  if (!tonic) {\n    return chordName;\n  }\n  return transposeNote(tonic, interval) + type;\n}\n\n/**\n * Get all scales where the given chord fits\n *\n * @example\n * chordScales('C7b9')\n * // => [\"phrygian dominant\", \"flamenco\", \"spanish heptatonic\", \"half-whole diminished\", \"chromatic\"]\n */\nexport function chordScales(name: string): string[] {\n  const s = get(name);\n  const isChordIncluded = isSupersetOf(s.chroma);\n  return scaleTypes()\n    .filter((scale) => isChordIncluded(scale.chroma))\n    .map((scale) => scale.name);\n}\n/**\n * Get all chords names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @example\n * extended(\"CMaj7\")\n * // => [ 'Cmaj#4', 'Cmaj7#9#11', 'Cmaj9', 'CM7add13', 'Cmaj13', 'Cmaj9#11', 'CM13#11', 'CM7b9' ]\n */\nexport function extended(chordName: string): string[] {\n  const s = get(chordName);\n  const isSuperset = isSupersetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => isSuperset(chord.chroma))\n    .map((chord) => s.tonic + chord.aliases[0]);\n}\n\n/**\n * Find all chords names that are a subset of the given one\n * (has less notes but all from the given chord)\n *\n * @example\n */\nexport function reduced(chordName: string): string[] {\n  const s = get(chordName);\n  const isSubset = isSubsetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => isSubset(chord.chroma))\n    .map((chord) => s.tonic + chord.aliases[0]);\n}\n\n/**\n * Returns a function to get a note name from the scale degree.\n *\n * @example\n * [1, 2, 3, 4].map(Chord.degrees(\"C\")) => [\"C\", \"E\", \"G\", \"C\"]\n * [1, 2, 3, 4].map(Chord.degrees(\"C4\")) => [\"C4\", \"E4\", \"G4\", \"C5\"]\n */\nexport function degrees(chordName: string | ChordNameTokens) {\n  const { intervals, tonic } = get(chordName);\n  const transpose = tonicIntervalsTransposer(intervals, tonic);\n  return (degree: number) =>\n    degree ? transpose(degree > 0 ? degree - 1 : degree) : \"\";\n}\n\n/**\n * Sames as `degree` but with 0-based index\n */\nexport function steps(chordName: string | ChordNameTokens) {\n  const { intervals, tonic } = get(chordName);\n  return tonicIntervalsTransposer(intervals, tonic);\n}\n\nexport default {\n  getChord,\n  get,\n  detect,\n  chordScales,\n  extended,\n  reduced,\n  tokenize,\n  transpose,\n  degrees,\n  steps,\n\n  // deprecate\n  chord,\n};\n", "// source: https://en.wikipedia.org/wiki/Note_value\nconst DATA: [number, string, string[]][] = [\n  [\n    0.125,\n    \"dl\",\n    [\"large\", \"duplex longa\", \"maxima\", \"octuple\", \"octuple whole\"],\n  ],\n  [0.25, \"l\", [\"long\", \"longa\"]],\n  [0.5, \"d\", [\"double whole\", \"double\", \"breve\"]],\n  [1, \"w\", [\"whole\", \"semibreve\"]],\n  [2, \"h\", [\"half\", \"minim\"]],\n  [4, \"q\", [\"quarter\", \"crotchet\"]],\n  [8, \"e\", [\"eighth\", \"quaver\"]],\n  [16, \"s\", [\"sixteenth\", \"semiquaver\"]],\n  [32, \"t\", [\"thirty-second\", \"demisemiquaver\"]],\n  [64, \"sf\", [\"sixty-fourth\", \"hemidemisemiquaver\"]],\n  [128, \"h\", [\"hundred twenty-eighth\"]],\n  [256, \"th\", [\"two hundred fifty-sixth\"]],\n];\n\nexport default DATA;\n", "import DATA from \"./data\";\n\ntype Fraction = [number, number];\n\nconst VALUES: DurationValue[] = [];\n\nDATA.forEach(([denominator, shorthand, names]) =>\n  add(denominator, shorthand, names),\n);\n\nexport interface DurationValue {\n  empty: boolean;\n  value: number;\n  name: string;\n  fraction: Fraction;\n  shorthand: string;\n  dots: string;\n  names: string[];\n}\n\nconst NoDuration: DurationValue = {\n  empty: true,\n  name: \"\",\n  value: 0,\n  fraction: [0, 0],\n  shorthand: \"\",\n  dots: \"\",\n  names: [],\n};\n\nexport function names(): string[] {\n  return VALUES.reduce((names, duration) => {\n    duration.names.forEach((name) => names.push(name));\n    return names;\n  }, [] as string[]);\n}\n\nexport function shorthands(): string[] {\n  return VALUES.map((dur) => dur.shorthand);\n}\n\nconst REGEX = /^([^.]+)(\\.*)$/;\n\nexport function get(name: string): DurationValue {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [_, simple, dots] = REGEX.exec(name) || [];\n  const base = VALUES.find(\n    (dur) => dur.shorthand === simple || dur.names.includes(simple),\n  );\n  if (!base) {\n    return NoDuration;\n  }\n\n  const fraction = calcDots(base.fraction, dots.length);\n  const value = fraction[0] / fraction[1];\n\n  return { ...base, name, dots, value, fraction };\n}\n\nexport const value = (name: string) => get(name).value;\nexport const fraction = (name: string) => get(name).fraction;\n\n/** @deprecated */\nexport default { names, shorthands, get, value, fraction };\n\n//// PRIVATE ////\n\nfunction add(denominator: number, shorthand: string, names: string[]) {\n  VALUES.push({\n    empty: false,\n    dots: \"\",\n    name: \"\",\n    value: 1 / denominator,\n    fraction: denominator < 1 ? [1 / denominator, 1] : [1, denominator],\n    shorthand,\n    names,\n  });\n}\n\nfunction calcDots(fraction: Fraction, dots: number): Fraction {\n  const pow = Math.pow(2, dots);\n\n  let numerator = fraction[0] * pow;\n  let denominator = fraction[1] * pow;\n  const base = numerator;\n\n  // add fractions\n  for (let i = 0; i < dots; i++) {\n    numerator += base / Math.pow(2, i + 1);\n  }\n\n  // simplify\n  while (numerator % 2 === 0 && denominator % 2 === 0) {\n    numerator /= 2;\n    denominator /= 2;\n  }\n  return [numerator, denominator];\n}\n", "import { IntervalCoordinates, NoteCoordinates } from \"@tonaljs/pitch\";\nimport { distance as dist } from \"@tonaljs/pitch-distance\";\nimport {\n  IntervalName,\n  coordToInterval,\n  interval as props,\n} from \"@tonaljs/pitch-interval\";\n\n/**\n * Get the natural list of names\n */\nexport function names(): IntervalName[] {\n  return \"1P 2M 3M 4P 5P 6m 7m\".split(\" \");\n}\n\n/**\n * Get properties of an interval\n *\n * @function\n * @example\n * Interval.get('P4') // => {\"alt\": 0,  \"dir\": 1,  \"name\": \"4P\", \"num\": 4, \"oct\": 0, \"q\": \"P\", \"semitones\": 5, \"simple\": 4, \"step\": 3, \"type\": \"perfectable\"}\n */\nexport const get = props;\n\n/**\n * Get name of an interval\n *\n * @function\n * @example\n * Interval.name('4P') // => \"4P\"\n * Interval.name('P4') // => \"4P\"\n * Interval.name('C4') // => \"\"\n */\nexport const name = (name: string) => props(name).name;\n\n/**\n * Get semitones of an interval\n * @function\n * @example\n * Interval.semitones('P4') // => 5\n */\nexport const semitones = (name: string) => props(name).semitones;\n\n/**\n * Get quality of an interval\n * @function\n * @example\n * Interval.quality('P4') // => \"P\"\n */\nexport const quality = (name: string) => props(name).q;\n\n/**\n * Get number of an interval\n * @function\n * @example\n * Interval.num('P4') // => 4\n */\nexport const num = (name: string) => props(name).num;\n\n/**\n * Get the simplified version of an interval.\n *\n * @function\n * @param {string} interval - the interval to simplify\n * @return {string} the simplified interval\n *\n * @example\n * Interval.simplify(\"9M\") // => \"2M\"\n * Interval.simplify(\"2M\") // => \"2M\"\n * Interval.simplify(\"-2M\") // => \"7m\"\n * [\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify)\n * // => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\n */\nexport function simplify(name: IntervalName): IntervalName {\n  const i = props(name);\n  return i.empty ? \"\" : i.simple + i.q;\n}\n\n/**\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\n * of an interval.\n *\n * @function\n * @param {string} interval - the interval to invert in interval shorthand\n * notation or interval array notation\n * @return {string} the inverted interval\n *\n * @example\n * Interval.invert(\"3m\") // => \"6M\"\n * Interval.invert(\"2M\") // => \"7m\"\n */\nexport function invert(name: IntervalName): IntervalName {\n  const i = props(name);\n  if (i.empty) {\n    return \"\";\n  }\n  const step = (7 - i.step) % 7;\n  const alt = i.type === \"perfectable\" ? -i.alt : -(i.alt + 1);\n  return props({ step, alt, oct: i.oct, dir: i.dir }).name;\n}\n\n// interval numbers\nconst IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\n// interval qualities\nconst IQ = \"P m M m M P d P m M m M\".split(\" \");\n\n/**\n * Get interval name from semitones number. Since there are several interval\n * names for the same number, the name it's arbitrary, but deterministic.\n *\n * @param {Integer} num - the number of semitones (can be negative)\n * @return {string} the interval name\n * @example\n * Interval.fromSemitones(7) // => \"5P\"\n * Interval.fromSemitones(-7) // => \"-5P\"\n */\nexport function fromSemitones(semitones: number): IntervalName {\n  const d = semitones < 0 ? -1 : 1;\n  const n = Math.abs(semitones);\n  const c = n % 12;\n  const o = Math.floor(n / 12);\n  return d * (IN[c] + 7 * o) + IQ[c];\n}\n\n/**\n * Find interval between two notes\n *\n * @example\n * Interval.distance(\"C4\", \"G4\"); // => \"5P\"\n */\nexport const distance = dist;\n\n/**\n * Adds two intervals\n *\n * @function\n * @param {string} interval1\n * @param {string} interval2\n * @return {string} the added interval name\n * @example\n * Interval.add(\"3m\", \"5P\") // => \"7m\"\n */\nexport const add = combinator((a, b) => [a[0] + b[0], a[1] + b[1]]);\n\n/**\n * Returns a function that adds an interval\n *\n * @function\n * @example\n * ['1P', '2M', '3M'].map(Interval.addTo('5P')) // => [\"5P\", \"6M\", \"7M\"]\n */\nexport const addTo = (interval: string) => (other: string) =>\n  add(interval, other);\n\n/**\n * Subtracts two intervals\n *\n * @function\n * @param {string} minuendInterval\n * @param {string} subtrahendInterval\n * @return {string} the substracted interval name\n * @example\n * Interval.substract('5P', '3M') // => '3m'\n * Interval.substract('3M', '5P') // => '-3m'\n */\nexport const substract = combinator((a, b) => [a[0] - b[0], a[1] - b[1]]);\n\nexport function transposeFifths(\n  interval: IntervalName,\n  fifths: number,\n): IntervalName {\n  const ivl = get(interval);\n  if (ivl.empty) return \"\";\n\n  const [nFifths, nOcts, dir] = ivl.coord;\n  return coordToInterval([nFifths + fifths, nOcts, dir]).name;\n}\n\nexport default {\n  names,\n  get,\n  name,\n  num,\n  semitones,\n  quality,\n  fromSemitones,\n  distance,\n  invert,\n  simplify,\n  add,\n  addTo,\n  substract,\n  transposeFifths,\n};\n\n//// PRIVATE ////\n\ntype Operation = (\n  a: IntervalCoordinates,\n  b: IntervalCoordinates,\n) => NoteCoordinates;\n\nfunction combinator(fn: Operation) {\n  return (a: IntervalName, b: IntervalName): IntervalName | undefined => {\n    const coordA = props(a).coord;\n    const coordB = props(b).coord;\n    if (coordA && coordB) {\n      const coord = fn(coordA, coordB);\n      return coordToInterval(coord).name;\n    }\n  };\n}\n", "export interface NamedPitch {\n  readonly name: string;\n}\n\n/*** @deprecated use NamedPitch */\nexport interface Named {\n  readonly name: string;\n}\n\nexport interface NotFound extends NamedPitch {\n  readonly empty: true;\n  readonly name: \"\";\n}\n\nexport function isNamedPitch(src: unknown): src is NamedPitch {\n  return src !== null &&\n    typeof src === \"object\" &&\n    \"name\" in src &&\n    typeof src.name === \"string\"\n    ? true\n    : false;\n}\n\ntype Fifths = number;\ntype Octaves = number;\nexport type Direction = 1 | -1;\n\nexport type PitchClassCoordinates = [Fifths];\nexport type NoteCoordinates = [Fifths, Octaves];\nexport type IntervalCoordinates = [Fifths, Octaves, Direction];\nexport type PitchCoordinates =\n  | PitchClassCoordinates\n  | NoteCoordinates\n  | IntervalCoordinates;\n\n/**\n * Pitch properties\n *\n * - {number} step - The step number: 0 = C, 1 = D, ... 6 = B\n * - {number} alt - Number of alterations: -2 = 'bb', -1 = 'b', 0 = '', 1 = '#', ...\n * - {number} [oct] = The octave (undefined when is a coord class)\n * - {number} [dir] = Interval direction (undefined when is not an interval)\n */\nexport interface Pitch {\n  readonly step: number;\n  readonly alt: number;\n  readonly oct?: number; // undefined for pitch classes\n  readonly dir?: Direction; // undefined for notes\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nexport const chroma = ({ step, alt }: Pitch) => (SIZES[step] + alt + 120) % 12;\n\nexport const height = ({ step, alt, oct, dir = 1 }: Pitch) =>\n  dir * (SIZES[step] + alt + 12 * (oct === undefined ? -100 : oct));\n\nexport const midi = (pitch: Pitch) => {\n  const h = height(pitch);\n  return pitch.oct !== undefined && h >= -12 && h <= 115 ? h + 12 : null;\n};\n\nexport function isPitch(pitch: unknown): pitch is Pitch {\n  return pitch !== null &&\n    typeof pitch === \"object\" &&\n    \"step\" in pitch &&\n    typeof pitch.step === \"number\" &&\n    \"alt\" in pitch &&\n    typeof pitch.alt === \"number\" &&\n    !isNaN(pitch.step) &&\n    !isNaN(pitch.alt)\n    ? true\n    : false;\n}\n\n// The number of fifths of [C, D, E, F, G, A, B]\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n// The number of octaves it span each step\nconst STEPS_TO_OCTS = FIFTHS.map((fifths: number) =>\n  Math.floor((fifths * 7) / 12),\n);\n\n/**\n * Get coordinates from pitch object\n */\nexport function coordinates(pitch: Pitch): PitchCoordinates {\n  const { step, alt, oct, dir = 1 } = pitch;\n  const f = FIFTHS[step] + 7 * alt;\n  if (oct === undefined) {\n    return [dir * f];\n  }\n  const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n}\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\nconst FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n/**\n * Get pitch from coordinate objects\n */\nexport function pitch(coord: PitchCoordinates): Pitch {\n  const [f, o, dir] = coord;\n  const step = FIFTHS_TO_STEPS[unaltered(f)];\n  const alt = Math.floor((f + 1) / 7);\n  if (o === undefined) {\n    return { step, alt, dir };\n  }\n  const oct = o + 4 * alt + STEPS_TO_OCTS[step];\n  return { step, alt, oct, dir };\n}\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f: number): number {\n  const i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n", "import {\n  coordinates,\n  Direction,\n  IntervalCoordinates,\n  isNamedPitch,\n  isPitch,\n  NamedPitch,\n  Pitch,\n  pitch,\n  PitchCoordinates,\n} from \"@tonaljs/pitch\";\n\nconst fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport type IntervalName = string;\nexport type IntervalLiteral = IntervalName | Pitch | NamedPitch;\n\ntype Quality =\n  | \"dddd\"\n  | \"ddd\"\n  | \"dd\"\n  | \"d\"\n  | \"m\"\n  | \"M\"\n  | \"P\"\n  | \"A\"\n  | \"AA\"\n  | \"AAA\"\n  | \"AAAA\";\ntype Type = \"perfectable\" | \"majorable\";\n\nexport interface Interval extends Pitch, NamedPitch {\n  readonly empty: boolean;\n  readonly name: IntervalName;\n  readonly num: number;\n  readonly q: Quality;\n  readonly type: Type;\n  readonly step: number;\n  readonly alt: number;\n  readonly dir: Direction;\n  readonly simple: number;\n  readonly semitones: number;\n  readonly chroma: number;\n  readonly coord: IntervalCoordinates;\n  readonly oct: number;\n}\n\nconst NoInterval: Interval = Object.freeze({\n  empty: true,\n  name: \"\",\n  num: NaN,\n  q: \"\" as Quality,\n  type: \"\" as Type,\n  step: NaN,\n  alt: NaN,\n  dir: NaN as Direction,\n  simple: NaN,\n  semitones: NaN,\n  chroma: NaN,\n  coord: [] as unknown as IntervalCoordinates,\n  oct: NaN,\n});\n\n// shorthand tonal notation (with quality after number)\nconst INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\n// standard shorthand notation (with quality before number)\nconst INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nconst REGEX = new RegExp(\n  \"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\",\n);\n\ntype IntervalTokens = [string, string];\n\n/**\n * @private\n */\nexport function tokenizeInterval(str?: IntervalName): IntervalTokens {\n  const m = REGEX.exec(`${str}`);\n  if (m === null) {\n    return [\"\", \"\"];\n  }\n  return m[1] ? [m[1], m[2]] : [m[4], m[3]];\n}\n\nconst cache: { [key in string]: Interval } = {};\n\n/**\n * Get interval properties. It returns an object with:\n *\n * - name: the interval name\n * - num: the interval number\n * - type: 'perfectable' or 'majorable'\n * - q: the interval quality (d, m, M, A)\n * - dir: interval direction (1 ascending, -1 descending)\n * - simple: the simplified number\n * - semitones: the size in semitones\n * - chroma: the interval chroma\n *\n * @param {string} interval - the interval name\n * @return {Object} the interval properties\n *\n * @example\n * import { interval } from '@tonaljs/core'\n * interval('P5').semitones // => 7\n * interval('m3').type // => 'majorable'\n */\nexport function interval(src: IntervalLiteral): Interval {\n  return typeof src === \"string\"\n    ? cache[src] || (cache[src] = parse(src))\n    : isPitch(src)\n      ? interval(pitchName(src))\n      : isNamedPitch(src)\n        ? interval(src.name)\n        : NoInterval;\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nconst TYPES = \"PMMPPMM\";\nfunction parse(str?: string): Interval {\n  const tokens = tokenizeInterval(str);\n  if (tokens[0] === \"\") {\n    return NoInterval;\n  }\n  const num = +tokens[0];\n  const q = tokens[1] as Quality;\n  const step = (Math.abs(num) - 1) % 7;\n  const t = TYPES[step];\n  if (t === \"M\" && q === \"P\") {\n    return NoInterval;\n  }\n  const type = t === \"M\" ? \"majorable\" : \"perfectable\";\n\n  const name = \"\" + num + q;\n  const dir = num < 0 ? -1 : 1;\n  const simple = num === 8 || num === -8 ? num : dir * (step + 1);\n  const alt = qToAlt(type, q);\n  const oct = Math.floor((Math.abs(num) - 1) / 7);\n  const semitones = dir * (SIZES[step] + alt + 12 * oct);\n  const chroma = (((dir * (SIZES[step] + alt)) % 12) + 12) % 12;\n  const coord = coordinates({ step, alt, oct, dir }) as IntervalCoordinates;\n  return {\n    empty: false,\n    name,\n    num,\n    q,\n    step,\n    alt,\n    dir,\n    type,\n    simple,\n    semitones,\n    chroma,\n    coord,\n    oct,\n  };\n}\n\n/**\n * @private\n *\n * forceDescending is used in the case of unison (#243)\n */\nexport function coordToInterval(\n  coord: PitchCoordinates,\n  forceDescending?: boolean,\n): Interval {\n  const [f, o = 0] = coord;\n  const isDescending = f * 7 + o * 12 < 0;\n  const ivl: IntervalCoordinates =\n    forceDescending || isDescending ? [-f, -o, -1] : [f, o, 1];\n  return interval(pitch(ivl)) as Interval;\n}\n\nfunction qToAlt(type: Type, q: string): number {\n  return (q === \"M\" && type === \"majorable\") ||\n    (q === \"P\" && type === \"perfectable\")\n    ? 0\n    : q === \"m\" && type === \"majorable\"\n      ? -1\n      : /^A+$/.test(q)\n        ? q.length\n        : /^d+$/.test(q)\n          ? -1 * (type === \"perfectable\" ? q.length : q.length + 1)\n          : 0;\n}\n\n// return the interval name of a pitch\nfunction pitchName(props: Pitch): string {\n  const { step, alt, oct = 0, dir } = props;\n  if (!dir) {\n    return \"\";\n  }\n  const calcNum = step + 1 + 7 * oct;\n  // this is an edge case: descending pitch class unison (see #243)\n  const num = calcNum === 0 ? step + 1 : calcNum;\n  const d = dir < 0 ? \"-\" : \"\";\n  const type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\n  const name = d + num + altToQ(type, alt);\n  return name;\n}\n\nfunction altToQ(type: Type, alt: number): Quality {\n  if (alt === 0) {\n    return type === \"majorable\" ? \"M\" : \"P\";\n  } else if (alt === -1 && type === \"majorable\") {\n    return \"m\";\n  } else if (alt > 0) {\n    return fillStr(\"A\", alt) as Quality;\n  } else {\n    return fillStr(\"d\", type === \"perfectable\" ? alt : alt + 1) as Quality;\n  }\n}\n", "import { isNamedPitch, isPitch, Pitch } from \"@tonaljs/pitch\";\nimport { interval } from \"@tonaljs/pitch-interval\";\nimport { accToAlt, altToAcc } from \"@tonaljs/pitch-note\";\n\nexport interface RomanNumeral extends Pitch {\n  readonly name: string;\n  readonly empty: boolean;\n  readonly roman: string;\n  readonly interval: string;\n  readonly acc: string;\n  readonly chordType: string;\n  readonly major: boolean;\n  readonly dir: 1;\n}\n\nexport interface NoRomanNumeral extends Partial<RomanNumeral> {\n  readonly empty: true;\n  readonly name: \"\";\n  readonly chordType: \"\";\n}\nconst NoRomanNumeral: NoRomanNumeral = { empty: true, name: \"\", chordType: \"\" };\n\nconst cache: Record<string, RomanNumeral | NoRomanNumeral> = {};\n\n/**\n * Get properties of a roman numeral string\n *\n * @function\n * @param {string} - the roman numeral string (can have type, like: Imaj7)\n * @return {Object} - the roman numeral properties\n * @param {string} name - the roman numeral (tonic)\n * @param {string} type - the chord type\n * @param {string} num - the number (1 = I, 2 = II...)\n * @param {boolean} major - major or not\n *\n * @example\n * romanNumeral(\"VIIb5\") // => { name: \"VII\", type: \"b5\", num: 7, major: true }\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function get(src: any): RomanNumeral | NoRomanNumeral {\n  return typeof src === \"string\"\n    ? cache[src] || (cache[src] = parse(src))\n    : typeof src === \"number\"\n      ? get(NAMES[src] || \"\")\n      : isPitch(src)\n        ? fromPitch(src)\n        : isNamedPitch(src)\n          ? get(src.name)\n          : NoRomanNumeral;\n}\n\n/**\n * @deprecated\n * @use RomanNumeral.get\n */\nexport const romanNumeral = get;\n\n/**\n * Get roman numeral names\n *\n * @function\n * @param {boolean} [isMajor=true]\n * @return {Array<String>}\n *\n * @example\n * names() // => [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\n */\nexport function names(major = true) {\n  return (major ? NAMES : NAMES_MINOR).slice();\n}\n\nfunction fromPitch(pitch: Pitch): RomanNumeral | NoRomanNumeral {\n  return get(altToAcc(pitch.alt) + NAMES[pitch.step]);\n}\n\nconst REGEX =\n  /^(#{1,}|b{1,}|x{1,}|)(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;\n\n// [name, accidentals, romanNumeral, chordType]\ntype RomanNumeralTokens = [string, string, string, string];\nexport function tokenize(str: string): RomanNumeralTokens {\n  return (REGEX.exec(str) || [\"\", \"\", \"\", \"\"]) as RomanNumeralTokens;\n}\n\nconst ROMANS = \"I II III IV V VI VII\";\nconst NAMES = ROMANS.split(\" \");\nconst NAMES_MINOR = ROMANS.toLowerCase().split(\" \");\n\nfunction parse(src: string): RomanNumeral | NoRomanNumeral {\n  const [name, acc, roman, chordType] = tokenize(src);\n  if (!roman) {\n    return NoRomanNumeral;\n  }\n\n  const upperRoman = roman.toUpperCase();\n  const step = NAMES.indexOf(upperRoman);\n  const alt = accToAlt(acc);\n  const dir = 1;\n  return {\n    empty: false,\n    name,\n    roman,\n    interval: interval({ step, alt, dir }).name,\n    acc,\n    chordType,\n    alt,\n    step,\n    major: roman === upperRoman,\n    oct: 0,\n    dir,\n  };\n}\n\n/** @deprecated */\nexport default {\n  names,\n  get,\n  // deprecated\n  romanNumeral,\n};\n", "import { transpose, transposeFifths } from \"@tonaljs/note\";\nimport { accToAlt, altToAcc, note } from \"@tonaljs/pitch-note\";\nimport { get as roman } from \"@tonaljs/roman-numeral\";\n\nconst Empty: readonly string[] = Object.freeze([] as string[]);\n\nexport interface Key {\n  readonly type: \"major\" | \"minor\";\n  readonly tonic: string;\n  readonly alteration: number;\n  readonly keySignature: string;\n}\n\nconst NoKey: Key = {\n  type: \"major\",\n  tonic: \"\",\n  alteration: 0,\n  keySignature: \"\",\n};\n\nexport interface KeyScale {\n  readonly tonic: string;\n  readonly grades: readonly string[];\n  readonly intervals: readonly string[];\n  readonly scale: readonly string[];\n  readonly triads: readonly string[];\n  readonly chords: readonly string[];\n  readonly chordsHarmonicFunction: readonly string[];\n  readonly chordScales: readonly string[];\n}\n\nconst NoKeyScale: KeyScale = {\n  tonic: \"\",\n  grades: Empty,\n  intervals: Empty,\n  scale: Empty,\n  triads: Empty,\n  chords: Empty,\n  chordsHarmonicFunction: Empty,\n  chordScales: Empty,\n};\n\nexport interface MajorKey extends Key, KeyScale {\n  readonly type: \"major\";\n  readonly minorRelative: string;\n  readonly scale: readonly string[];\n  readonly secondaryDominants: readonly string[];\n  readonly secondaryDominantsMinorRelative: readonly string[];\n  readonly substituteDominants: readonly string[];\n  readonly substituteDominantsMinorRelative: readonly string[];\n}\n\nconst NoMajorKey: MajorKey = {\n  ...NoKey,\n  ...NoKeyScale,\n  type: \"major\",\n  minorRelative: \"\",\n  scale: Empty,\n  secondaryDominants: Empty,\n  secondaryDominantsMinorRelative: Empty,\n  substituteDominants: Empty,\n  substituteDominantsMinorRelative: Empty,\n};\n\nexport interface MinorKey extends Key {\n  readonly type: \"minor\";\n  readonly relativeMajor: string;\n  readonly natural: KeyScale;\n  readonly harmonic: KeyScale;\n  readonly melodic: KeyScale;\n}\n\nconst NoMinorKey: MinorKey = {\n  ...NoKey,\n  type: \"minor\",\n  relativeMajor: \"\",\n  natural: NoKeyScale,\n  harmonic: NoKeyScale,\n  melodic: NoKeyScale,\n};\n\nconst mapScaleToType = (scale: string[], list: string[], sep = \"\") =>\n  list.map((type, i) => `${scale[i]}${sep}${type}`);\n\nfunction keyScale(\n  grades: string[],\n  triads: string[],\n  chords: string[],\n  harmonicFunctions: string[],\n  chordScales: string[],\n) {\n  return (tonic: string): KeyScale => {\n    const intervals = grades.map((gr) => roman(gr).interval || \"\");\n    const scale = intervals.map((interval) => transpose(tonic, interval));\n\n    return {\n      tonic,\n      grades,\n      intervals,\n      scale,\n      triads: mapScaleToType(scale, triads),\n      chords: mapScaleToType(scale, chords),\n      chordsHarmonicFunction: harmonicFunctions.slice(),\n      chordScales: mapScaleToType(scale, chordScales, \" \"),\n    };\n  };\n}\n\nconst distInFifths = (from: string, to: string) => {\n  const f = note(from);\n  const t = note(to);\n  return f.empty || t.empty ? 0 : t.coord[0] - f.coord[0];\n};\n\nconst MajorScale = keyScale(\n  \"I II III IV V VI VII\".split(\" \"),\n  \" m m   m dim\".split(\" \"),\n  \"maj7 m7 m7 maj7 7 m7 m7b5\".split(\" \"),\n  \"T SD T SD D T D\".split(\" \"),\n  \"major,dorian,phrygian,lydian,mixolydian,minor,locrian\".split(\",\"),\n);\nconst NaturalScale = keyScale(\n  \"I II bIII IV V bVI bVII\".split(\" \"),\n  \"m dim  m m  \".split(\" \"),\n  \"m7 m7b5 maj7 m7 m7 maj7 7\".split(\" \"),\n  \"T SD T SD D SD SD\".split(\" \"),\n  \"minor,locrian,major,dorian,phrygian,lydian,mixolydian\".split(\",\"),\n);\nconst HarmonicScale = keyScale(\n  \"I II bIII IV V bVI VII\".split(\" \"),\n  \"m dim aug m   dim\".split(\" \"),\n  \"mMaj7 m7b5 +maj7 m7 7 maj7 o7\".split(\" \"),\n  \"T SD T SD D SD D\".split(\" \"),\n  \"harmonic minor,locrian 6,major augmented,lydian diminished,phrygian dominant,lydian #9,ultralocrian\".split(\n    \",\",\n  ),\n);\nconst MelodicScale = keyScale(\n  \"I II bIII IV V VI VII\".split(\" \"),\n  \"m m aug   dim dim\".split(\" \"),\n  \"m6 m7 +maj7 7 7 m7b5 m7b5\".split(\" \"),\n  \"T SD T SD D  \".split(\" \"),\n  \"melodic minor,dorian b2,lydian augmented,lydian dominant,mixolydian b6,locrian #2,altered\".split(\n    \",\",\n  ),\n);\n\n/**\n * Get a major key properties in a given tonic\n * @param tonic\n */\nexport function majorKey(tonic: string): MajorKey {\n  const pc = note(tonic).pc;\n  if (!pc) return NoMajorKey;\n\n  const keyScale = MajorScale(pc);\n  const alteration = distInFifths(\"C\", pc);\n  const romanInTonic = (src: string) => {\n    const r = roman(src);\n    if (r.empty) return \"\";\n\n    return transpose(tonic, r.interval) + r.chordType;\n  };\n\n  return {\n    ...keyScale,\n    type: \"major\",\n    minorRelative: transpose(pc, \"-3m\"),\n    alteration,\n    keySignature: altToAcc(alteration),\n    secondaryDominants: \"- VI7 VII7 I7 II7 III7 -\".split(\" \").map(romanInTonic),\n    secondaryDominantsMinorRelative: \"- IIIm7b5 IV#m7 Vm7 VIm7 VIIm7b5 -\"\n      .split(\" \")\n      .map(romanInTonic),\n    substituteDominants: \"- bIII7 IV7 bV7 bVI7 bVII7 -\"\n      .split(\" \")\n      .map(romanInTonic),\n    substituteDominantsMinorRelative: \"- IIIm7 Im7 IIbm7 VIm7 IVm7 -\"\n      .split(\" \")\n      .map(romanInTonic),\n  };\n}\n\n/**\n * Get minor key properties in a given tonic\n * @param tonic\n */\nexport function minorKey(tnc: string): MinorKey {\n  const pc = note(tnc).pc;\n  if (!pc) return NoMinorKey;\n\n  const alteration = distInFifths(\"C\", pc) - 3;\n  return {\n    type: \"minor\",\n    tonic: pc,\n    relativeMajor: transpose(pc, \"3m\"),\n    alteration,\n    keySignature: altToAcc(alteration),\n    natural: NaturalScale(pc),\n    harmonic: HarmonicScale(pc),\n    melodic: MelodicScale(pc),\n  };\n}\n\n/**\n * Given a key signature, returns the tonic of the major key\n * @param sigature\n * @example\n * majorTonicFromKeySignature('###') // => 'A'\n */\nexport function majorTonicFromKeySignature(\n  sig: string | number,\n): string | null {\n  if (typeof sig === \"number\") {\n    return transposeFifths(\"C\", sig);\n  } else if (typeof sig === \"string\" && /^b+|#+$/.test(sig)) {\n    return transposeFifths(\"C\", accToAlt(sig));\n  }\n  return null;\n}\n\n/** @deprecated */\nexport default { majorKey, majorTonicFromKeySignature, minorKey };\n", "export interface NamedPitch {\n  readonly name: string;\n}\n\n/*** @deprecated use NamedPitch */\nexport interface Named {\n  readonly name: string;\n}\n\nexport interface NotFound extends NamedPitch {\n  readonly empty: true;\n  readonly name: \"\";\n}\n\nexport function isNamedPitch(src: unknown): src is NamedPitch {\n  return src !== null &&\n    typeof src === \"object\" &&\n    \"name\" in src &&\n    typeof src.name === \"string\"\n    ? true\n    : false;\n}\n\ntype Fifths = number;\ntype Octaves = number;\nexport type Direction = 1 | -1;\n\nexport type PitchClassCoordinates = [Fifths];\nexport type NoteCoordinates = [Fifths, Octaves];\nexport type IntervalCoordinates = [Fifths, Octaves, Direction];\nexport type PitchCoordinates =\n  | PitchClassCoordinates\n  | NoteCoordinates\n  | IntervalCoordinates;\n\n/**\n * Pitch properties\n *\n * - {number} step - The step number: 0 = C, 1 = D, ... 6 = B\n * - {number} alt - Number of alterations: -2 = 'bb', -1 = 'b', 0 = '', 1 = '#', ...\n * - {number} [oct] = The octave (undefined when is a coord class)\n * - {number} [dir] = Interval direction (undefined when is not an interval)\n */\nexport interface Pitch {\n  readonly step: number;\n  readonly alt: number;\n  readonly oct?: number; // undefined for pitch classes\n  readonly dir?: Direction; // undefined for notes\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nexport const chroma = ({ step, alt }: Pitch) => (SIZES[step] + alt + 120) % 12;\n\nexport const height = ({ step, alt, oct, dir = 1 }: Pitch) =>\n  dir * (SIZES[step] + alt + 12 * (oct === undefined ? -100 : oct));\n\nexport const midi = (pitch: Pitch) => {\n  const h = height(pitch);\n  return pitch.oct !== undefined && h >= -12 && h <= 115 ? h + 12 : null;\n};\n\nexport function isPitch(pitch: unknown): pitch is Pitch {\n  return pitch !== null &&\n    typeof pitch === \"object\" &&\n    \"step\" in pitch &&\n    typeof pitch.step === \"number\" &&\n    \"alt\" in pitch &&\n    typeof pitch.alt === \"number\" &&\n    !isNaN(pitch.step) &&\n    !isNaN(pitch.alt)\n    ? true\n    : false;\n}\n\n// The number of fifths of [C, D, E, F, G, A, B]\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n// The number of octaves it span each step\nconst STEPS_TO_OCTS = FIFTHS.map((fifths: number) =>\n  Math.floor((fifths * 7) / 12),\n);\n\n/**\n * Get coordinates from pitch object\n */\nexport function coordinates(pitch: Pitch): PitchCoordinates {\n  const { step, alt, oct, dir = 1 } = pitch;\n  const f = FIFTHS[step] + 7 * alt;\n  if (oct === undefined) {\n    return [dir * f];\n  }\n  const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n}\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\nconst FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n/**\n * Get pitch from coordinate objects\n */\nexport function pitch(coord: PitchCoordinates): Pitch {\n  const [f, o, dir] = coord;\n  const step = FIFTHS_TO_STEPS[unaltered(f)];\n  const alt = Math.floor((f + 1) / 7);\n  if (o === undefined) {\n    return { step, alt, dir };\n  }\n  const oct = o + 4 * alt + STEPS_TO_OCTS[step];\n  return { step, alt, oct, dir };\n}\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f: number): number {\n  const i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n", "import {\n  coordinates,\n  Direction,\n  IntervalCoordinates,\n  isNamedPitch,\n  isPitch,\n  NamedPitch,\n  Pitch,\n  pitch,\n  PitchCoordinates,\n} from \"@tonaljs/pitch\";\n\nconst fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport type IntervalName = string;\nexport type IntervalLiteral = IntervalName | Pitch | NamedPitch;\n\ntype Quality =\n  | \"dddd\"\n  | \"ddd\"\n  | \"dd\"\n  | \"d\"\n  | \"m\"\n  | \"M\"\n  | \"P\"\n  | \"A\"\n  | \"AA\"\n  | \"AAA\"\n  | \"AAAA\";\ntype Type = \"perfectable\" | \"majorable\";\n\nexport interface Interval extends Pitch, NamedPitch {\n  readonly empty: boolean;\n  readonly name: IntervalName;\n  readonly num: number;\n  readonly q: Quality;\n  readonly type: Type;\n  readonly step: number;\n  readonly alt: number;\n  readonly dir: Direction;\n  readonly simple: number;\n  readonly semitones: number;\n  readonly chroma: number;\n  readonly coord: IntervalCoordinates;\n  readonly oct: number;\n}\n\nconst NoInterval: Interval = Object.freeze({\n  empty: true,\n  name: \"\",\n  num: NaN,\n  q: \"\" as Quality,\n  type: \"\" as Type,\n  step: NaN,\n  alt: NaN,\n  dir: NaN as Direction,\n  simple: NaN,\n  semitones: NaN,\n  chroma: NaN,\n  coord: [] as unknown as IntervalCoordinates,\n  oct: NaN,\n});\n\n// shorthand tonal notation (with quality after number)\nconst INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\n// standard shorthand notation (with quality before number)\nconst INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nconst REGEX = new RegExp(\n  \"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\",\n);\n\ntype IntervalTokens = [string, string];\n\n/**\n * @private\n */\nexport function tokenizeInterval(str?: IntervalName): IntervalTokens {\n  const m = REGEX.exec(`${str}`);\n  if (m === null) {\n    return [\"\", \"\"];\n  }\n  return m[1] ? [m[1], m[2]] : [m[4], m[3]];\n}\n\nconst cache: { [key in string]: Interval } = {};\n\n/**\n * Get interval properties. It returns an object with:\n *\n * - name: the interval name\n * - num: the interval number\n * - type: 'perfectable' or 'majorable'\n * - q: the interval quality (d, m, M, A)\n * - dir: interval direction (1 ascending, -1 descending)\n * - simple: the simplified number\n * - semitones: the size in semitones\n * - chroma: the interval chroma\n *\n * @param {string} interval - the interval name\n * @return {Object} the interval properties\n *\n * @example\n * import { interval } from '@tonaljs/core'\n * interval('P5').semitones // => 7\n * interval('m3').type // => 'majorable'\n */\nexport function interval(src: IntervalLiteral): Interval {\n  return typeof src === \"string\"\n    ? cache[src] || (cache[src] = parse(src))\n    : isPitch(src)\n      ? interval(pitchName(src))\n      : isNamedPitch(src)\n        ? interval(src.name)\n        : NoInterval;\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nconst TYPES = \"PMMPPMM\";\nfunction parse(str?: string): Interval {\n  const tokens = tokenizeInterval(str);\n  if (tokens[0] === \"\") {\n    return NoInterval;\n  }\n  const num = +tokens[0];\n  const q = tokens[1] as Quality;\n  const step = (Math.abs(num) - 1) % 7;\n  const t = TYPES[step];\n  if (t === \"M\" && q === \"P\") {\n    return NoInterval;\n  }\n  const type = t === \"M\" ? \"majorable\" : \"perfectable\";\n\n  const name = \"\" + num + q;\n  const dir = num < 0 ? -1 : 1;\n  const simple = num === 8 || num === -8 ? num : dir * (step + 1);\n  const alt = qToAlt(type, q);\n  const oct = Math.floor((Math.abs(num) - 1) / 7);\n  const semitones = dir * (SIZES[step] + alt + 12 * oct);\n  const chroma = (((dir * (SIZES[step] + alt)) % 12) + 12) % 12;\n  const coord = coordinates({ step, alt, oct, dir }) as IntervalCoordinates;\n  return {\n    empty: false,\n    name,\n    num,\n    q,\n    step,\n    alt,\n    dir,\n    type,\n    simple,\n    semitones,\n    chroma,\n    coord,\n    oct,\n  };\n}\n\n/**\n * @private\n *\n * forceDescending is used in the case of unison (#243)\n */\nexport function coordToInterval(\n  coord: PitchCoordinates,\n  forceDescending?: boolean,\n): Interval {\n  const [f, o = 0] = coord;\n  const isDescending = f * 7 + o * 12 < 0;\n  const ivl: IntervalCoordinates =\n    forceDescending || isDescending ? [-f, -o, -1] : [f, o, 1];\n  return interval(pitch(ivl)) as Interval;\n}\n\nfunction qToAlt(type: Type, q: string): number {\n  return (q === \"M\" && type === \"majorable\") ||\n    (q === \"P\" && type === \"perfectable\")\n    ? 0\n    : q === \"m\" && type === \"majorable\"\n      ? -1\n      : /^A+$/.test(q)\n        ? q.length\n        : /^d+$/.test(q)\n          ? -1 * (type === \"perfectable\" ? q.length : q.length + 1)\n          : 0;\n}\n\n// return the interval name of a pitch\nfunction pitchName(props: Pitch): string {\n  const { step, alt, oct = 0, dir } = props;\n  if (!dir) {\n    return \"\";\n  }\n  const calcNum = step + 1 + 7 * oct;\n  // this is an edge case: descending pitch class unison (see #243)\n  const num = calcNum === 0 ? step + 1 : calcNum;\n  const d = dir < 0 ? \"-\" : \"\";\n  const type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\n  const name = d + num + altToQ(type, alt);\n  return name;\n}\n\nfunction altToQ(type: Type, alt: number): Quality {\n  if (alt === 0) {\n    return type === \"majorable\" ? \"M\" : \"P\";\n  } else if (alt === -1 && type === \"majorable\") {\n    return \"m\";\n  } else if (alt > 0) {\n    return fillStr(\"A\", alt) as Quality;\n  } else {\n    return fillStr(\"d\", type === \"perfectable\" ? alt : alt + 1) as Quality;\n  }\n}\n", "import { IntervalCoordinates, NoteCoordinates } from \"@tonaljs/pitch\";\nimport { distance as dist } from \"@tonaljs/pitch-distance\";\nimport {\n  IntervalName,\n  coordToInterval,\n  interval as props,\n} from \"@tonaljs/pitch-interval\";\n\n/**\n * Get the natural list of names\n */\nexport function names(): IntervalName[] {\n  return \"1P 2M 3M 4P 5P 6m 7m\".split(\" \");\n}\n\n/**\n * Get properties of an interval\n *\n * @function\n * @example\n * Interval.get('P4') // => {\"alt\": 0,  \"dir\": 1,  \"name\": \"4P\", \"num\": 4, \"oct\": 0, \"q\": \"P\", \"semitones\": 5, \"simple\": 4, \"step\": 3, \"type\": \"perfectable\"}\n */\nexport const get = props;\n\n/**\n * Get name of an interval\n *\n * @function\n * @example\n * Interval.name('4P') // => \"4P\"\n * Interval.name('P4') // => \"4P\"\n * Interval.name('C4') // => \"\"\n */\nexport const name = (name: string) => props(name).name;\n\n/**\n * Get semitones of an interval\n * @function\n * @example\n * Interval.semitones('P4') // => 5\n */\nexport const semitones = (name: string) => props(name).semitones;\n\n/**\n * Get quality of an interval\n * @function\n * @example\n * Interval.quality('P4') // => \"P\"\n */\nexport const quality = (name: string) => props(name).q;\n\n/**\n * Get number of an interval\n * @function\n * @example\n * Interval.num('P4') // => 4\n */\nexport const num = (name: string) => props(name).num;\n\n/**\n * Get the simplified version of an interval.\n *\n * @function\n * @param {string} interval - the interval to simplify\n * @return {string} the simplified interval\n *\n * @example\n * Interval.simplify(\"9M\") // => \"2M\"\n * Interval.simplify(\"2M\") // => \"2M\"\n * Interval.simplify(\"-2M\") // => \"7m\"\n * [\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify)\n * // => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\n */\nexport function simplify(name: IntervalName): IntervalName {\n  const i = props(name);\n  return i.empty ? \"\" : i.simple + i.q;\n}\n\n/**\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\n * of an interval.\n *\n * @function\n * @param {string} interval - the interval to invert in interval shorthand\n * notation or interval array notation\n * @return {string} the inverted interval\n *\n * @example\n * Interval.invert(\"3m\") // => \"6M\"\n * Interval.invert(\"2M\") // => \"7m\"\n */\nexport function invert(name: IntervalName): IntervalName {\n  const i = props(name);\n  if (i.empty) {\n    return \"\";\n  }\n  const step = (7 - i.step) % 7;\n  const alt = i.type === \"perfectable\" ? -i.alt : -(i.alt + 1);\n  return props({ step, alt, oct: i.oct, dir: i.dir }).name;\n}\n\n// interval numbers\nconst IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\n// interval qualities\nconst IQ = \"P m M m M P d P m M m M\".split(\" \");\n\n/**\n * Get interval name from semitones number. Since there are several interval\n * names for the same number, the name it's arbitrary, but deterministic.\n *\n * @param {Integer} num - the number of semitones (can be negative)\n * @return {string} the interval name\n * @example\n * Interval.fromSemitones(7) // => \"5P\"\n * Interval.fromSemitones(-7) // => \"-5P\"\n */\nexport function fromSemitones(semitones: number): IntervalName {\n  const d = semitones < 0 ? -1 : 1;\n  const n = Math.abs(semitones);\n  const c = n % 12;\n  const o = Math.floor(n / 12);\n  return d * (IN[c] + 7 * o) + IQ[c];\n}\n\n/**\n * Find interval between two notes\n *\n * @example\n * Interval.distance(\"C4\", \"G4\"); // => \"5P\"\n */\nexport const distance = dist;\n\n/**\n * Adds two intervals\n *\n * @function\n * @param {string} interval1\n * @param {string} interval2\n * @return {string} the added interval name\n * @example\n * Interval.add(\"3m\", \"5P\") // => \"7m\"\n */\nexport const add = combinator((a, b) => [a[0] + b[0], a[1] + b[1]]);\n\n/**\n * Returns a function that adds an interval\n *\n * @function\n * @example\n * ['1P', '2M', '3M'].map(Interval.addTo('5P')) // => [\"5P\", \"6M\", \"7M\"]\n */\nexport const addTo = (interval: string) => (other: string) =>\n  add(interval, other);\n\n/**\n * Subtracts two intervals\n *\n * @function\n * @param {string} minuendInterval\n * @param {string} subtrahendInterval\n * @return {string} the subtracted interval name\n * @example\n * Interval.subtract('5P', '3M') // => '3m'\n * Interval.subtract('3M', '5P') // => '-3m'\n */\nexport const subtract = combinator((a, b) => [a[0] - b[0], a[1] - b[1]]);\n\nexport function transposeFifths(\n  interval: IntervalName,\n  fifths: number,\n): IntervalName {\n  const ivl = get(interval);\n  if (ivl.empty) return \"\";\n\n  const [nFifths, nOcts, dir] = ivl.coord;\n  return coordToInterval([nFifths + fifths, nOcts, dir]).name;\n}\n\n/** @deprecated */\nexport default {\n  names,\n  get,\n  name,\n  num,\n  semitones,\n  quality,\n  fromSemitones,\n  distance,\n  invert,\n  simplify,\n  add,\n  addTo,\n  subtract,\n  transposeFifths,\n};\n\n//// PRIVATE ////\n\ntype Operation = (\n  a: IntervalCoordinates,\n  b: IntervalCoordinates,\n) => NoteCoordinates;\n\nfunction combinator(fn: Operation) {\n  return (a: IntervalName, b: IntervalName): IntervalName | undefined => {\n    const coordA = props(a).coord;\n    const coordB = props(b).coord;\n    if (coordA && coordB) {\n      const coord = fn(coordA, coordB);\n      return coordToInterval(coord).name;\n    }\n  };\n}\n", "import { rotate } from \"@tonaljs/collection\";\nimport { simplify, transposeFifths } from \"@tonaljs/interval\";\nimport { EmptyPcset, Pcset } from \"@tonaljs/pcset\";\nimport { transpose } from \"@tonaljs/pitch-distance\";\nimport { NoteName } from \"@tonaljs/pitch-note\";\nimport { get as getType } from \"@tonaljs/scale-type\";\n\nconst MODES = [\n  [0, 2773, 0, \"ionian\", \"\", \"Maj7\", \"major\"],\n  [1, 2902, 2, \"dorian\", \"m\", \"m7\"],\n  [2, 3418, 4, \"phrygian\", \"m\", \"m7\"],\n  [3, 2741, -1, \"lydian\", \"\", \"Maj7\"],\n  [4, 2774, 1, \"mixolydian\", \"\", \"7\"],\n  [5, 2906, 3, \"aeolian\", \"m\", \"m7\", \"minor\"],\n  [6, 3434, 5, \"locrian\", \"dim\", \"m7b5\"],\n] as const;\n\ntype ModeDatum = (typeof MODES)[number];\n\nexport interface Mode extends Pcset {\n  readonly name: string;\n  readonly modeNum: number;\n  readonly alt: number; // number of alterations === number of fiths\n  readonly triad: string;\n  readonly seventh: string;\n  readonly aliases: string[];\n}\n\nconst NoMode: Mode = {\n  ...EmptyPcset,\n  name: \"\",\n  alt: 0,\n  modeNum: NaN,\n  triad: \"\",\n  seventh: \"\",\n  aliases: [],\n};\n\nconst modes: Mode[] = MODES.map(toMode);\nconst index: Record<string, Mode> = {};\nmodes.forEach((mode) => {\n  index[mode.name] = mode;\n  mode.aliases.forEach((alias) => {\n    index[alias] = mode;\n  });\n});\n\ntype ModeLiteral = string | { name: string };\n\n/**\n * Get a Mode by it's name\n *\n * @example\n * get('dorian')\n * // =>\n * // {\n * //   intervals: [ '1P', '2M', '3m', '4P', '5P', '6M', '7m' ],\n * //   modeNum: 1,\n * //   chroma: '101101010110',\n * //   normalized: '101101010110',\n * //   name: 'dorian',\n * //   setNum: 2902,\n * //   alt: 2,\n * //   triad: 'm',\n * //   seventh: 'm7',\n * //   aliases: []\n * // }\n */\nexport function get(name: ModeLiteral): Mode {\n  return typeof name === \"string\"\n    ? index[name.toLowerCase()] || NoMode\n    : name && name.name\n      ? get(name.name)\n      : NoMode;\n}\n\n/** @deprecated */\nexport const mode = get;\n\n/**\n * Get a list of all modes\n */\nexport function all() {\n  return modes.slice();\n}\n\n/** @deprecated */\nexport const entries = all;\n\n/**\n * Get a list of all mode names\n */\nexport function names() {\n  return modes.map((mode) => mode.name);\n}\n\nfunction toMode(mode: ModeDatum): Mode {\n  const [modeNum, setNum, alt, name, triad, seventh, alias] = mode;\n  const aliases = alias ? [alias] : [];\n  const chroma = Number(setNum).toString(2);\n  const intervals = getType(name).intervals;\n  return {\n    empty: false,\n    intervals,\n    modeNum,\n    chroma,\n    normalized: chroma,\n    name,\n    setNum,\n    alt,\n    triad,\n    seventh,\n    aliases,\n  };\n}\n\nexport function notes(modeName: ModeLiteral, tonic: NoteName) {\n  return get(modeName).intervals.map((ivl) => transpose(tonic, ivl));\n}\n\nfunction chords(chords: string[]) {\n  return (modeName: ModeLiteral, tonic: NoteName) => {\n    const mode = get(modeName);\n    if (mode.empty) return [];\n    const triads = rotate(mode.modeNum, chords);\n    const tonics = mode.intervals.map((i) => transpose(tonic, i));\n    return triads.map((triad, i) => tonics[i] + triad);\n  };\n}\n\nexport const triads = chords(MODES.map((x) => x[4]));\nexport const seventhChords = chords(MODES.map((x) => x[5]));\n\nexport function distance(destination: ModeLiteral, source: ModeLiteral) {\n  const from = get(source);\n  const to = get(destination);\n  if (from.empty || to.empty) return \"\";\n  return simplify(transposeFifths(\"1P\", to.alt - from.alt));\n}\n\nexport function relativeTonic(\n  destination: ModeLiteral,\n  source: ModeLiteral,\n  tonic: NoteName,\n) {\n  return transpose(tonic, distance(destination, source));\n}\n\n/** @deprecated */\nexport default {\n  get,\n  names,\n  all,\n  distance,\n  relativeTonic,\n  notes,\n  triads,\n  seventhChords,\n  // deprecated\n  entries,\n  mode,\n};\n", "import {\n  EmptyPcset,\n  get as pcset,\n  Pcset,\n  PcsetChroma,\n  PcsetNum,\n} from \"@tonaljs/pcset\";\nimport data from \"./data\";\n\nexport type ChordQuality =\n  | \"Major\"\n  | \"Minor\"\n  | \"Augmented\"\n  | \"Diminished\"\n  | \"Unknown\";\n\nexport interface ChordType extends Pcset {\n  name: string;\n  quality: ChordQuality;\n  aliases: string[];\n}\nconst NoChordType: ChordType = {\n  ...EmptyPcset,\n  name: \"\",\n  quality: \"Unknown\",\n  intervals: [],\n  aliases: [],\n};\n\ntype ChordTypeName = string | PcsetChroma | PcsetNum;\n\nlet dictionary: ChordType[] = [];\nlet index: Record<ChordTypeName, ChordType> = {};\n\n/**\n * Given a chord name or chroma, return the chord properties\n * @param {string} source - chord name or pitch class set chroma\n * @example\n * import { get } from 'tonaljs/chord-type'\n * get('major') // => { name: 'major', ... }\n */\nexport function get(type: ChordTypeName): ChordType {\n  return index[type] || NoChordType;\n}\n\n/** @deprecated */\nexport const chordType = get;\n\n/**\n * Get all chord (long) names\n */\nexport function names() {\n  return dictionary.map((chord) => chord.name).filter((x) => x);\n}\n\n/**\n * Get all chord symbols\n */\nexport function symbols() {\n  return dictionary.map((chord) => chord.aliases[0]).filter((x) => x);\n}\n\n/**\n * Keys used to reference chord types\n */\nexport function keys() {\n  return Object.keys(index);\n}\n\n/**\n * Return a list of all chord types\n */\nexport function all(): ChordType[] {\n  return dictionary.slice();\n}\n\n/** @deprecated */\nexport const entries = all;\n\n/**\n * Clear the dictionary\n */\nexport function removeAll() {\n  dictionary = [];\n  index = {};\n}\n\n/**\n * Add a chord to the dictionary.\n * @param intervals\n * @param aliases\n * @param [fullName]\n */\nexport function add(intervals: string[], aliases: string[], fullName?: string) {\n  const quality = getQuality(intervals);\n  const chord = {\n    ...pcset(intervals),\n    name: fullName || \"\",\n    quality,\n    intervals,\n    aliases,\n  };\n  dictionary.push(chord);\n  if (chord.name) {\n    index[chord.name] = chord;\n  }\n  index[chord.setNum] = chord;\n  index[chord.chroma] = chord;\n  chord.aliases.forEach((alias) => addAlias(chord, alias));\n}\n\nexport function addAlias(chord: ChordType, alias: string) {\n  index[alias] = chord;\n}\n\nfunction getQuality(intervals: string[]): ChordQuality {\n  const has = (interval: string) => intervals.indexOf(interval) !== -1;\n  return has(\"5A\")\n    ? \"Augmented\"\n    : has(\"3M\")\n      ? \"Major\"\n      : has(\"5d\")\n        ? \"Diminished\"\n        : has(\"3m\")\n          ? \"Minor\"\n          : \"Unknown\";\n}\n\ndata.forEach(([ivls, fullName, names]: string[]) =>\n  add(ivls.split(\" \"), names.split(\" \"), fullName),\n);\ndictionary.sort((a, b) => a.setNum - b.setNum);\n\n/** @deprecated */\nexport default {\n  names,\n  symbols,\n  get,\n  all,\n  add,\n  removeAll,\n  keys,\n  // deprecated\n  entries,\n  chordType,\n};\n", "/**\n * @private\n * Chord List\n * Source: https://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns\n * Format: [\"intervals\", \"full name\", \"abrv1 abrv2\"]\n */\nconst CHORDS: string[][] = [\n  // ==Major==\n  [\"1P 3M 5P\", \"major\", \"M ^  maj\"],\n  [\"1P 3M 5P 7M\", \"major seventh\", \"maj7 Î” ma7 M7 Maj7 ^7\"],\n  [\"1P 3M 5P 7M 9M\", \"major ninth\", \"maj9 Î”9 ^9\"],\n  [\"1P 3M 5P 7M 9M 13M\", \"major thirteenth\", \"maj13 Maj13 ^13\"],\n  [\"1P 3M 5P 6M\", \"sixth\", \"6 add6 add13 M6\"],\n  [\"1P 3M 5P 6M 9M\", \"sixth added ninth\", \"6add9 6/9 69 M69\"],\n  [\"1P 3M 6m 7M\", \"major seventh flat sixth\", \"M7b6 ^7b6\"],\n  [\n    \"1P 3M 5P 7M 11A\",\n    \"major seventh sharp eleventh\",\n    \"maj#4 Î”#4 Î”#11 M7#11 ^7#11 maj7#11\",\n  ],\n  // ==Minor==\n  // '''Normal'''\n  [\"1P 3m 5P\", \"minor\", \"m min -\"],\n  [\"1P 3m 5P 7m\", \"minor seventh\", \"m7 min7 mi7 -7\"],\n  [\n    \"1P 3m 5P 7M\",\n    \"minor/major seventh\",\n    \"m/ma7 m/maj7 mM7 mMaj7 m/M7 -Î”7 mÎ” -^7 -maj7\",\n  ],\n  [\"1P 3m 5P 6M\", \"minor sixth\", \"m6 -6\"],\n  [\"1P 3m 5P 7m 9M\", \"minor ninth\", \"m9 -9\"],\n  [\"1P 3m 5P 7M 9M\", \"minor/major ninth\", \"mM9 mMaj9 -^9\"],\n  [\"1P 3m 5P 7m 9M 11P\", \"minor eleventh\", \"m11 -11\"],\n  [\"1P 3m 5P 7m 9M 13M\", \"minor thirteenth\", \"m13 -13\"],\n  // '''Diminished'''\n  [\"1P 3m 5d\", \"diminished\", \"dim Â° o\"],\n  [\"1P 3m 5d 7d\", \"diminished seventh\", \"dim7 Â°7 o7\"],\n  [\"1P 3m 5d 7m\", \"half-diminished\", \"m7b5 Ã¸ -7b5 h7 h\"],\n  // ==Dominant/Seventh==\n  // '''Normal'''\n  [\"1P 3M 5P 7m\", \"dominant seventh\", \"7 dom\"],\n  [\"1P 3M 5P 7m 9M\", \"dominant ninth\", \"9\"],\n  [\"1P 3M 5P 7m 9M 13M\", \"dominant thirteenth\", \"13\"],\n  [\"1P 3M 5P 7m 11A\", \"lydian dominant seventh\", \"7#11 7#4\"],\n  // '''Altered'''\n  [\"1P 3M 5P 7m 9m\", \"dominant flat ninth\", \"7b9\"],\n  [\"1P 3M 5P 7m 9A\", \"dominant sharp ninth\", \"7#9\"],\n  [\"1P 3M 7m 9m\", \"altered\", \"alt7\"],\n  // '''Suspended'''\n  [\"1P 4P 5P\", \"suspended fourth\", \"sus4 sus\"],\n  [\"1P 2M 5P\", \"suspended second\", \"sus2\"],\n  [\"1P 4P 5P 7m\", \"suspended fourth seventh\", \"7sus4 7sus\"],\n  [\"1P 5P 7m 9M 11P\", \"eleventh\", \"11\"],\n  [\n    \"1P 4P 5P 7m 9m\",\n    \"suspended fourth flat ninth\",\n    \"b9sus phryg 7b9sus 7b9sus4\",\n  ],\n  // ==Other==\n  [\"1P 5P\", \"fifth\", \"5\"],\n  [\"1P 3M 5A\", \"augmented\", \"aug + +5 ^#5\"],\n  [\"1P 3m 5A\", \"minor augmented\", \"m#5 -#5 m+\"],\n  [\"1P 3M 5A 7M\", \"augmented seventh\", \"maj7#5 maj7+5 +maj7 ^7#5\"],\n  [\n    \"1P 3M 5P 7M 9M 11A\",\n    \"major sharp eleventh (lydian)\",\n    \"maj9#11 Î”9#11 ^9#11\",\n  ],\n  // ==Legacy==\n  [\"1P 2M 4P 5P\", \"\", \"sus24 sus4add9\"],\n  [\"1P 3M 5A 7M 9M\", \"\", \"maj9#5 Maj9#5\"],\n  [\"1P 3M 5A 7m\", \"\", \"7#5 +7 7+ 7aug aug7\"],\n  [\"1P 3M 5A 7m 9A\", \"\", \"7#5#9 7#9#5 7alt\"],\n  [\"1P 3M 5A 7m 9M\", \"\", \"9#5 9+\"],\n  [\"1P 3M 5A 7m 9M 11A\", \"\", \"9#5#11\"],\n  [\"1P 3M 5A 7m 9m\", \"\", \"7#5b9 7b9#5\"],\n  [\"1P 3M 5A 7m 9m 11A\", \"\", \"7#5b9#11\"],\n  [\"1P 3M 5A 9A\", \"\", \"+add#9\"],\n  [\"1P 3M 5A 9M\", \"\", \"M#5add9 +add9\"],\n  [\"1P 3M 5P 6M 11A\", \"\", \"M6#11 M6b5 6#11 6b5\"],\n  [\"1P 3M 5P 6M 7M 9M\", \"\", \"M7add13\"],\n  [\"1P 3M 5P 6M 9M 11A\", \"\", \"69#11\"],\n  [\"1P 3m 5P 6M 9M\", \"\", \"m69 -69\"],\n  [\"1P 3M 5P 6m 7m\", \"\", \"7b6\"],\n  [\"1P 3M 5P 7M 9A 11A\", \"\", \"maj7#9#11\"],\n  [\"1P 3M 5P 7M 9M 11A 13M\", \"\", \"M13#11 maj13#11 M13+4 M13#4\"],\n  [\"1P 3M 5P 7M 9m\", \"\", \"M7b9\"],\n  [\"1P 3M 5P 7m 11A 13m\", \"\", \"7#11b13 7b5b13\"],\n  [\"1P 3M 5P 7m 13M\", \"\", \"7add6 67 7add13\"],\n  [\"1P 3M 5P 7m 9A 11A\", \"\", \"7#9#11 7b5#9 7#9b5\"],\n  [\"1P 3M 5P 7m 9A 11A 13M\", \"\", \"13#9#11\"],\n  [\"1P 3M 5P 7m 9A 11A 13m\", \"\", \"7#9#11b13\"],\n  [\"1P 3M 5P 7m 9A 13M\", \"\", \"13#9\"],\n  [\"1P 3M 5P 7m 9A 13m\", \"\", \"7#9b13\"],\n  [\"1P 3M 5P 7m 9M 11A\", \"\", \"9#11 9+4 9#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13M\", \"\", \"13#11 13+4 13#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13m\", \"\", \"9#11b13 9b5b13\"],\n  [\"1P 3M 5P 7m 9m 11A\", \"\", \"7b9#11 7b5b9 7b9b5\"],\n  [\"1P 3M 5P 7m 9m 11A 13M\", \"\", \"13b9#11\"],\n  [\"1P 3M 5P 7m 9m 11A 13m\", \"\", \"7b9b13#11 7b9#11b13 7b5b9b13\"],\n  [\"1P 3M 5P 7m 9m 13M\", \"\", \"13b9\"],\n  [\"1P 3M 5P 7m 9m 13m\", \"\", \"7b9b13\"],\n  [\"1P 3M 5P 7m 9m 9A\", \"\", \"7b9#9\"],\n  [\"1P 3M 5P 9M\", \"\", \"Madd9 2 add9 add2\"],\n  [\"1P 3M 5P 9m\", \"\", \"Maddb9\"],\n  [\"1P 3M 5d\", \"\", \"Mb5\"],\n  [\"1P 3M 5d 6M 7m 9M\", \"\", \"13b5\"],\n  [\"1P 3M 5d 7M\", \"\", \"M7b5\"],\n  [\"1P 3M 5d 7M 9M\", \"\", \"M9b5\"],\n  [\"1P 3M 5d 7m\", \"\", \"7b5\"],\n  [\"1P 3M 5d 7m 9M\", \"\", \"9b5\"],\n  [\"1P 3M 7m\", \"\", \"7no5\"],\n  [\"1P 3M 7m 13m\", \"\", \"7b13\"],\n  [\"1P 3M 7m 9M\", \"\", \"9no5\"],\n  [\"1P 3M 7m 9M 13M\", \"\", \"13no5\"],\n  [\"1P 3M 7m 9M 13m\", \"\", \"9b13\"],\n  [\"1P 3m 4P 5P\", \"\", \"madd4\"],\n  [\"1P 3m 5P 6m 7M\", \"\", \"mMaj7b6\"],\n  [\"1P 3m 5P 6m 7M 9M\", \"\", \"mMaj9b6\"],\n  [\"1P 3m 5P 7m 11P\", \"\", \"m7add11 m7add4\"],\n  [\"1P 3m 5P 9M\", \"\", \"madd9\"],\n  [\"1P 3m 5d 6M 7M\", \"\", \"o7M7\"],\n  [\"1P 3m 5d 7M\", \"\", \"oM7\"],\n  [\"1P 3m 6m 7M\", \"\", \"mb6M7\"],\n  [\"1P 3m 6m 7m\", \"\", \"m7#5\"],\n  [\"1P 3m 6m 7m 9M\", \"\", \"m9#5\"],\n  [\"1P 3m 5A 7m 9M 11P\", \"\", \"m11A\"],\n  [\"1P 3m 6m 9m\", \"\", \"mb6b9\"],\n  [\"1P 2M 3m 5d 7m\", \"\", \"m9b5\"],\n  [\"1P 4P 5A 7M\", \"\", \"M7#5sus4\"],\n  [\"1P 4P 5A 7M 9M\", \"\", \"M9#5sus4\"],\n  [\"1P 4P 5A 7m\", \"\", \"7#5sus4\"],\n  [\"1P 4P 5P 7M\", \"\", \"M7sus4\"],\n  [\"1P 4P 5P 7M 9M\", \"\", \"M9sus4\"],\n  [\"1P 4P 5P 7m 9M\", \"\", \"9sus4 9sus\"],\n  [\"1P 4P 5P 7m 9M 13M\", \"\", \"13sus4 13sus\"],\n  [\"1P 4P 5P 7m 9m 13m\", \"\", \"7sus4b9b13 7b9b13sus4\"],\n  [\"1P 4P 7m 10m\", \"\", \"4 quartal\"],\n  [\"1P 5P 7m 9m 11P\", \"\", \"11b9\"],\n];\n\nexport default CHORDS;\n", "export interface NamedPitch {\n  readonly name: string;\n}\n\n/*** @deprecated use NamedPitch */\nexport interface Named {\n  readonly name: string;\n}\n\nexport interface NotFound extends NamedPitch {\n  readonly empty: true;\n  readonly name: \"\";\n}\n\nexport function isNamedPitch(src: unknown): src is NamedPitch {\n  return src !== null &&\n    typeof src === \"object\" &&\n    \"name\" in src &&\n    typeof src.name === \"string\"\n    ? true\n    : false;\n}\n\ntype Fifths = number;\ntype Octaves = number;\nexport type Direction = 1 | -1;\n\nexport type PitchClassCoordinates = [Fifths];\nexport type NoteCoordinates = [Fifths, Octaves];\nexport type IntervalCoordinates = [Fifths, Octaves, Direction];\nexport type PitchCoordinates =\n  | PitchClassCoordinates\n  | NoteCoordinates\n  | IntervalCoordinates;\n\n/**\n * Pitch properties\n *\n * - {number} step - The step number: 0 = C, 1 = D, ... 6 = B\n * - {number} alt - Number of alterations: -2 = 'bb', -1 = 'b', 0 = '', 1 = '#', ...\n * - {number} [oct] = The octave (undefined when is a coord class)\n * - {number} [dir] = Interval direction (undefined when is not an interval)\n */\nexport interface Pitch {\n  readonly step: number;\n  readonly alt: number;\n  readonly oct?: number; // undefined for pitch classes\n  readonly dir?: Direction; // undefined for notes\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nexport const chroma = ({ step, alt }: Pitch) => (SIZES[step] + alt + 120) % 12;\n\nexport const height = ({ step, alt, oct, dir = 1 }: Pitch) =>\n  dir * (SIZES[step] + alt + 12 * (oct === undefined ? -100 : oct));\n\nexport const midi = (pitch: Pitch) => {\n  const h = height(pitch);\n  return pitch.oct !== undefined && h >= -12 && h <= 115 ? h + 12 : null;\n};\n\nexport function isPitch(pitch: unknown): pitch is Pitch {\n  return pitch !== null &&\n    typeof pitch === \"object\" &&\n    \"step\" in pitch &&\n    typeof pitch.step === \"number\" &&\n    \"alt\" in pitch &&\n    typeof pitch.alt === \"number\" &&\n    !isNaN(pitch.step) &&\n    !isNaN(pitch.alt)\n    ? true\n    : false;\n}\n\n// The number of fifths of [C, D, E, F, G, A, B]\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n// The number of octaves it span each step\nconst STEPS_TO_OCTS = FIFTHS.map((fifths: number) =>\n  Math.floor((fifths * 7) / 12),\n);\n\n/**\n * Get coordinates from pitch object\n */\nexport function coordinates(pitch: Pitch): PitchCoordinates {\n  const { step, alt, oct, dir = 1 } = pitch;\n  const f = FIFTHS[step] + 7 * alt;\n  if (oct === undefined) {\n    return [dir * f];\n  }\n  const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n}\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\nconst FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n/**\n * Get pitch from coordinate objects\n */\nexport function pitch(coord: PitchCoordinates): Pitch {\n  const [f, o, dir] = coord;\n  const step = FIFTHS_TO_STEPS[unaltered(f)];\n  const alt = Math.floor((f + 1) / 7);\n  if (o === undefined) {\n    return { step, alt, dir };\n  }\n  const oct = o + 4 * alt + STEPS_TO_OCTS[step];\n  return { step, alt, oct, dir };\n}\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f: number): number {\n  const i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n", "import {\n  coordinates,\n  Direction,\n  IntervalCoordinates,\n  isNamedPitch,\n  isPitch,\n  NamedPitch,\n  Pitch,\n  pitch,\n  PitchCoordinates,\n} from \"@tonaljs/pitch\";\n\nconst fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport type IntervalName = string;\nexport type IntervalLiteral = IntervalName | Pitch | NamedPitch;\n\ntype Quality =\n  | \"dddd\"\n  | \"ddd\"\n  | \"dd\"\n  | \"d\"\n  | \"m\"\n  | \"M\"\n  | \"P\"\n  | \"A\"\n  | \"AA\"\n  | \"AAA\"\n  | \"AAAA\";\ntype Type = \"perfectable\" | \"majorable\";\n\nexport interface Interval extends Pitch, NamedPitch {\n  readonly empty: boolean;\n  readonly name: IntervalName;\n  readonly num: number;\n  readonly q: Quality;\n  readonly type: Type;\n  readonly step: number;\n  readonly alt: number;\n  readonly dir: Direction;\n  readonly simple: number;\n  readonly semitones: number;\n  readonly chroma: number;\n  readonly coord: IntervalCoordinates;\n  readonly oct: number;\n}\n\nconst NoInterval: Interval = Object.freeze({\n  empty: true,\n  name: \"\",\n  num: NaN,\n  q: \"\" as Quality,\n  type: \"\" as Type,\n  step: NaN,\n  alt: NaN,\n  dir: NaN as Direction,\n  simple: NaN,\n  semitones: NaN,\n  chroma: NaN,\n  coord: [] as unknown as IntervalCoordinates,\n  oct: NaN,\n});\n\n// shorthand tonal notation (with quality after number)\nconst INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\n// standard shorthand notation (with quality before number)\nconst INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nconst REGEX = new RegExp(\n  \"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\",\n);\n\ntype IntervalTokens = [string, string];\n\n/**\n * @private\n */\nexport function tokenizeInterval(str?: IntervalName): IntervalTokens {\n  const m = REGEX.exec(`${str}`);\n  if (m === null) {\n    return [\"\", \"\"];\n  }\n  return m[1] ? [m[1], m[2]] : [m[4], m[3]];\n}\n\nconst cache: { [key in string]: Interval } = {};\n\n/**\n * Get interval properties. It returns an object with:\n *\n * - name: the interval name\n * - num: the interval number\n * - type: 'perfectable' or 'majorable'\n * - q: the interval quality (d, m, M, A)\n * - dir: interval direction (1 ascending, -1 descending)\n * - simple: the simplified number\n * - semitones: the size in semitones\n * - chroma: the interval chroma\n *\n * @param {string} interval - the interval name\n * @return {Object} the interval properties\n *\n * @example\n * import { interval } from '@tonaljs/core'\n * interval('P5').semitones // => 7\n * interval('m3').type // => 'majorable'\n */\nexport function interval(src: IntervalLiteral): Interval {\n  return typeof src === \"string\"\n    ? cache[src] || (cache[src] = parse(src))\n    : isPitch(src)\n      ? interval(pitchName(src))\n      : isNamedPitch(src)\n        ? interval(src.name)\n        : NoInterval;\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nconst TYPES = \"PMMPPMM\";\nfunction parse(str?: string): Interval {\n  const tokens = tokenizeInterval(str);\n  if (tokens[0] === \"\") {\n    return NoInterval;\n  }\n  const num = +tokens[0];\n  const q = tokens[1] as Quality;\n  const step = (Math.abs(num) - 1) % 7;\n  const t = TYPES[step];\n  if (t === \"M\" && q === \"P\") {\n    return NoInterval;\n  }\n  const type = t === \"M\" ? \"majorable\" : \"perfectable\";\n\n  const name = \"\" + num + q;\n  const dir = num < 0 ? -1 : 1;\n  const simple = num === 8 || num === -8 ? num : dir * (step + 1);\n  const alt = qToAlt(type, q);\n  const oct = Math.floor((Math.abs(num) - 1) / 7);\n  const semitones = dir * (SIZES[step] + alt + 12 * oct);\n  const chroma = (((dir * (SIZES[step] + alt)) % 12) + 12) % 12;\n  const coord = coordinates({ step, alt, oct, dir }) as IntervalCoordinates;\n  return {\n    empty: false,\n    name,\n    num,\n    q,\n    step,\n    alt,\n    dir,\n    type,\n    simple,\n    semitones,\n    chroma,\n    coord,\n    oct,\n  };\n}\n\n/**\n * @private\n *\n * forceDescending is used in the case of unison (#243)\n */\nexport function coordToInterval(\n  coord: PitchCoordinates,\n  forceDescending?: boolean,\n): Interval {\n  const [f, o = 0] = coord;\n  const isDescending = f * 7 + o * 12 < 0;\n  const ivl: IntervalCoordinates =\n    forceDescending || isDescending ? [-f, -o, -1] : [f, o, 1];\n  return interval(pitch(ivl)) as Interval;\n}\n\nfunction qToAlt(type: Type, q: string): number {\n  return (q === \"M\" && type === \"majorable\") ||\n    (q === \"P\" && type === \"perfectable\")\n    ? 0\n    : q === \"m\" && type === \"majorable\"\n      ? -1\n      : /^A+$/.test(q)\n        ? q.length\n        : /^d+$/.test(q)\n          ? -1 * (type === \"perfectable\" ? q.length : q.length + 1)\n          : 0;\n}\n\n// return the interval name of a pitch\nfunction pitchName(props: Pitch): string {\n  const { step, alt, oct = 0, dir } = props;\n  if (!dir) {\n    return \"\";\n  }\n  const calcNum = step + 1 + 7 * oct;\n  // this is an edge case: descending pitch class unison (see #243)\n  const num = calcNum === 0 ? step + 1 : calcNum;\n  const d = dir < 0 ? \"-\" : \"\";\n  const type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\n  const name = d + num + altToQ(type, alt);\n  return name;\n}\n\nfunction altToQ(type: Type, alt: number): Quality {\n  if (alt === 0) {\n    return type === \"majorable\" ? \"M\" : \"P\";\n  } else if (alt === -1 && type === \"majorable\") {\n    return \"m\";\n  } else if (alt > 0) {\n    return fillStr(\"A\", alt) as Quality;\n  } else {\n    return fillStr(\"d\", type === \"perfectable\" ? alt : alt + 1) as Quality;\n  }\n}\n", "import { IntervalCoordinates, NoteCoordinates } from \"@tonaljs/pitch\";\nimport { distance as dist } from \"@tonaljs/pitch-distance\";\nimport {\n  IntervalName,\n  coordToInterval,\n  interval as props,\n} from \"@tonaljs/pitch-interval\";\n\n/**\n * Get the natural list of names\n */\nexport function names(): IntervalName[] {\n  return \"1P 2M 3M 4P 5P 6m 7m\".split(\" \");\n}\n\n/**\n * Get properties of an interval\n *\n * @function\n * @example\n * Interval.get('P4') // => {\"alt\": 0,  \"dir\": 1,  \"name\": \"4P\", \"num\": 4, \"oct\": 0, \"q\": \"P\", \"semitones\": 5, \"simple\": 4, \"step\": 3, \"type\": \"perfectable\"}\n */\nexport const get = props;\n\n/**\n * Get name of an interval\n *\n * @function\n * @example\n * Interval.name('4P') // => \"4P\"\n * Interval.name('P4') // => \"4P\"\n * Interval.name('C4') // => \"\"\n */\nexport const name = (name: string) => props(name).name;\n\n/**\n * Get semitones of an interval\n * @function\n * @example\n * Interval.semitones('P4') // => 5\n */\nexport const semitones = (name: string) => props(name).semitones;\n\n/**\n * Get quality of an interval\n * @function\n * @example\n * Interval.quality('P4') // => \"P\"\n */\nexport const quality = (name: string) => props(name).q;\n\n/**\n * Get number of an interval\n * @function\n * @example\n * Interval.num('P4') // => 4\n */\nexport const num = (name: string) => props(name).num;\n\n/**\n * Get the simplified version of an interval.\n *\n * @function\n * @param {string} interval - the interval to simplify\n * @return {string} the simplified interval\n *\n * @example\n * Interval.simplify(\"9M\") // => \"2M\"\n * Interval.simplify(\"2M\") // => \"2M\"\n * Interval.simplify(\"-2M\") // => \"7m\"\n * [\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify)\n * // => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\n */\nexport function simplify(name: IntervalName): IntervalName {\n  const i = props(name);\n  return i.empty ? \"\" : i.simple + i.q;\n}\n\n/**\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\n * of an interval.\n *\n * @function\n * @param {string} interval - the interval to invert in interval shorthand\n * notation or interval array notation\n * @return {string} the inverted interval\n *\n * @example\n * Interval.invert(\"3m\") // => \"6M\"\n * Interval.invert(\"2M\") // => \"7m\"\n */\nexport function invert(name: IntervalName): IntervalName {\n  const i = props(name);\n  if (i.empty) {\n    return \"\";\n  }\n  const step = (7 - i.step) % 7;\n  const alt = i.type === \"perfectable\" ? -i.alt : -(i.alt + 1);\n  return props({ step, alt, oct: i.oct, dir: i.dir }).name;\n}\n\n// interval numbers\nconst IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\n// interval qualities\nconst IQ = \"P m M m M P d P m M m M\".split(\" \");\n\n/**\n * Get interval name from semitones number. Since there are several interval\n * names for the same number, the name it's arbitrary, but deterministic.\n *\n * @param {Integer} num - the number of semitones (can be negative)\n * @return {string} the interval name\n * @example\n * Interval.fromSemitones(7) // => \"5P\"\n * Interval.fromSemitones(-7) // => \"-5P\"\n */\nexport function fromSemitones(semitones: number): IntervalName {\n  const d = semitones < 0 ? -1 : 1;\n  const n = Math.abs(semitones);\n  const c = n % 12;\n  const o = Math.floor(n / 12);\n  return d * (IN[c] + 7 * o) + IQ[c];\n}\n\n/**\n * Find interval between two notes\n *\n * @example\n * Interval.distance(\"C4\", \"G4\"); // => \"5P\"\n */\nexport const distance = dist;\n\n/**\n * Adds two intervals\n *\n * @function\n * @param {string} interval1\n * @param {string} interval2\n * @return {string} the added interval name\n * @example\n * Interval.add(\"3m\", \"5P\") // => \"7m\"\n */\nexport const add = combinator((a, b) => [a[0] + b[0], a[1] + b[1]]);\n\n/**\n * Returns a function that adds an interval\n *\n * @function\n * @example\n * ['1P', '2M', '3M'].map(Interval.addTo('5P')) // => [\"5P\", \"6M\", \"7M\"]\n */\nexport const addTo = (interval: string) => (other: string) =>\n  add(interval, other);\n\n/**\n * Subtracts two intervals\n *\n * @function\n * @param {string} minuendInterval\n * @param {string} subtrahendInterval\n * @return {string} the subtracted interval name\n * @example\n * Interval.subtract('5P', '3M') // => '3m'\n * Interval.subtract('3M', '5P') // => '-3m'\n */\nexport const subtract = combinator((a, b) => [a[0] - b[0], a[1] - b[1]]);\n\nexport function transposeFifths(\n  interval: IntervalName,\n  fifths: number,\n): IntervalName {\n  const ivl = get(interval);\n  if (ivl.empty) return \"\";\n\n  const [nFifths, nOcts, dir] = ivl.coord;\n  return coordToInterval([nFifths + fifths, nOcts, dir]).name;\n}\n\n/** @deprecated */\nexport default {\n  names,\n  get,\n  name,\n  num,\n  semitones,\n  quality,\n  fromSemitones,\n  distance,\n  invert,\n  simplify,\n  add,\n  addTo,\n  subtract,\n  transposeFifths,\n};\n\n//// PRIVATE ////\n\ntype Operation = (\n  a: IntervalCoordinates,\n  b: IntervalCoordinates,\n) => NoteCoordinates;\n\nfunction combinator(fn: Operation) {\n  return (a: IntervalName, b: IntervalName): IntervalName | undefined => {\n    const coordA = props(a).coord;\n    const coordB = props(b).coord;\n    if (coordA && coordB) {\n      const coord = fn(coordA, coordB);\n      return coordToInterval(coord).name;\n    }\n  };\n}\n", "import { detect } from \"@tonaljs/chord-detect\";\nimport {\n  ChordType,\n  all as chordTypes,\n  get as getChordType,\n} from \"@tonaljs/chord-type\";\nimport { subtract } from \"@tonaljs/interval\";\nimport { isSubsetOf, isSupersetOf } from \"@tonaljs/pcset\";\nimport {\n  distance,\n  tonicIntervalsTransposer,\n  transpose as transposeNote,\n} from \"@tonaljs/pitch-distance\";\nimport { NoteName, note, tokenizeNote } from \"@tonaljs/pitch-note\";\nimport { all as scaleTypes } from \"@tonaljs/scale-type\";\n\nexport { detect } from \"@tonaljs/chord-detect\";\n\ntype ChordNameOrTokens =\n  | string // full name to be parsed\n  | [string] // only the name\n  | [string, string] // tonic, name\n  | [string, string, string]; // tonic, name, bass\ntype ChordNameTokens = [string, string, string]; // [TONIC, SCALE TYPE, BASS]\n\nexport interface Chord extends ChordType {\n  tonic: string | null;\n  type: string;\n  root: string;\n  bass: string;\n  rootDegree: number;\n  symbol: string;\n  notes: NoteName[];\n}\n\nconst NoChord: Chord = {\n  empty: true,\n  name: \"\",\n  symbol: \"\",\n  root: \"\",\n  bass: \"\",\n  rootDegree: 0,\n  type: \"\",\n  tonic: null,\n  setNum: NaN,\n  quality: \"Unknown\",\n  chroma: \"\",\n  normalized: \"\",\n  aliases: [],\n  notes: [],\n  intervals: [],\n};\n\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\n// (see https://github.com/danigb/tonal/issues/55)\n//const NUM_TYPES = /^(6|64|7|9|11|13)$/;\n/**\n * Tokenize a chord name. It returns an array with the tonic, chord type and bass\n * If not tonic is found, all the name is considered the chord name.\n *\n * This function does NOT check if the chord type exists or not. It only tries\n * to split the tonic and chord type.\n *\n * This function does NOT check if the bass is part of the chord or not but it\n * only accepts a pitch class as bass\n *\n * @function\n * @param {string} name - the chord name\n * @return {Array} an array with [tonic, type, bass]\n * @example\n * tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\n * tokenize(\"C7\") // => [ \"C\", \"7\" ]\n * tokenize(\"mMaj7\") // => [ null, \"mMaj7\" ]\n * tokenize(\"Cnonsense\") // => [ null, \"nonsense\" ]\n */\nexport function tokenize(name: string): ChordNameTokens {\n  const [letter, acc, oct, type] = tokenizeNote(name);\n  if (letter === \"\") {\n    return tokenizeBass(\"\", name);\n  } else if (letter === \"A\" && type === \"ug\") {\n    return tokenizeBass(\"\", \"aug\");\n  } else {\n    return tokenizeBass(letter + acc, oct + type);\n  }\n}\n\nfunction tokenizeBass(note: string, chord: string): ChordNameTokens {\n  const split = chord.split(\"/\");\n  if (split.length === 1) {\n    return [note, split[0], \"\"];\n  }\n  const [letter, acc, oct, type] = tokenizeNote(split[1]);\n  // Only a pitch class is accepted as bass note\n  if (letter !== \"\" && oct === \"\" && type === \"\") {\n    return [note, split[0], letter + acc];\n  } else {\n    return [note, chord, \"\"];\n  }\n}\n\n/**\n * Get a Chord from a chord name.\n */\nexport function get(src: ChordNameOrTokens): Chord {\n  if (Array.isArray(src)) {\n    return getChord(src[1] || \"\", src[0], src[2]);\n  } else if (src === \"\") {\n    return NoChord;\n  } else {\n    const [tonic, type, bass] = tokenize(src);\n    const chord = getChord(type, tonic, bass);\n    return chord.empty ? getChord(src) : chord;\n  }\n}\n\n/**\n * Get chord properties\n *\n * @param typeName - the chord type name\n * @param [tonic] - Optional tonic\n * @param [root]  - Optional root (requires a tonic)\n */\nexport function getChord(\n  typeName: string,\n  optionalTonic?: string,\n  optionalBass?: string,\n): Chord {\n  const type = getChordType(typeName);\n  const tonic = note(optionalTonic || \"\");\n  const bass = note(optionalBass || \"\");\n\n  if (\n    type.empty ||\n    (optionalTonic && tonic.empty) ||\n    (optionalBass && bass.empty)\n  ) {\n    return NoChord;\n  }\n\n  const bassInterval = distance(tonic.pc, bass.pc);\n  const bassIndex = type.intervals.indexOf(bassInterval);\n  const hasRoot = bassIndex >= 0;\n  const root = hasRoot ? bass : note(\"\");\n  const rootDegree = bassIndex === -1 ? NaN : bassIndex + 1;\n  const hasBass = bass.pc && bass.pc !== tonic.pc;\n\n  const intervals = Array.from(type.intervals);\n\n  if (hasRoot) {\n    for (let i = 1; i < rootDegree; i++) {\n      const num = intervals[0][0];\n      const quality = intervals[0][1];\n      const newNum = parseInt(num, 10) + 7;\n      intervals.push(`${newNum}${quality}`);\n      intervals.shift();\n    }\n  } else if (hasBass) {\n    const ivl = subtract(distance(tonic.pc, bass.pc), \"8P\");\n    if (ivl) intervals.unshift(ivl);\n  }\n\n  const notes = tonic.empty\n    ? []\n    : intervals.map((i) => transposeNote(tonic.pc, i));\n\n  typeName = type.aliases.indexOf(typeName) !== -1 ? typeName : type.aliases[0];\n  const symbol = `${tonic.empty ? \"\" : tonic.pc}${typeName}${\n    hasRoot && rootDegree > 1 ? \"/\" + root.pc : hasBass ? \"/\" + bass.pc : \"\"\n  }`;\n  const name = `${optionalTonic ? tonic.pc + \" \" : \"\"}${type.name}${\n    hasRoot && rootDegree > 1\n      ? \" over \" + root.pc\n      : hasBass\n        ? \" over \" + bass.pc\n        : \"\"\n  }`;\n  return {\n    ...type,\n    name,\n    symbol,\n    tonic: tonic.pc,\n    type: type.name,\n    root: root.pc,\n    bass: hasBass ? bass.pc : \"\",\n    intervals,\n    rootDegree,\n    notes,\n  };\n}\n\nexport const chord = get;\n\n/**\n * Transpose a chord name\n *\n * @param {string} chordName - the chord name\n * @return {string} the transposed chord\n *\n * @example\n * transpose('Dm7', 'P4') // => 'Gm7\n */\nexport function transpose(chordName: string, interval: string): string {\n  const [tonic, type, bass] = tokenize(chordName);\n  if (!tonic) {\n    return chordName;\n  }\n  const tr = transposeNote(bass, interval);\n  const slash = tr ? \"/\" + tr : \"\";\n  return transposeNote(tonic, interval) + type + slash;\n}\n\n/**\n * Get all scales where the given chord fits\n *\n * @example\n * chordScales('C7b9')\n * // => [\"phrygian dominant\", \"flamenco\", \"spanish heptatonic\", \"half-whole diminished\", \"chromatic\"]\n */\nexport function chordScales(name: string): string[] {\n  const s = get(name);\n  const isChordIncluded = isSupersetOf(s.chroma);\n  return scaleTypes()\n    .filter((scale) => isChordIncluded(scale.chroma))\n    .map((scale) => scale.name);\n}\n/**\n * Get all chords names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @example\n * extended(\"CMaj7\")\n * // => [ 'Cmaj#4', 'Cmaj7#9#11', 'Cmaj9', 'CM7add13', 'Cmaj13', 'Cmaj9#11', 'CM13#11', 'CM7b9' ]\n */\nexport function extended(chordName: string): string[] {\n  const s = get(chordName);\n  const isSuperset = isSupersetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => isSuperset(chord.chroma))\n    .map((chord) => s.tonic + chord.aliases[0]);\n}\n\n/**\n * Find all chords names that are a subset of the given one\n * (has less notes but all from the given chord)\n *\n * @example\n */\nexport function reduced(chordName: string): string[] {\n  const s = get(chordName);\n  const isSubset = isSubsetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => isSubset(chord.chroma))\n    .map((chord) => s.tonic + chord.aliases[0]);\n}\n\n/**\n * Return the chord notes\n */\nexport function notes(chordName: ChordNameOrTokens, tonic?: string): string[] {\n  const chord = get(chordName);\n  const note = tonic || chord.tonic;\n  if (!note || chord.empty) return [];\n  return chord.intervals.map((ivl) => transposeNote(note, ivl));\n}\n\n/**\n * Returns a function to get a note name from the scale degree.\n *\n * @example\n * [1, 2, 3, 4].map(Chord.degrees(\"C\")) => [\"C\", \"E\", \"G\", \"C\"]\n * [1, 2, 3, 4].map(Chord.degrees(\"C4\")) => [\"C4\", \"E4\", \"G4\", \"C5\"]\n */\nexport function degrees(chordName: ChordNameOrTokens, tonic?: string) {\n  const chord = get(chordName);\n  const note = tonic || chord.tonic;\n  const transpose = tonicIntervalsTransposer(chord.intervals, note);\n  return (degree: number) =>\n    degree ? transpose(degree > 0 ? degree - 1 : degree) : \"\";\n}\n\n/**\n * Sames as `degree` but with 0-based index\n */\nexport function steps(chordName: ChordNameOrTokens, tonic?: string) {\n  const chord = get(chordName);\n  const note = tonic || chord.tonic;\n  return tonicIntervalsTransposer(chord.intervals, note);\n}\n\n/** @deprecated */\nexport default {\n  getChord,\n  get,\n  detect,\n  chordScales,\n  extended,\n  reduced,\n  tokenize,\n  transpose,\n  degrees,\n  steps,\n  notes,\n  chord,\n};\n", "export interface NamedPitch {\n  readonly name: string;\n}\n\n/*** @deprecated use NamedPitch */\nexport interface Named {\n  readonly name: string;\n}\n\nexport interface NotFound extends NamedPitch {\n  readonly empty: true;\n  readonly name: \"\";\n}\n\nexport function isNamedPitch(src: unknown): src is NamedPitch {\n  return src !== null &&\n    typeof src === \"object\" &&\n    \"name\" in src &&\n    typeof src.name === \"string\"\n    ? true\n    : false;\n}\n\ntype Fifths = number;\ntype Octaves = number;\nexport type Direction = 1 | -1;\n\nexport type PitchClassCoordinates = [Fifths];\nexport type NoteCoordinates = [Fifths, Octaves];\nexport type IntervalCoordinates = [Fifths, Octaves, Direction];\nexport type PitchCoordinates =\n  | PitchClassCoordinates\n  | NoteCoordinates\n  | IntervalCoordinates;\n\n/**\n * Pitch properties\n *\n * - {number} step - The step number: 0 = C, 1 = D, ... 6 = B\n * - {number} alt - Number of alterations: -2 = 'bb', -1 = 'b', 0 = '', 1 = '#', ...\n * - {number} [oct] = The octave (undefined when is a coord class)\n * - {number} [dir] = Interval direction (undefined when is not an interval)\n */\nexport interface Pitch {\n  readonly step: number;\n  readonly alt: number;\n  readonly oct?: number; // undefined for pitch classes\n  readonly dir?: Direction; // undefined for notes\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nexport const chroma = ({ step, alt }: Pitch) => (SIZES[step] + alt + 120) % 12;\n\nexport const height = ({ step, alt, oct, dir = 1 }: Pitch) =>\n  dir * (SIZES[step] + alt + 12 * (oct === undefined ? -100 : oct));\n\nexport const midi = (pitch: Pitch) => {\n  const h = height(pitch);\n  return pitch.oct !== undefined && h >= -12 && h <= 115 ? h + 12 : null;\n};\n\nexport function isPitch(pitch: unknown): pitch is Pitch {\n  return pitch !== null &&\n    typeof pitch === \"object\" &&\n    \"step\" in pitch &&\n    typeof pitch.step === \"number\" &&\n    \"alt\" in pitch &&\n    typeof pitch.alt === \"number\" &&\n    !isNaN(pitch.step) &&\n    !isNaN(pitch.alt)\n    ? true\n    : false;\n}\n\n// The number of fifths of [C, D, E, F, G, A, B]\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n// The number of octaves it span each step\nconst STEPS_TO_OCTS = FIFTHS.map((fifths: number) =>\n  Math.floor((fifths * 7) / 12),\n);\n\n/**\n * Get coordinates from pitch object\n */\nexport function coordinates(pitch: Pitch): PitchCoordinates {\n  const { step, alt, oct, dir = 1 } = pitch;\n  const f = FIFTHS[step] + 7 * alt;\n  if (oct === undefined) {\n    return [dir * f];\n  }\n  const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n}\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\nconst FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n/**\n * Get pitch from coordinate objects\n */\nexport function pitch(coord: PitchCoordinates): Pitch {\n  const [f, o, dir] = coord;\n  const step = FIFTHS_TO_STEPS[unaltered(f)];\n  const alt = Math.floor((f + 1) / 7);\n  if (o === undefined) {\n    return { step, alt, dir };\n  }\n  const oct = o + 4 * alt + STEPS_TO_OCTS[step];\n  return { step, alt, oct, dir };\n}\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f: number): number {\n  const i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n", "import {\n  coordinates,\n  Direction,\n  IntervalCoordinates,\n  isNamedPitch,\n  isPitch,\n  NamedPitch,\n  Pitch,\n  pitch,\n  PitchCoordinates,\n} from \"@tonaljs/pitch\";\n\nconst fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport type IntervalName = string;\nexport type IntervalLiteral = IntervalName | Pitch | NamedPitch;\n\ntype Quality =\n  | \"dddd\"\n  | \"ddd\"\n  | \"dd\"\n  | \"d\"\n  | \"m\"\n  | \"M\"\n  | \"P\"\n  | \"A\"\n  | \"AA\"\n  | \"AAA\"\n  | \"AAAA\";\ntype Type = \"perfectable\" | \"majorable\";\n\nexport interface Interval extends Pitch, NamedPitch {\n  readonly empty: boolean;\n  readonly name: IntervalName;\n  readonly num: number;\n  readonly q: Quality;\n  readonly type: Type;\n  readonly step: number;\n  readonly alt: number;\n  readonly dir: Direction;\n  readonly simple: number;\n  readonly semitones: number;\n  readonly chroma: number;\n  readonly coord: IntervalCoordinates;\n  readonly oct: number;\n}\n\nconst NoInterval: Interval = Object.freeze({\n  empty: true,\n  name: \"\",\n  num: NaN,\n  q: \"\" as Quality,\n  type: \"\" as Type,\n  step: NaN,\n  alt: NaN,\n  dir: NaN as Direction,\n  simple: NaN,\n  semitones: NaN,\n  chroma: NaN,\n  coord: [] as unknown as IntervalCoordinates,\n  oct: NaN,\n});\n\n// shorthand tonal notation (with quality after number)\nconst INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\n// standard shorthand notation (with quality before number)\nconst INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nconst REGEX = new RegExp(\n  \"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\",\n);\n\ntype IntervalTokens = [string, string];\n\n/**\n * @private\n */\nexport function tokenizeInterval(str?: IntervalName): IntervalTokens {\n  const m = REGEX.exec(`${str}`);\n  if (m === null) {\n    return [\"\", \"\"];\n  }\n  return m[1] ? [m[1], m[2]] : [m[4], m[3]];\n}\n\nconst cache: { [key in string]: Interval } = {};\n\n/**\n * Get interval properties. It returns an object with:\n *\n * - name: the interval name\n * - num: the interval number\n * - type: 'perfectable' or 'majorable'\n * - q: the interval quality (d, m, M, A)\n * - dir: interval direction (1 ascending, -1 descending)\n * - simple: the simplified number\n * - semitones: the size in semitones\n * - chroma: the interval chroma\n *\n * @param {string} interval - the interval name\n * @return {Object} the interval properties\n *\n * @example\n * import { interval } from '@tonaljs/core'\n * interval('P5').semitones // => 7\n * interval('m3').type // => 'majorable'\n */\nexport function interval(src: IntervalLiteral): Interval {\n  return typeof src === \"string\"\n    ? cache[src] || (cache[src] = parse(src))\n    : isPitch(src)\n      ? interval(pitchName(src))\n      : isNamedPitch(src)\n        ? interval(src.name)\n        : NoInterval;\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nconst TYPES = \"PMMPPMM\";\nfunction parse(str?: string): Interval {\n  const tokens = tokenizeInterval(str);\n  if (tokens[0] === \"\") {\n    return NoInterval;\n  }\n  const num = +tokens[0];\n  const q = tokens[1] as Quality;\n  const step = (Math.abs(num) - 1) % 7;\n  const t = TYPES[step];\n  if (t === \"M\" && q === \"P\") {\n    return NoInterval;\n  }\n  const type = t === \"M\" ? \"majorable\" : \"perfectable\";\n\n  const name = \"\" + num + q;\n  const dir = num < 0 ? -1 : 1;\n  const simple = num === 8 || num === -8 ? num : dir * (step + 1);\n  const alt = qToAlt(type, q);\n  const oct = Math.floor((Math.abs(num) - 1) / 7);\n  const semitones = dir * (SIZES[step] + alt + 12 * oct);\n  const chroma = (((dir * (SIZES[step] + alt)) % 12) + 12) % 12;\n  const coord = coordinates({ step, alt, oct, dir }) as IntervalCoordinates;\n  return {\n    empty: false,\n    name,\n    num,\n    q,\n    step,\n    alt,\n    dir,\n    type,\n    simple,\n    semitones,\n    chroma,\n    coord,\n    oct,\n  };\n}\n\n/**\n * @private\n *\n * forceDescending is used in the case of unison (#243)\n */\nexport function coordToInterval(\n  coord: PitchCoordinates,\n  forceDescending?: boolean,\n): Interval {\n  const [f, o = 0] = coord;\n  const isDescending = f * 7 + o * 12 < 0;\n  const ivl: IntervalCoordinates =\n    forceDescending || isDescending ? [-f, -o, -1] : [f, o, 1];\n  return interval(pitch(ivl)) as Interval;\n}\n\nfunction qToAlt(type: Type, q: string): number {\n  return (q === \"M\" && type === \"majorable\") ||\n    (q === \"P\" && type === \"perfectable\")\n    ? 0\n    : q === \"m\" && type === \"majorable\"\n      ? -1\n      : /^A+$/.test(q)\n        ? q.length\n        : /^d+$/.test(q)\n          ? -1 * (type === \"perfectable\" ? q.length : q.length + 1)\n          : 0;\n}\n\n// return the interval name of a pitch\nfunction pitchName(props: Pitch): string {\n  const { step, alt, oct = 0, dir } = props;\n  if (!dir) {\n    return \"\";\n  }\n  const calcNum = step + 1 + 7 * oct;\n  // this is an edge case: descending pitch class unison (see #243)\n  const num = calcNum === 0 ? step + 1 : calcNum;\n  const d = dir < 0 ? \"-\" : \"\";\n  const type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\n  const name = d + num + altToQ(type, alt);\n  return name;\n}\n\nfunction altToQ(type: Type, alt: number): Quality {\n  if (alt === 0) {\n    return type === \"majorable\" ? \"M\" : \"P\";\n  } else if (alt === -1 && type === \"majorable\") {\n    return \"m\";\n  } else if (alt > 0) {\n    return fillStr(\"A\", alt) as Quality;\n  } else {\n    return fillStr(\"d\", type === \"perfectable\" ? alt : alt + 1) as Quality;\n  }\n}\n", "import { tokenize } from \"@tonaljs/chord\";\nimport { distance, transpose } from \"@tonaljs/pitch-distance\";\nimport { interval } from \"@tonaljs/pitch-interval\";\nimport { NoteLiteral } from \"@tonaljs/pitch-note\";\nimport { get as romanNumeral } from \"@tonaljs/roman-numeral\";\n\n/**\n * Given a tonic and a chord list expressed with roman numeral notation\n * returns the progression expressed with leadsheet chords symbols notation\n * @example\n * fromRomanNumerals(\"C\", [\"I\", \"IIm7\", \"V7\"]);\n * // => [\"C\", \"Dm7\", \"G7\"]\n */\nexport function fromRomanNumerals(\n  tonic: NoteLiteral,\n  chords: string[],\n): string[] {\n  const romanNumerals = chords.map(romanNumeral);\n  return romanNumerals.map(\n    (rn) => transpose(tonic, interval(rn)) + rn.chordType,\n  );\n}\n\n/**\n * Given a tonic and a chord list with leadsheet symbols notation,\n * return the chord list with roman numeral notation\n * @example\n * toRomanNumerals(\"C\", [\"CMaj7\", \"Dm7\", \"G7\"]);\n * // => [\"IMaj7\", \"IIm7\", \"V7\"]\n */\nexport function toRomanNumerals(\n  tonic: NoteLiteral,\n  chords: string[],\n): string[] {\n  return chords.map((chord) => {\n    const [note, chordType] = tokenize(chord);\n    const intervalName = distance(tonic, note);\n    const roman = romanNumeral(interval(intervalName));\n    return roman.name + chordType;\n  });\n}\n\n/** @deprecated */\nexport default { fromRomanNumerals, toRomanNumerals };\n", "import { compact, range } from \"@tonaljs/collection\";\nimport { midiToNoteName, toMidi, ToNoteNameOptions } from \"@tonaljs/midi\";\n\n/**\n * Create a numeric range. You supply a list of notes or numbers and it will\n * be connected to create complex ranges.\n *\n * @param {Array} notes - the list of notes or midi numbers used\n * @return {Array} an array of numbers or empty array if not valid parameters\n *\n * @example\n * numeric([\"C5\", \"C4\"]) // => [ 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60 ]\n * // it works midi notes\n * numeric([10, 5]) // => [ 10, 9, 8, 7, 6, 5 ]\n * // complex range\n * numeric([\"C4\", \"E4\", \"Bb3\"]) // => [60, 61, 62, 63, 64, 63, 62, 61, 60, 59, 58]\n */\nexport function numeric(notes: (string | number)[]): number[] {\n  const midi: number[] = compact(\n    notes.map((note) => (typeof note === \"number\" ? note : toMidi(note))),\n  );\n  if (!notes.length || midi.length !== notes.length) {\n    // there is no valid notes\n    return [];\n  }\n\n  return midi.reduce(\n    (result, note) => {\n      const last: number = result[result.length - 1];\n      return result.concat(range(last, note).slice(1));\n    },\n    [midi[0]],\n  );\n}\n\n/**\n * Create a range of chromatic notes. The altered notes will use flats.\n *\n * @function\n * @param {Array} notes - the list of notes or midi note numbers to create a range from\n * @param {Object} options - The same as `midiToNoteName` (`{ sharps: boolean, pitchClass: boolean }`)\n * @return {Array} an array of note names\n *\n * @example\n * Range.chromatic([\"C2, \"E2\", \"D2\"]) // => [\"C2\", \"Db2\", \"D2\", \"Eb2\", \"E2\", \"Eb2\", \"D2\"]\n * // with sharps\n * Range.chromatic([\"C2\", \"C3\"], { sharps: true }) // => [ \"C2\", \"C#2\", \"D2\", \"D#2\", \"E2\", \"F2\", \"F#2\", \"G2\", \"G#2\", \"A2\", \"A#2\", \"B2\", \"C3\" ]\n */\nexport function chromatic(\n  notes: (string | number)[],\n  options?: ToNoteNameOptions,\n): string[] {\n  return numeric(notes).map((midi) => midiToNoteName(midi, options));\n}\n\n/** @deprecated */\nexport default { numeric, chromatic };\n", "// TYPES: PARSING\nexport type TimeSignatureLiteral = string | [number, number] | [string, string];\ntype ParsedTimeSignature = [number | number[], number];\n\n// TYPES: PROPERTIES\nexport type ValidTimeSignature = {\n  readonly empty: false;\n  readonly name: string;\n  readonly upper: number | number[];\n  readonly lower: number;\n  readonly type: \"simple\" | \"compound\" | \"irregular\" | \"irrational\";\n  readonly additive: number[];\n};\n\nexport type InvalidTimeSignature = {\n  readonly empty: true;\n  readonly name: \"\";\n  readonly upper: undefined;\n  readonly lower: undefined;\n  readonly type: undefined;\n  readonly additive: [];\n};\n\nexport type TimeSignature = ValidTimeSignature | InvalidTimeSignature;\n\n// CONSTANTS\nconst NONE: InvalidTimeSignature = {\n  empty: true,\n  name: \"\",\n  upper: undefined,\n  lower: undefined,\n  type: undefined,\n  additive: [],\n};\n\nconst NAMES = [\"4/4\", \"3/4\", \"2/4\", \"2/2\", \"12/8\", \"9/8\", \"6/8\", \"3/8\"];\n\n// PUBLIC API\n\nexport function names() {\n  return NAMES.slice();\n}\n\nconst REGEX = /^(\\d*\\d(?:\\+\\d)*)\\/(\\d+)$/;\nconst CACHE = new Map<TimeSignatureLiteral, TimeSignature>();\n\nexport function get(literal: TimeSignatureLiteral): TimeSignature {\n  const stringifiedLiteral = JSON.stringify(literal);\n  const cached = CACHE.get(stringifiedLiteral);\n  if (cached) {\n    return cached;\n  }\n\n  const ts = build(parse(literal));\n  CACHE.set(stringifiedLiteral, ts);\n  return ts;\n}\n\nexport function parse(literal: TimeSignatureLiteral): ParsedTimeSignature {\n  if (typeof literal === \"string\") {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, up, low] = REGEX.exec(literal) || [];\n    return parse([up, low]);\n  }\n\n  const [up, down] = literal;\n  const denominator = +down;\n  if (typeof up === \"number\") {\n    return [up, denominator];\n  }\n\n  const list = up.split(\"+\").map((n) => +n);\n  return list.length === 1 ? [list[0], denominator] : [list, denominator];\n}\n\n/** @deprecated */\nexport default { names, parse, get };\n\n// PRIVATE\n\nconst isPowerOfTwo = (x: number) => (Math.log(x) / Math.log(2)) % 1 === 0;\n\nfunction build([up, down]: ParsedTimeSignature): TimeSignature {\n  const upper = Array.isArray(up) ? up.reduce((a, b) => a + b, 0) : up;\n  const lower = down;\n  if (upper === 0 || lower === 0) {\n    return NONE;\n  }\n\n  const name = Array.isArray(up) ? `${up.join(\"+\")}/${down}` : `${up}/${down}`;\n  const additive = Array.isArray(up) ? up : [];\n  const type =\n    lower === 4 || lower === 2\n      ? \"simple\"\n      : lower === 8 && upper % 3 === 0\n        ? \"compound\"\n        : isPowerOfTwo(lower)\n          ? \"irregular\"\n          : \"irrational\";\n\n  return {\n    empty: false,\n    name,\n    type,\n    upper,\n    lower,\n    additive,\n  };\n}\n", "import AbcNotation from \"@tonaljs/abc-notation\";\nimport * as Array from \"@tonaljs/array\";\nimport Chord from \"@tonaljs/chord\";\nimport ChordType from \"@tonaljs/chord-type\";\nimport Collection from \"@tonaljs/collection\";\nimport * as Core from \"@tonaljs/core\";\nimport DurationValue from \"@tonaljs/duration-value\";\nimport Interval from \"@tonaljs/interval\";\nimport Key from \"@tonaljs/key\";\nimport Midi from \"@tonaljs/midi\";\nimport Mode from \"@tonaljs/mode\";\nimport Note from \"@tonaljs/note\";\nimport Pcset from \"@tonaljs/pcset\";\nimport Progression from \"@tonaljs/progression\";\nimport Range from \"@tonaljs/range\";\nimport RomanNumeral from \"@tonaljs/roman-numeral\";\nimport Scale from \"@tonaljs/scale\";\nimport ScaleType from \"@tonaljs/scale-type\";\nimport TimeSignature from \"@tonaljs/time-signature\";\n\nexport * from \"@tonaljs/core\";\n\n// deprecated (backwards compatibility)\nconst Tonal = Core;\nconst PcSet = Pcset;\nconst ChordDictionary = ChordType;\nconst ScaleDictionary = ScaleType;\n\nexport {\n  AbcNotation,\n  Array,\n  Chord,\n  ChordType,\n  Collection,\n  Core,\n  DurationValue,\n  Note,\n  Interval,\n  Key,\n  Midi,\n  Mode,\n  Pcset,\n  Progression,\n  Range,\n  RomanNumeral,\n  Scale,\n  ScaleType,\n  TimeSignature,\n  // backwards API compatibility (3.0)\n  Tonal,\n  PcSet,\n  ChordDictionary,\n  ScaleDictionary,\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAM,UAAU,CAAC,WAAmB,UAClC,MAAM,QAAQ,CAAC,EAAE,KAAK,SAAS;AAEjC,IAAM,QAAQ;AAIP,SAAS,SAAS,KAAwB;AAC/C,QAAM,IAAI,MAAM,KAAK,GAAG;AACxB,MAAI,CAAC,GAAG;AACN,WAAO,CAAC,IAAI,IAAI,EAAE;EACpB;AACA,SAAO,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC1B;AAQO,SAAS,wBAAwB,KAAqB;AAC3D,QAAM,CAAC,KAAK,QAAQ,GAAG,IAAI,SAAS,GAAG;AACvC,MAAI,WAAW,IAAI;AACjB,WAAO;EACT;AACA,MAAI,IAAI;AACR,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,SAAK,IAAI,OAAO,CAAC,MAAM,MAAM,KAAK;EACpC;AACA,QAAM,IACJ,IAAI,CAAC,MAAM,MACP,IAAI,QAAQ,MAAM,GAAG,IACrB,IAAI,CAAC,MAAM,MACT,IAAI,QAAQ,OAAO,GAAG,IACtB;AACR,SAAO,OAAO,WAAW,CAAC,IAAI,KAC1B,OAAO,YAAY,IAAI,KAAK,IAAI,KAChC,SAAS,IAAI;AACnB;AAQO,SAAS,wBAAwB,KAAqB;AAC3D,QAAM,IAAI,KAAK,GAAG;AAClB,MAAI,EAAE,SAAU,CAAC,EAAE,OAAO,EAAE,QAAQ,GAAI;AACtC,WAAO;EACT;AACA,QAAM,EAAE,QAAQ,KAAK,IAAI,IAAI;AAC7B,QAAM,IAAI,IAAI,CAAC,MAAM,MAAM,IAAI,QAAQ,MAAM,GAAG,IAAI,IAAI,QAAQ,MAAM,GAAG;AACzE,QAAM,IAAI,MAAM,IAAI,OAAO,YAAY,IAAI;AAC3C,QAAM,IACJ,QAAQ,IAAI,KAAK,MAAM,IAAI,QAAQ,KAAK,MAAM,CAAC,IAAI,QAAQ,KAAK,IAAI,GAAG;AACzE,SAAO,IAAI,IAAI;AACjB;AAEO,SAASA,WAAUC,QAAcC,WAA0B;AAChE,SAAO,wBAAwB,UAAG,wBAAwBD,MAAI,GAAGC,SAAQ,CAAC;AAC5E;AAEO,SAASC,UAAS,MAAc,IAAoB;AACzD,SAAO,SAAK,wBAAwB,IAAI,GAAG,wBAAwB,EAAE,CAAC;AACxE;AAGA,IAAO,uBAAQ;EACb;EACA;EACA;EACA,WAAAH;EACA,UAAAG;AACF;;;;;;;;;;;;;AC1EA,SAAS,KAAK,GAAW,GAAW;AAClC,QAAM,IAAI,CAAC;AAEX,SAAO,KAAK,EAAE,CAAC,IAAI,IAAI;AAAE;AACzB,SAAO;AACT;AAEA,SAAS,MAAM,GAAW,GAAW;AACnC,QAAM,IAAI,CAAC;AAEX,SAAO,KAAK,EAAE,CAAC,IAAI,IAAI;AAAE;AACzB,SAAO;AACT;AAaO,SAASC,OAAM,MAAc,IAAsB;AACxD,SAAO,OAAO,KAAK,KAAK,MAAM,KAAK,OAAO,CAAC,IAAI,MAAM,MAAM,OAAO,KAAK,CAAC;AAC1E;AAaO,SAASC,QAAU,OAAe,KAAe;AACtD,QAAM,MAAM,IAAI;AAChB,QAAM,KAAM,QAAQ,MAAO,OAAO;AAClC,SAAO,IAAI,MAAM,GAAG,GAAG,EAAE,OAAO,IAAI,MAAM,GAAG,CAAC,CAAC;AACjD;AAWO,SAASC,SAAQ,KAAmB;AACzC,SAAO,IAAI,OAAO,CAAC,MAAM,MAAM,KAAK,CAAC;AACvC;AAeO,SAAS,gBAAgBC,QAA2B;AACzD,QAAM,QAAQA,OAAM,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,KAAK;AAC9D,SAAO,MAAM,KAAK,CAAC,GAAG,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI;AACpE;AAcO,SAAS,oBAAoB,KAAyB;AAC3D,SAAO,gBAAgB,GAAG,EAAE,OAAO,CAAC,GAAG,GAAG,MAAM,MAAM,KAAK,MAAM,EAAE,IAAI,CAAC,CAAC;AAC3E;AAYO,SAAS,QAAQ,KAAY,MAAM,KAAK,QAAe;AAC5D,MAAI;AACJ,MAAI;AACJ,MAAI,IAAY,IAAI;AACpB,SAAO,GAAG;AACR,QAAI,KAAK,MAAM,IAAI,IAAI,GAAG;AAC1B,QAAI,IAAI,CAAC;AACT,QAAI,CAAC,IAAI,IAAI,CAAC;AACd,QAAI,CAAC,IAAI;EACX;AACA,SAAO;AACT;AAkBO,SAAS,aAAa,KAAmB;AAC9C,MAAI,IAAI,WAAW,GAAG;AACpB,WAAO,CAAC,CAAC,CAAC;EACZ;AACA,SAAO,aAAa,IAAI,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,SAAS;AACtD,WAAO,IAAI;MACT,IAAI,IAAI,CAAC,GAAG,QAAQ;AAClB,cAAM,UAAU,KAAK,MAAM;AAC3B,gBAAQ,OAAO,KAAK,GAAG,IAAI,CAAC,CAAC;AAC7B,eAAO;MACT,CAAC;IACH;EACF,GAAG,CAAC,CAAC;AACP;;;AE/IA,IAAM,SAAqB;;EAEzB,CAAC,YAAY,SAAS,UAAU;EAChC,CAAC,eAAe,iBAAiB,uBAAuB;EACxD,CAAC,kBAAkB,eAAe,YAAY;EAC9C,CAAC,sBAAsB,oBAAoB,iBAAiB;EAC5D,CAAC,eAAe,SAAS,iBAAiB;EAC1C,CAAC,kBAAkB,qBAAqB,kBAAkB;EAC1D,CAAC,eAAe,4BAA4B,WAAW;EACvD;IACE;IACA;IACA;EACF;;;EAGA,CAAC,YAAY,SAAS,SAAS;EAC/B,CAAC,eAAe,iBAAiB,gBAAgB;EACjD;IACE;IACA;IACA;EACF;EACA,CAAC,eAAe,eAAe,OAAO;EACtC,CAAC,kBAAkB,eAAe,OAAO;EACzC,CAAC,kBAAkB,qBAAqB,eAAe;EACvD,CAAC,sBAAsB,kBAAkB,SAAS;EAClD,CAAC,sBAAsB,oBAAoB,SAAS;;EAEpD,CAAC,YAAY,cAAc,SAAS;EACpC,CAAC,eAAe,sBAAsB,YAAY;EAClD,CAAC,eAAe,mBAAmB,kBAAkB;;;EAGrD,CAAC,eAAe,oBAAoB,OAAO;EAC3C,CAAC,kBAAkB,kBAAkB,GAAG;EACxC,CAAC,sBAAsB,uBAAuB,IAAI;EAClD,CAAC,mBAAmB,2BAA2B,UAAU;;EAEzD,CAAC,kBAAkB,uBAAuB,KAAK;EAC/C,CAAC,kBAAkB,wBAAwB,KAAK;EAChD,CAAC,eAAe,WAAW,MAAM;;EAEjC,CAAC,YAAY,oBAAoB,UAAU;EAC3C,CAAC,YAAY,oBAAoB,MAAM;EACvC,CAAC,eAAe,4BAA4B,YAAY;EACxD,CAAC,mBAAmB,YAAY,IAAI;EACpC;IACE;IACA;IACA;EACF;;EAEA,CAAC,SAAS,SAAS,GAAG;EACtB,CAAC,YAAY,aAAa,cAAc;EACxC,CAAC,YAAY,mBAAmB,YAAY;EAC5C,CAAC,eAAe,qBAAqB,0BAA0B;EAC/D;IACE;IACA;IACA;EACF;;EAEA,CAAC,eAAe,IAAI,gBAAgB;EACpC,CAAC,kBAAkB,IAAI,eAAe;EACtC,CAAC,eAAe,IAAI,qBAAqB;EACzC,CAAC,kBAAkB,IAAI,kBAAkB;EACzC,CAAC,kBAAkB,IAAI,QAAQ;EAC/B,CAAC,sBAAsB,IAAI,QAAQ;EACnC,CAAC,kBAAkB,IAAI,aAAa;EACpC,CAAC,sBAAsB,IAAI,UAAU;EACrC,CAAC,eAAe,IAAI,QAAQ;EAC5B,CAAC,eAAe,IAAI,eAAe;EACnC,CAAC,mBAAmB,IAAI,qBAAqB;EAC7C,CAAC,qBAAqB,IAAI,SAAS;EACnC,CAAC,sBAAsB,IAAI,OAAO;EAClC,CAAC,kBAAkB,IAAI,SAAS;EAChC,CAAC,kBAAkB,IAAI,KAAK;EAC5B,CAAC,sBAAsB,IAAI,WAAW;EACtC,CAAC,0BAA0B,IAAI,6BAA6B;EAC5D,CAAC,kBAAkB,IAAI,MAAM;EAC7B,CAAC,uBAAuB,IAAI,gBAAgB;EAC5C,CAAC,mBAAmB,IAAI,iBAAiB;EACzC,CAAC,sBAAsB,IAAI,oBAAoB;EAC/C,CAAC,0BAA0B,IAAI,SAAS;EACxC,CAAC,0BAA0B,IAAI,WAAW;EAC1C,CAAC,sBAAsB,IAAI,MAAM;EACjC,CAAC,sBAAsB,IAAI,QAAQ;EACnC,CAAC,sBAAsB,IAAI,cAAc;EACzC,CAAC,0BAA0B,IAAI,iBAAiB;EAChD,CAAC,0BAA0B,IAAI,gBAAgB;EAC/C,CAAC,sBAAsB,IAAI,oBAAoB;EAC/C,CAAC,0BAA0B,IAAI,SAAS;EACxC,CAAC,0BAA0B,IAAI,8BAA8B;EAC7D,CAAC,sBAAsB,IAAI,MAAM;EACjC,CAAC,sBAAsB,IAAI,QAAQ;EACnC,CAAC,qBAAqB,IAAI,OAAO;EACjC,CAAC,eAAe,IAAI,mBAAmB;EACvC,CAAC,eAAe,IAAI,QAAQ;EAC5B,CAAC,YAAY,IAAI,KAAK;EACtB,CAAC,qBAAqB,IAAI,MAAM;EAChC,CAAC,eAAe,IAAI,MAAM;EAC1B,CAAC,kBAAkB,IAAI,MAAM;EAC7B,CAAC,eAAe,IAAI,KAAK;EACzB,CAAC,kBAAkB,IAAI,KAAK;EAC5B,CAAC,YAAY,IAAI,MAAM;EACvB,CAAC,gBAAgB,IAAI,MAAM;EAC3B,CAAC,eAAe,IAAI,MAAM;EAC1B,CAAC,mBAAmB,IAAI,OAAO;EAC/B,CAAC,mBAAmB,IAAI,MAAM;EAC9B,CAAC,eAAe,IAAI,OAAO;EAC3B,CAAC,kBAAkB,IAAI,SAAS;EAChC,CAAC,qBAAqB,IAAI,SAAS;EACnC,CAAC,mBAAmB,IAAI,gBAAgB;EACxC,CAAC,eAAe,IAAI,OAAO;EAC3B,CAAC,kBAAkB,IAAI,MAAM;EAC7B,CAAC,eAAe,IAAI,KAAK;EACzB,CAAC,eAAe,IAAI,OAAO;EAC3B,CAAC,eAAe,IAAI,MAAM;EAC1B,CAAC,kBAAkB,IAAI,MAAM;EAC7B,CAAC,sBAAsB,IAAI,MAAM;EACjC,CAAC,eAAe,IAAI,OAAO;EAC3B,CAAC,kBAAkB,IAAI,MAAM;EAC7B,CAAC,eAAe,IAAI,UAAU;EAC9B,CAAC,kBAAkB,IAAI,UAAU;EACjC,CAAC,eAAe,IAAI,SAAS;EAC7B,CAAC,eAAe,IAAI,QAAQ;EAC5B,CAAC,kBAAkB,IAAI,QAAQ;EAC/B,CAAC,kBAAkB,IAAI,YAAY;EACnC,CAAC,sBAAsB,IAAI,cAAc;EACzC,CAAC,sBAAsB,IAAI,uBAAuB;EAClD,CAAC,gBAAgB,IAAI,WAAW;EAChC,CAAC,mBAAmB,IAAI,MAAM;AAChC;AAEA,IAAO,eAAQ;ADxHf,IAAM,cAAyB;EAC7B,GAAG;EACH,MAAM;EACN,SAAS;EACT,WAAW,CAAC;EACZ,SAAS,CAAC;AACZ;AAIA,IAAI,aAA0B,CAAC;AAC/B,IAAI,QAA0C,CAAC;AAwCxC,SAASC,OAAmB;AACjC,SAAO,WAAW,MAAM;AAC1B;AAmBO,SAAS,IAAI,WAAqB,SAAmB,UAAmB;AAC7E,QAAMC,WAAU,WAAW,SAAS;AACpC,QAAMC,SAAQ;IACZ,GAAG,IAAM,SAAS;IAClB,MAAM,YAAY;IAClB,SAAAD;IACA;IACA;EACF;AACA,aAAW,KAAKC,MAAK;AACrB,MAAIA,OAAM,MAAM;AACd,UAAMA,OAAM,IAAI,IAAIA;EACtB;AACA,QAAMA,OAAM,MAAM,IAAIA;AACtB,QAAMA,OAAM,MAAM,IAAIA;AACtB,EAAAA,OAAM,QAAQ,QAAQ,CAAC,UAAU,SAASA,QAAO,KAAK,CAAC;AACzD;AAEO,SAAS,SAASA,QAAkB,OAAe;AACxD,QAAM,KAAK,IAAIA;AACjB;AAEA,SAAS,WAAW,WAAmC;AACrD,QAAM,MAAM,CAACC,cAAqB,UAAU,QAAQA,SAAQ,MAAM;AAClE,SAAO,IAAI,IAAI,IACX,cACA,IAAI,IAAI,IACN,UACA,IAAI,IAAI,IACN,eACA,IAAI,IAAI,IACN,UACA;AACZ;AAEA,aAAK;EAAQ,CAAC,CAAC,MAAM,UAAUC,OAAK,MAClC,IAAI,KAAK,MAAM,GAAG,GAAGA,QAAM,MAAM,GAAG,GAAG,QAAQ;AACjD;AACA,WAAW,KAAK,CAAC,GAAG,MAAM,EAAE,SAAS,EAAE,MAAM;;;AE1H7C,IAAM,WAAW,CAACC,WAAoB;AACpC,QAAM,WAAWA,OAAM,OAA+B,CAAC,QAAQ,MAAM;AACnE,UAAMC,UAAS,KAAK,CAAC,EAAE;AACvB,QAAIA,YAAW,QAAW;AACxB,aAAOA,OAAM,IAAI,OAAOA,OAAM,KAAK,KAAK,CAAC,EAAE;IAC7C;AACA,WAAO;EACT,GAAG,CAAC,CAAC;AAEL,SAAO,CAACA,YAAmB,SAASA,OAAM;AAC5C;AAKO,SAAS,OACd,QACA,UAAkC,CAAC,GACzB;AACV,QAAMD,SAAQ,OAAO,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,MAAM,CAAC;AAC3D,MAAI,KAAK,WAAW,GAAG;AACrB,WAAO,CAAC;EACV;AAEA,QAAM,QAAsB,YAAYA,QAAO,GAAG,OAAO;AAEzD,SAAO,MACJ,OAAO,CAACE,WAAUA,OAAM,MAAM,EAC9B,KAAK,CAAC,GAAG,MAAM,EAAE,SAAS,EAAE,MAAM,EAClC,IAAI,CAACA,WAAUA,OAAM,IAAI;AAC9B;AAGA,IAAM,UAAU;;;EAGd,WAAW;;EAEX,cAAc;;;EAGd,kBAAkB;EAClB,YAAY;AACd;AAEA,IAAM,mBAAmB,CAAC,YAAoB,CAAC,iBAC7C,QAAQ,eAAe,OAAO;AAChC,IAAM,cAAc,iBAAiB,QAAQ,SAAS;AACtD,IAAM,kBAAkB,iBAAiB,QAAQ,YAAY;AAC7D,IAAM,gBAAgB,iBAAiB,QAAQ,UAAU;AACzD,IAAM,qBAAqB,iBAAiB,QAAQ,gBAAgB;AAEpE,SAAS,wCAAwCC,YAAsB;AACrE,QAAM,eAAe,SAASA,WAAU,QAAQ,CAAC;AACjD,SACE,YAAY,YAAY,KACxB,gBAAgB,YAAY,KAC5B,cAAc,YAAY;AAE9B;AAEA,SAAS,iBAAiBF,SAAwB;AAChD,QAAM,eAAe,SAASA,SAAQ,CAAC;AACvC,SAAO,mBAAmB,YAAY,IAClCA,WACC,eAAe,IAAI,SAAS,CAAC;AACpC;AAOA,SAAS,YACPD,QACA,QACA,SACc;AACd,QAAM,QAAQA,OAAM,CAAC;AACrB,QAAM,cAAc,KAAK,KAAK,EAAE;AAChC,QAAM,WAAW,SAASA,MAAK;AAE/B,QAAM,WAAW,MAAMA,QAAO,KAAK;AAEnC,QAAM,QAAsB,CAAC;AAC7B,WAAS,QAAQ,CAACI,OAAMC,WAAU;AAChC,UAAM,uBACJ,QAAQ,sBAAsB,iBAAiBD,KAAI;AAErD,UAAM,aAAaE,KAAI,EAAE,OAAO,CAACH,eAAc;AAC7C,UACE,QAAQ,sBACR,wCAAwCA,UAAS,GACjD;AACA,eAAOA,WAAU,WAAW;MAC9B;AACA,aAAOA,WAAU,WAAWC;IAC9B,CAAC;AAED,eAAW,QAAQ,CAACD,eAAc;AAChC,YAAM,YAAYA,WAAU,QAAQ,CAAC;AACrC,YAAM,WAAW,SAASE,MAAK;AAC/B,YAAM,cAAcA,WAAU;AAC9B,UAAI,aAAa;AACf,cAAM,KAAK;UACT,QAAQ,MAAM;UACd,MAAM,GAAG,QAAQ,GAAG,SAAS,IAAI,KAAK;QACxC,CAAC;MACH,OAAO;AACL,cAAM,KAAK,EAAE,QAAQ,IAAI,QAAQ,MAAM,GAAG,QAAQ,GAAG,SAAS,GAAG,CAAC;MACpE;IACF,CAAC;EACH,CAAC;AAED,SAAO;AACT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9GO,SAAS,aAAa,KAAiC;AAC5D,SAAO,QAAQ,QACb,OAAO,QAAQ,YACf,UAAU,OACV,OAAO,IAAI,SAAS,WAClB,OACA;AACN;AA6BA,IAAM,QAAQ,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE;AAC5B,IAAM,SAAS,CAAC,EAAE,MAAM,IAAI,OAAc,MAAM,IAAI,IAAI,MAAM,OAAO;AAErE,IAAM,SAAS,CAAC,EAAE,MAAM,KAAK,KAAK,MAAM,EAAE,MAC/C,OAAO,MAAM,IAAI,IAAI,MAAM,MAAM,QAAQ,SAAY,OAAO;AAEvD,IAAM,OAAO,CAACE,YAAiB;AACpC,QAAM,IAAI,OAAOA,OAAK;AACtB,SAAOA,QAAM,QAAQ,UAAa,KAAK,OAAO,KAAK,MAAM,IAAI,KAAK;AACpE;AAEO,SAAS,QAAQA,SAAgC;AACtD,SAAOA,YAAU,QACf,OAAOA,YAAU,YACjB,UAAUA,WACV,OAAOA,QAAM,SAAS,YACtB,SAASA,WACT,OAAOA,QAAM,QAAQ,WACnB,OACA;AACN;AAGA,IAAM,SAAS,CAAC,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC;AAEpC,IAAM,gBAAgB,OAAO;EAAI,CAAC,WAChC,KAAK,MAAO,SAAS,IAAK,EAAE;AAC9B;AAKO,SAAS,YAAYA,SAAgC;AAC1D,QAAM,EAAE,MAAM,KAAK,KAAK,MAAM,EAAE,IAAIA;AACpC,QAAM,IAAI,OAAO,IAAI,IAAI,IAAI;AAC7B,MAAI,QAAQ,QAAW;AACrB,WAAO,CAAC,MAAM,CAAC;EACjB;AACA,QAAM,IAAI,MAAM,cAAc,IAAI,IAAI,IAAI;AAC1C,SAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AAC1B;AAMA,IAAM,kBAAkB,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAKrC,SAAS,MAAM,OAAgC;AACpD,QAAM,CAAC,GAAG,GAAG,GAAG,IAAI;AACpB,QAAM,OAAO,gBAAgB,UAAU,CAAC,CAAC;AACzC,QAAM,MAAM,KAAK,OAAO,IAAI,KAAK,CAAC;AAClC,MAAI,MAAM,QAAW;AACnB,WAAO,EAAE,MAAM,KAAK,IAAI;EAC1B;AACA,QAAM,MAAM,IAAI,IAAI,MAAM,cAAc,IAAI;AAC5C,SAAO,EAAE,MAAM,KAAK,KAAK,IAAI;AAC/B;AAGA,SAAS,UAAU,GAAmB;AACpC,QAAM,KAAK,IAAI,KAAK;AACpB,SAAO,IAAI,IAAI,IAAI,IAAI;AACzB;;;ACxGA,IAAMC,WAAU,CAAC,GAAW,MAAc,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC;AAyCvE,IAAM,aAAyB,EAAE,OAAO,MAAM,MAAM,IAAI,KAAK,GAAG;AAGhE,IAAM,uBAAuB;AAE7B,IAAM,2BAA2B;AACjC,IAAMC,SAAQ,IAAI;EAChB,MAAM,uBAAuB,MAAM,2BAA2B;AAChE;AAOO,SAAS,iBAAiB,KAAoC;AACnE,QAAM,IAAIA,OAAM,KAAK,GAAG,GAAG,EAAE;AAC7B,MAAI,MAAM,MAAM;AACd,WAAO,CAAC,IAAI,EAAE;EAChB;AACA,SAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC1C;AAEA,IAAM,QAAoD,CAAC;AAsBpD,SAAS,SAAS,KAA6C;AACpE,SAAO,OAAO,QAAQ,WAClB,MAAM,GAAG,MAAM,MAAM,GAAG,IAAI,MAAM,GAAG,KACrC,QAAQ,GAAG,IACT,SAAS,UAAU,GAAG,CAAC,IACvB,aAAa,GAAG,IACd,SAAS,IAAI,IAAI,IACjB;AACV;AAEA,IAAMC,SAAQ,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE;AACnC,IAAM,QAAQ;AACd,SAAS,MAAM,KAAqC;AAClD,QAAM,SAAS,iBAAiB,GAAG;AACnC,MAAI,OAAO,CAAC,MAAM,IAAI;AACpB,WAAO;EACT;AACA,QAAMC,OAAM,CAAC,OAAO,CAAC;AACrB,QAAM,IAAI,OAAO,CAAC;AAClB,QAAM,QAAQ,KAAK,IAAIA,IAAG,IAAI,KAAK;AACnC,QAAM,IAAI,MAAM,IAAI;AACpB,MAAI,MAAM,OAAO,MAAM,KAAK;AAC1B,WAAO;EACT;AACA,QAAM,OAAO,MAAM,MAAM,cAAc;AAEvC,QAAMC,QAAO,KAAKD,OAAM;AACxB,QAAM,MAAMA,OAAM,IAAI,KAAK;AAC3B,QAAM,SAASA,SAAQ,KAAKA,SAAQ,KAAKA,OAAM,OAAO,OAAO;AAC7D,QAAM,MAAM,OAAO,MAAM,CAAC;AAC1B,QAAM,MAAM,KAAK,OAAO,KAAK,IAAIA,IAAG,IAAI,KAAK,CAAC;AAC9C,QAAME,aAAY,OAAOH,OAAM,IAAI,IAAI,MAAM,KAAK;AAClD,QAAMI,WAAY,OAAOJ,OAAM,IAAI,IAAI,OAAQ,KAAM,MAAM;AAC3D,QAAM,QAAQ,YAAY,EAAE,MAAM,KAAK,KAAK,IAAI,CAAC;AACjD,SAAO;IACL,OAAO;IACP,MAAAE;IACA,KAAAD;IACA;IACA;IACA;IACA;IACA;IACA;IACA,WAAAE;IACA,QAAAC;IACA;IACA;EACF;AACF;AAOO,SAAS,gBACd,OACA,iBACU;AACV,QAAM,CAAC,GAAG,IAAI,CAAC,IAAI;AACnB,QAAM,eAAe,IAAI,IAAI,IAAI,KAAK;AACtC,QAAM,MACJ,mBAAmB,eAAe,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC;AAC3D,SAAO,SAAS,MAAM,GAAG,CAAC;AAC5B;AAEA,SAAS,OAAO,MAAY,GAAmB;AAC7C,SAAQ,MAAM,OAAO,SAAS,eAC3B,MAAM,OAAO,SAAS,gBACrB,IACA,MAAM,OAAO,SAAS,cACpB,KACA,OAAO,KAAK,CAAC,IACX,EAAE,SACF,OAAO,KAAK,CAAC,IACX,MAAM,SAAS,gBAAgB,EAAE,SAAS,EAAE,SAAS,KACrD;AACZ;AAGA,SAAS,UAAU,OAAsB;AACvC,QAAM,EAAE,MAAM,KAAK,MAAM,GAAG,IAAI,IAAI;AACpC,MAAI,CAAC,KAAK;AACR,WAAO;EACT;AACA,QAAM,UAAU,OAAO,IAAI,IAAI;AAE/B,QAAMH,OAAM,YAAY,IAAI,OAAO,IAAI;AACvC,QAAM,IAAI,MAAM,IAAI,MAAM;AAC1B,QAAM,OAAO,MAAM,IAAI,MAAM,MAAM,cAAc;AACjD,QAAMC,QAAO,IAAID,OAAM,OAAO,MAAM,GAAG;AACvC,SAAOC;AACT;AAEA,SAAS,OAAO,MAAY,KAAsB;AAChD,MAAI,QAAQ,GAAG;AACb,WAAO,SAAS,cAAc,MAAM;EACtC,WAAW,QAAQ,MAAM,SAAS,aAAa;AAC7C,WAAO;EACT,WAAW,MAAM,GAAG;AAClB,WAAOJ,SAAQ,KAAK,GAAG;EACzB,OAAO;AACL,WAAOA,SAAQ,KAAK,SAAS,gBAAgB,MAAM,MAAM,CAAC;EAC5D;AACF;;;ACjMA,IAAMO,WAAU,CAAC,GAAW,MAAc,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC;AA0BvE,IAAM,SAAiB,EAAE,OAAO,MAAM,MAAM,IAAI,IAAI,IAAI,KAAK,GAAG;AAEhE,IAAMC,SAAqD,oBAAI,IAAI;AAE5D,IAAM,eAAe,CAAC,SAAiB,UAAU,OAAO,IAAI;AAC5D,IAAMC,YAAW,CAAC,QACvB,MAAM,IAAIF,SAAQ,KAAK,CAAC,GAAG,IAAIA,SAAQ,KAAK,GAAG;AAC1C,IAAMG,YAAW,CAAC,QACvB,IAAI,CAAC,MAAM,MAAM,CAAC,IAAI,SAAS,IAAI;AAO9B,SAASC,MAAK,KAAiC;AACpD,QAAM,YAAY,KAAK,UAAU,GAAG;AAEpC,QAAM,SAASH,OAAM,IAAI,SAAS;AAClC,MAAI,QAAQ;AACV,WAAO;EACT;AAEA,QAAMI,SACJ,OAAO,QAAQ,WACXC,OAAM,GAAG,IACT,QAAQ,GAAG,IACTF,MAAKG,WAAU,GAAG,CAAC,IACnB,aAAa,GAAG,IACdH,MAAK,IAAI,IAAI,IACb;AACV,EAAAH,OAAM,IAAI,WAAWI,MAAK;AAC1B,SAAOA;AACT;AAIA,IAAMG,SAAQ;AAKP,SAASC,cAAa,KAAyB;AACpD,QAAM,IAAID,OAAM,KAAK,GAAG;AACxB,SAAO,IACH,CAAC,EAAE,CAAC,EAAE,YAAY,GAAG,EAAE,CAAC,EAAE,QAAQ,MAAM,IAAI,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,IACzD,CAAC,IAAI,IAAI,IAAI,EAAE;AACrB;AAKO,SAAS,YAAY,WAAmC;AAC7D,SAAOJ,MAAK,MAAM,SAAS,CAAC;AAC9B;AAEA,IAAM,MAAM,CAAC,GAAW,OAAgB,IAAI,IAAK,KAAK;AAEtD,IAAM,OAAO,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE;AAClC,SAASE,OAAM,UAAmC;AAChD,QAAM,SAASG,cAAa,QAAQ;AACpC,MAAI,OAAO,CAAC,MAAM,MAAM,OAAO,CAAC,MAAM,IAAI;AACxC,WAAO;EACT;AAEA,QAAM,SAAS,OAAO,CAAC;AACvB,QAAM,MAAM,OAAO,CAAC;AACpB,QAAM,SAAS,OAAO,CAAC;AAEvB,QAAM,QAAQ,OAAO,WAAW,CAAC,IAAI,KAAK;AAC1C,QAAM,MAAMN,UAAS,GAAG;AACxB,QAAM,MAAM,OAAO,SAAS,CAAC,SAAS;AACtC,QAAM,QAAQ,YAAY,EAAE,MAAM,KAAK,IAAI,CAAC;AAE5C,QAAMO,QAAO,SAAS,MAAM;AAC5B,QAAM,KAAK,SAAS;AACpB,QAAMC,WAAU,KAAK,IAAI,IAAI,MAAM,OAAO;AAC1C,QAAMC,UACJ,QAAQ,SACJ,IAAI,KAAK,IAAI,IAAI,KAAK,EAAE,IAAI,KAAK,KACjC,KAAK,IAAI,IAAI,MAAM,MAAM,MAAM;AACrC,QAAMC,QAAOD,WAAU,KAAKA,WAAU,MAAMA,UAAS;AACrD,QAAM,OAAO,QAAQ,SAAY,OAAO,KAAK,IAAI,IAAIA,UAAS,MAAM,EAAE,IAAI;AAE1E,SAAO;IACL,OAAO;IACP;IACA;IACA,QAAAD;IACA;IACA;IACA,QAAAC;IACA;IACA,MAAAC;IACA,MAAAH;IACA;IACA;IACA;EACF;AACF;AAEA,SAASH,WAAU,OAAwB;AACzC,QAAM,EAAE,MAAM,KAAK,IAAI,IAAI;AAC3B,QAAM,SAAS,aAAa,IAAI;AAChC,MAAI,CAAC,QAAQ;AACX,WAAO;EACT;AAEA,QAAM,KAAK,SAASL,UAAS,GAAG;AAChC,SAAO,OAAO,QAAQ,IAAI,KAAK,MAAM;AACvC;;;ACxHO,SAASY,WACd,UACA,cACU;AACV,QAAMC,QAAOA,MAAO,QAAQ;AAC5B,QAAM,gBAAgB,MAAM,QAAQ,YAAY,IAC5C,eACA,SAAW,YAAY,EAAE;AAC7B,MAAIA,MAAK,SAAS,CAAC,iBAAiB,cAAc,SAAS,GAAG;AAC5D,WAAO;EACT;AACA,QAAM,YAAYA,MAAK;AACvB,QAAM,KACJ,UAAU,WAAW,IACjB,CAAC,UAAU,CAAC,IAAI,cAAc,CAAC,CAAC,IAChC,CAAC,UAAU,CAAC,IAAI,cAAc,CAAC,GAAG,UAAU,CAAC,IAAI,cAAc,CAAC,CAAC;AACvE,SAAO,YAAY,EAAE,EAAE;AACzB;AAGO,SAAS,yBACd,WACA,OACA;AACA,QAAM,MAAM,UAAU;AACtB,SAAO,CAAC,eAAuB;AAC7B,QAAI,CAAC;AAAO,aAAO;AACnB,UAAMC,SACJ,aAAa,KAAK,MAAO,CAAC,aAAa,OAAQ,MAAM,aAAa;AACpE,UAAM,UAAU,KAAK,MAAM,aAAa,GAAG;AAC3C,UAAM,OAAOF,WAAU,OAAO,CAAC,GAAG,OAAO,CAAC;AAC1C,WAAOA,WAAU,MAAM,UAAUE,MAAK,CAAC;EACzC;AACF;AAaO,SAASC,UACd,UACA,QACc;AACd,QAAM,OAAOF,MAAO,QAAQ;AAC5B,QAAM,KAAKA,MAAO,MAAM;AACxB,MAAI,KAAK,SAAS,GAAG,OAAO;AAC1B,WAAO;EACT;AAEA,QAAM,SAAS,KAAK;AACpB,QAAM,SAAS,GAAG;AAClB,QAAM,SAAS,OAAO,CAAC,IAAI,OAAO,CAAC;AACnC,QAAM,OACJ,OAAO,WAAW,KAAK,OAAO,WAAW,IACrC,OAAO,CAAC,IAAI,OAAO,CAAC,IACpB,CAAC,KAAK,MAAO,SAAS,IAAK,EAAE;AAGnC,QAAM,kBACJ,GAAG,WAAW,KAAK,UACnB,GAAG,SAAS,QACZ,KAAK,SAAS,QACd,KAAK,OAAO,GAAG;AACjB,SAAO,gBAAgB,CAAC,QAAQ,IAAI,GAAG,eAAe,EAAE;AAC1D;;;AC1FO,IAAMG,WAAU,CAAC,GAAW,MAAc,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC;AAEvE,SAAS,UAGd,UAAkB,aAAqB,IAAc;AACrD,SAAO,YAA4B,MAAuC;AAExE,YAAQ,KAAK,GAAG,QAAQ,uBAAuB,WAAW,GAAG;AAC7D,WAAO,GAAG,MAAM,MAAM,IAAI;EAC5B;AACF;AAEO,IAAM,UAAU,UAAU,WAAW,gBAAgB,YAAY;;;AEdxE,IAAMC,UAAqB;EAEzB,CAAC,YAAY,SAAS,UAAU;EAChC,CAAC,eAAe,iBAAiB,uBAAuB;EACxD,CAAC,kBAAkB,eAAe,YAAY;EAC9C,CAAC,sBAAsB,oBAAoB,iBAAiB;EAC5D,CAAC,eAAe,SAAS,iBAAiB;EAC1C,CAAC,kBAAkB,qBAAqB,kBAAkB;EAC1D,CAAC,eAAe,4BAA4B,WAAW;EACvD;IACE;IACA;IACA;EACF;EAGA,CAAC,YAAY,SAAS,SAAS;EAC/B,CAAC,eAAe,iBAAiB,gBAAgB;EACjD;IACE;IACA;IACA;EACF;EACA,CAAC,eAAe,eAAe,OAAO;EACtC,CAAC,kBAAkB,eAAe,OAAO;EACzC,CAAC,kBAAkB,qBAAqB,eAAe;EACvD,CAAC,sBAAsB,kBAAkB,SAAS;EAClD,CAAC,sBAAsB,oBAAoB,SAAS;EAEpD,CAAC,YAAY,cAAc,SAAS;EACpC,CAAC,eAAe,sBAAsB,YAAY;EAClD,CAAC,eAAe,mBAAmB,kBAAkB;EAGrD,CAAC,eAAe,oBAAoB,OAAO;EAC3C,CAAC,kBAAkB,kBAAkB,GAAG;EACxC,CAAC,sBAAsB,uBAAuB,IAAI;EAClD,CAAC,mBAAmB,2BAA2B,UAAU;EAEzD,CAAC,kBAAkB,uBAAuB,KAAK;EAC/C,CAAC,kBAAkB,wBAAwB,KAAK;EAChD,CAAC,eAAe,WAAW,MAAM;EAEjC,CAAC,YAAY,oBAAoB,UAAU;EAC3C,CAAC,YAAY,oBAAoB,MAAM;EACvC,CAAC,eAAe,4BAA4B,YAAY;EACxD,CAAC,mBAAmB,YAAY,IAAI;EACpC;IACE;IACA;IACA;EACF;EAEA,CAAC,SAAS,SAAS,GAAG;EACtB,CAAC,YAAY,aAAa,cAAc;EACxC,CAAC,YAAY,mBAAmB,YAAY;EAC5C,CAAC,eAAe,qBAAqB,0BAA0B;EAC/D;IACE;IACA;IACA;EACF;EAEA,CAAC,eAAe,IAAI,gBAAgB;EACpC,CAAC,kBAAkB,IAAI,eAAe;EACtC,CAAC,eAAe,IAAI,qBAAqB;EACzC,CAAC,kBAAkB,IAAI,kBAAkB;EACzC,CAAC,kBAAkB,IAAI,QAAQ;EAC/B,CAAC,sBAAsB,IAAI,QAAQ;EACnC,CAAC,kBAAkB,IAAI,aAAa;EACpC,CAAC,sBAAsB,IAAI,UAAU;EACrC,CAAC,eAAe,IAAI,QAAQ;EAC5B,CAAC,eAAe,IAAI,eAAe;EACnC,CAAC,mBAAmB,IAAI,qBAAqB;EAC7C,CAAC,qBAAqB,IAAI,SAAS;EACnC,CAAC,sBAAsB,IAAI,OAAO;EAClC,CAAC,kBAAkB,IAAI,SAAS;EAChC,CAAC,kBAAkB,IAAI,KAAK;EAC5B,CAAC,sBAAsB,IAAI,WAAW;EACtC,CAAC,0BAA0B,IAAI,6BAA6B;EAC5D,CAAC,kBAAkB,IAAI,MAAM;EAC7B,CAAC,uBAAuB,IAAI,gBAAgB;EAC5C,CAAC,mBAAmB,IAAI,iBAAiB;EACzC,CAAC,sBAAsB,IAAI,oBAAoB;EAC/C,CAAC,0BAA0B,IAAI,SAAS;EACxC,CAAC,0BAA0B,IAAI,WAAW;EAC1C,CAAC,sBAAsB,IAAI,MAAM;EACjC,CAAC,sBAAsB,IAAI,QAAQ;EACnC,CAAC,sBAAsB,IAAI,cAAc;EACzC,CAAC,0BAA0B,IAAI,iBAAiB;EAChD,CAAC,0BAA0B,IAAI,gBAAgB;EAC/C,CAAC,sBAAsB,IAAI,oBAAoB;EAC/C,CAAC,0BAA0B,IAAI,SAAS;EACxC,CAAC,0BAA0B,IAAI,8BAA8B;EAC7D,CAAC,sBAAsB,IAAI,MAAM;EACjC,CAAC,sBAAsB,IAAI,QAAQ;EACnC,CAAC,qBAAqB,IAAI,OAAO;EACjC,CAAC,eAAe,IAAI,mBAAmB;EACvC,CAAC,eAAe,IAAI,QAAQ;EAC5B,CAAC,YAAY,IAAI,KAAK;EACtB,CAAC,qBAAqB,IAAI,MAAM;EAChC,CAAC,eAAe,IAAI,MAAM;EAC1B,CAAC,kBAAkB,IAAI,MAAM;EAC7B,CAAC,eAAe,IAAI,KAAK;EACzB,CAAC,kBAAkB,IAAI,KAAK;EAC5B,CAAC,YAAY,IAAI,MAAM;EACvB,CAAC,gBAAgB,IAAI,MAAM;EAC3B,CAAC,eAAe,IAAI,MAAM;EAC1B,CAAC,mBAAmB,IAAI,OAAO;EAC/B,CAAC,mBAAmB,IAAI,MAAM;EAC9B,CAAC,eAAe,IAAI,OAAO;EAC3B,CAAC,kBAAkB,IAAI,SAAS;EAChC,CAAC,qBAAqB,IAAI,SAAS;EACnC,CAAC,mBAAmB,IAAI,gBAAgB;EACxC,CAAC,eAAe,IAAI,OAAO;EAC3B,CAAC,kBAAkB,IAAI,MAAM;EAC7B,CAAC,eAAe,IAAI,KAAK;EACzB,CAAC,eAAe,IAAI,OAAO;EAC3B,CAAC,eAAe,IAAI,MAAM;EAC1B,CAAC,kBAAkB,IAAI,MAAM;EAC7B,CAAC,sBAAsB,IAAI,MAAM;EACjC,CAAC,eAAe,IAAI,OAAO;EAC3B,CAAC,kBAAkB,IAAI,MAAM;EAC7B,CAAC,eAAe,IAAI,UAAU;EAC9B,CAAC,kBAAkB,IAAI,UAAU;EACjC,CAAC,eAAe,IAAI,SAAS;EAC7B,CAAC,eAAe,IAAI,QAAQ;EAC5B,CAAC,kBAAkB,IAAI,QAAQ;EAC/B,CAAC,kBAAkB,IAAI,YAAY;EACnC,CAAC,sBAAsB,IAAI,cAAc;EACzC,CAAC,sBAAsB,IAAI,uBAAuB;EAClD,CAAC,gBAAgB,IAAI,WAAW;EAChC,CAAC,mBAAmB,IAAI,MAAM;AAChC;AAEA,IAAOC,gBAAQD;ADvHf,IAAME,eAAyB;EAC7B,GAAG;EACH,MAAM;EACN,SAAS;EACT,WAAW,CAAC;EACZ,SAAS,CAAC;AACZ;AAIA,IAAIC,cAA0B,CAAC;AAC/B,IAAIC,SAA0C,CAAC;AASxC,SAASC,KAAI,MAAgC;AAClD,SAAOD,OAAM,IAAA,KAASF;AACxB;AAEO,IAAM,YAAY,UAAU,uBAAuB,iBAAiBG,IAAG;AAKvE,SAAS,QAAQ;AACtB,SAAOF,YAAW,IAAI,CAACG,WAAUA,OAAM,IAAI,EAAE,OAAO,CAAC,MAAM,CAAC;AAC9D;AAKO,SAAS,UAAU;AACxB,SAAOH,YAAW,IAAI,CAACG,WAAUA,OAAM,QAAQ,CAAA,CAAE,EAAE,OAAO,CAAC,MAAM,CAAC;AACpE;AAKO,SAAS,OAAO;AACrB,SAAO,OAAO,KAAKF,MAAK;AAC1B;AAKO,SAASG,OAAmB;AACjC,SAAOJ,YAAW,MAAM;AAC1B;AAEO,IAAM,UAAU,UAAU,qBAAqB,iBAAiBI,IAAG;AAKnE,SAAS,YAAY;AAC1B,EAAAJ,cAAa,CAAC;AACd,EAAAC,SAAQ,CAAC;AACX;AAQO,SAASI,KAAI,WAAqB,SAAmB,UAAmB;AAC7E,QAAMC,WAAUC,YAAW,SAAS;AACpC,QAAMJ,SAAQ;IACZ,GAAG,IAAM,SAAS;IAClB,MAAM,YAAY;IAClB,SAAAG;IACA;IACA;EACF;AACA,EAAAN,YAAW,KAAKG,MAAK;AACrB,MAAIA,OAAM,MAAM;AACd,IAAAF,OAAME,OAAM,IAAA,IAAQA;EACtB;AACA,EAAAF,OAAME,OAAM,MAAA,IAAUA;AACtB,EAAAF,OAAME,OAAM,MAAA,IAAUA;AACtB,EAAAA,OAAM,QAAQ,QAAQ,CAAC,UAAUK,UAASL,QAAO,KAAK,CAAC;AACzD;AAEO,SAASK,UAASL,QAAkB,OAAe;AACxD,EAAAF,OAAM,KAAA,IAASE;AACjB;AAEA,SAASI,YAAW,WAAmC;AACrD,QAAM,MAAM,CAACE,cAAqB,UAAU,QAAQA,SAAQ,MAAM;AAClE,SAAO,IAAI,IAAI,IACX,cACA,IAAI,IAAI,IACR,UACA,IAAI,IAAI,IACR,eACA,IAAI,IAAI,IACR,UACA;AACN;AAEAX,cAAK;EAAQ,CAAC,CAAC,MAAM,UAAUY,OAAK,MAClCL,KAAI,KAAK,MAAM,GAAG,GAAGK,QAAM,MAAM,GAAG,GAAG,QAAQ;AACjD;AACAV,YAAW,KAAK,CAAC,GAAG,MAAM,EAAE,SAAS,EAAE,MAAM;AAE7C,IAAO,qBAAQ;EACb;EACA;EACA,KAAAE;EACA,KAAAE;EACA,KAAAC;EACA;EACA;EAEA;EACA;AACF;;;AE7GA,IAAM,UAAiB;EACrB,OAAO;EACP,MAAM;EACN,QAAQ;EACR,MAAM;EACN,YAAY;EACZ,MAAM;EACN,OAAO;EACP,QAAQ;EACR,SAAS;EACT,QAAQ;EACR,YAAY;EACZ,SAAS,CAAC;EACV,OAAO,CAAC;EACR,WAAW,CAAC;AACd;AAqBO,SAASM,UAASC,OAA+B;AACtD,QAAM,CAAC,QAAQ,KAAK,KAAK,IAAI,IAAIC,cAAaD,KAAI;AAClD,MAAI,WAAW,IAAI;AACjB,WAAO,CAAC,IAAIA,KAAI;EAClB;AAEA,MAAI,WAAW,OAAO,SAAS,MAAM;AACnC,WAAO,CAAC,IAAI,KAAK;EACnB;AACA,SAAO,CAAC,SAAS,KAAK,MAAM,IAAI;AAClC;AAKO,SAASE,KAAI,KAAyC;AAC3D,MAAI,QAAQ,IAAI;AACd,WAAO;EACT;AACA,MAAI,MAAM,QAAQ,GAAG,KAAK,IAAI,WAAW,GAAG;AAC1C,WAAO,SAAS,IAAI,CAAA,GAAI,IAAI,CAAA,CAAE;EAChC,OAAO;AACL,UAAM,CAAC,OAAO,IAAI,IAAIH,UAAS,GAAG;AAClC,UAAMI,SAAQ,SAAS,MAAM,KAAK;AAClC,WAAOA,OAAM,QAAQ,SAAS,GAAG,IAAIA;EACvC;AACF;AASO,SAAS,SACd,UACA,eACA,cACO;AACP,QAAM,OAAOD,KAAa,QAAQ;AAClC,QAAM,QAAQE,MAAK,iBAAiB,EAAE;AACtC,QAAM,OAAOA,MAAK,gBAAgB,EAAE;AAEpC,MACE,KAAK,SACJ,iBAAiB,MAAM,SACvB,gBAAgB,KAAK,OACtB;AACA,WAAO;EACT;AAEA,QAAM,eAAeC,UAAS,MAAM,IAAI,KAAK,EAAE;AAC/C,QAAM,aAAa,KAAK,UAAU,QAAQ,YAAY,IAAI;AAC1D,MAAI,CAAC,KAAK,SAAS,CAAC,YAAY;AAC9B,WAAO;EACT;AAEA,QAAM,YAAY,MAAM,KAAK,KAAK,SAAS;AAE3C,WAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACnC,UAAMC,OAAM,UAAU,CAAA,EAAG,CAAA;AACzB,UAAMC,WAAU,UAAU,CAAA,EAAG,CAAA;AAC7B,UAAM,SAAS,SAASD,MAAK,EAAE,IAAI;AACnC,cAAU,KAAK,GAAG,MAAA,GAASC,QAAA,EAAS;AACpC,cAAU,MAAM;EAClB;AAEA,QAAMC,SAAQ,MAAM,QAChB,CAAC,IACD,UAAU,IAAI,CAAC,MAAMC,WAAc,OAAO,CAAC,CAAC;AAEhD,aAAW,KAAK,QAAQ,QAAQ,QAAQ,MAAM,KAAK,WAAW,KAAK,QAAQ,CAAA;AAC3E,QAAM,SAAS,GAAG,MAAM,QAAQ,KAAK,MAAM,EAAA,GAAK,QAAA,GAC9C,KAAK,SAAS,cAAc,IAAI,KAAK,MAAM,KAAK,EAAA;AAElD,QAAMT,QAAO,GAAG,gBAAgB,MAAM,KAAK,MAAM,EAAA,GAAK,KAAK,IAAA,GACzD,aAAa,KAAK,eAAe,WAAW,KAAK,KAAK,EAAA;AAExD,SAAO;IACL,GAAG;IACH,MAAAA;IACA;IACA,MAAM,KAAK;IACX,MAAM,KAAK;IACX;IACA;IACA,OAAO,MAAM;IACb,OAAAQ;EACF;AACF;AAEO,IAAM,QAAQ,UAAU,eAAe,aAAaN,IAAG;AAWvD,SAASO,WAAU,WAAmBC,WAA0B;AACrE,QAAM,CAAC,OAAO,IAAI,IAAIX,UAAS,SAAS;AACxC,MAAI,CAAC,OAAO;AACV,WAAO;EACT;AACA,SAAOU,WAAc,OAAOC,SAAQ,IAAI;AAC1C;AASO,SAAS,YAAYV,OAAwB;AAClD,QAAM,IAAIE,KAAIF,KAAI;AAClB,QAAM,kBAAkB,aAAa,EAAE,MAAM;AAC7C,SAAO,IAAW,EACf,OAAO,CAAC,UAAU,gBAAgB,MAAM,MAAM,CAAC,EAC/C,IAAI,CAAC,UAAU,MAAM,IAAI;AAC9B;AAUO,SAAS,SAAS,WAA6B;AACpD,QAAM,IAAIE,KAAI,SAAS;AACvB,QAAM,aAAa,aAAa,EAAE,MAAM;AACxC,SAAOS,KAAW,EACf,OAAO,CAACR,WAAU,WAAWA,OAAM,MAAM,CAAC,EAC1C,IAAI,CAACA,WAAU,EAAE,QAAQA,OAAM,QAAQ,CAAA,CAAE;AAC9C;AAQO,SAAS,QAAQ,WAA6B;AACnD,QAAM,IAAID,KAAI,SAAS;AACvB,QAAM,WAAW,WAAW,EAAE,MAAM;AACpC,SAAOS,KAAW,EACf,OAAO,CAACR,WAAU,SAASA,OAAM,MAAM,CAAC,EACxC,IAAI,CAACA,WAAU,EAAE,QAAQA,OAAM,QAAQ,CAAA,CAAE;AAC9C;AASO,SAAS,QAAQ,WAAqC;AAC3D,QAAM,EAAE,WAAW,MAAM,IAAID,KAAI,SAAS;AAC1C,QAAMO,cAAY,yBAAyB,WAAW,KAAK;AAC3D,SAAO,CAAC,WACN,SAASA,YAAU,SAAS,IAAI,SAAS,IAAI,MAAM,IAAI;AAC3D;AAKO,SAAS,MAAM,WAAqC;AACzD,QAAM,EAAE,WAAW,MAAM,IAAIP,KAAI,SAAS;AAC1C,SAAO,yBAAyB,WAAW,KAAK;AAClD;AAEA,IAAO,gBAAQ;EACb;EACA,KAAAA;EACA;EACA;EACA;EACA;EACA,UAAAH;EACA,WAAAU;EACA;EACA;EAGA;AACF;;;ACrQA,IAAM,OAAqC;EACzC;IACE;IACA;IACA,CAAC,SAAS,gBAAgB,UAAU,WAAW,eAAe;EAChE;EACA,CAAC,MAAM,KAAK,CAAC,QAAQ,OAAO,CAAC;EAC7B,CAAC,KAAK,KAAK,CAAC,gBAAgB,UAAU,OAAO,CAAC;EAC9C,CAAC,GAAG,KAAK,CAAC,SAAS,WAAW,CAAC;EAC/B,CAAC,GAAG,KAAK,CAAC,QAAQ,OAAO,CAAC;EAC1B,CAAC,GAAG,KAAK,CAAC,WAAW,UAAU,CAAC;EAChC,CAAC,GAAG,KAAK,CAAC,UAAU,QAAQ,CAAC;EAC7B,CAAC,IAAI,KAAK,CAAC,aAAa,YAAY,CAAC;EACrC,CAAC,IAAI,KAAK,CAAC,iBAAiB,gBAAgB,CAAC;EAC7C,CAAC,IAAI,MAAM,CAAC,gBAAgB,oBAAoB,CAAC;EACjD,CAAC,KAAK,KAAK,CAAC,uBAAuB,CAAC;EACpC,CAAC,KAAK,MAAM,CAAC,yBAAyB,CAAC;AACzC;AAEA,IAAOG,gBAAQ;AChBf,IAAM,SAA0B,CAAC;AAEjCA,cAAK;EAAQ,CAAC,CAAC,aAAa,WAAWC,OAAK,MAC1CC,KAAI,aAAa,WAAWD,OAAK;AACnC;AAYA,IAAM,aAA4B;EAChC,OAAO;EACP,MAAM;EACN,OAAO;EACP,UAAU,CAAC,GAAG,CAAC;EACf,WAAW;EACX,MAAM;EACN,OAAO,CAAC;AACV;AAEO,SAASA,SAAkB;AAChC,SAAO,OAAO,OAAO,CAACA,SAAO,aAAa;AACxC,aAAS,MAAM,QAAQ,CAACE,UAASF,QAAM,KAAKE,KAAI,CAAC;AACjD,WAAOF;EACT,GAAG,CAAC,CAAa;AACnB;AAEO,SAAS,aAAuB;AACrC,SAAO,OAAO,IAAI,CAAC,QAAQ,IAAI,SAAS;AAC1C;AAEA,IAAMG,SAAQ;AAEP,SAASC,KAAIF,OAA6B;AAE/C,QAAM,CAAC,GAAG,QAAQ,IAAI,IAAIC,OAAM,KAAKD,KAAI,KAAK,CAAC;AAC/C,QAAM,OAAO,OAAO;IAClB,CAAC,QAAQ,IAAI,cAAc,UAAU,IAAI,MAAM,SAAS,MAAM;EAChE;AACA,MAAI,CAAC,MAAM;AACT,WAAO;EACT;AAEA,QAAMG,YAAW,SAAS,KAAK,UAAU,KAAK,MAAM;AACpD,QAAMC,SAAQD,UAAS,CAAC,IAAIA,UAAS,CAAC;AAEtC,SAAO,EAAE,GAAG,MAAM,MAAAH,OAAM,MAAM,OAAAI,QAAO,UAAAD,UAAS;AAChD;AAEO,IAAM,QAAQ,CAACH,UAAiBE,KAAIF,KAAI,EAAE;AAC1C,IAAM,WAAW,CAACA,UAAiBE,KAAIF,KAAI,EAAE;AAGpD,IAAO,yBAAQ,EAAE,OAAAF,QAAO,YAAY,KAAAI,MAAK,OAAO,SAAS;AAIzD,SAASH,KAAI,aAAqB,WAAmBD,SAAiB;AACpE,SAAO,KAAK;IACV,OAAO;IACP,MAAM;IACN,MAAM;IACN,OAAO,IAAI;IACX,UAAU,cAAc,IAAI,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,GAAG,WAAW;IAClE;IACA,OAAAA;EACF,CAAC;AACH;AAEA,SAAS,SAASK,WAAoB,MAAwB;AAC5D,QAAM,MAAM,KAAK,IAAI,GAAG,IAAI;AAE5B,MAAI,YAAYA,UAAS,CAAC,IAAI;AAC9B,MAAI,cAAcA,UAAS,CAAC,IAAI;AAChC,QAAM,OAAO;AAGb,WAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC7B,iBAAa,OAAO,KAAK,IAAI,GAAG,IAAI,CAAC;EACvC;AAGA,SAAO,YAAY,MAAM,KAAK,cAAc,MAAM,GAAG;AACnD,iBAAa;AACb,mBAAe;EACjB;AACA,SAAO,CAAC,WAAW,WAAW;AAChC;;;ACtFO,SAASE,SAAwB;AACtC,SAAO,uBAAuB,MAAM,GAAG;AACzC;AASO,IAAMC,OAAM;AAWZ,IAAM,OAAO,CAACC,UAAiB,SAAMA,KAAI,EAAE;AAQ3C,IAAM,YAAY,CAACA,UAAiB,SAAMA,KAAI,EAAE;AAQhD,IAAM,UAAU,CAACA,UAAiB,SAAMA,KAAI,EAAE;AAQ9C,IAAM,MAAM,CAACA,UAAiB,SAAMA,KAAI,EAAE;AAgB1C,SAAS,SAASA,OAAkC;AACzD,QAAM,IAAI,SAAMA,KAAI;AACpB,SAAO,EAAE,QAAQ,KAAK,EAAE,SAAS,EAAE;AACrC;AAeO,SAAS,OAAOA,OAAkC;AACvD,QAAM,IAAI,SAAMA,KAAI;AACpB,MAAI,EAAE,OAAO;AACX,WAAO;EACT;AACA,QAAM,QAAQ,IAAI,EAAE,QAAQ;AAC5B,QAAM,MAAM,EAAE,SAAS,gBAAgB,CAAC,EAAE,MAAM,EAAE,EAAE,MAAM;AAC1D,SAAO,SAAM,EAAE,MAAM,KAAK,KAAK,EAAE,KAAK,KAAK,EAAE,IAAI,CAAC,EAAE;AACtD;AAGA,IAAM,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAE9C,IAAM,KAAK,0BAA0B,MAAM,GAAG;AAYvC,SAAS,cAAcC,YAAiC;AAC7D,QAAM,IAAIA,aAAY,IAAI,KAAK;AAC/B,QAAM,IAAI,KAAK,IAAIA,UAAS;AAC5B,QAAM,IAAI,IAAI;AACd,QAAM,IAAI,KAAK,MAAM,IAAI,EAAE;AAC3B,SAAO,KAAK,GAAG,CAAC,IAAI,IAAI,KAAK,GAAG,CAAC;AACnC;AAQO,IAAMC,YAAW;AAYjB,IAAMC,OAAM,WAAW,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AAS3D,IAAM,QAAQ,CAACC,cAAqB,CAAC,UAC1CD,KAAIC,WAAU,KAAK;AAad,IAAM,YAAY,WAAW,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AAEjE,SAASC,iBACdD,WACA,QACc;AACd,QAAM,MAAML,KAAIK,SAAQ;AACxB,MAAI,IAAI;AAAO,WAAO;AAEtB,QAAM,CAAC,SAAS,OAAO,GAAG,IAAI,IAAI;AAClC,SAAO,gBAAgB,CAAC,UAAU,QAAQ,OAAO,GAAG,CAAC,EAAE;AACzD;AAEA,IAAO,mBAAQ;EACb,OAAAN;EACA,KAAAC;EACA;EACA;EACA;EACA;EACA;EACA,UAAAG;EACA;EACA;EACA,KAAAC;EACA;EACA;EACA,iBAAAE;AACF;AASA,SAAS,WAAW,IAAe;AACjC,SAAO,CAAC,GAAiB,MAA8C;AACrE,UAAM,SAAS,SAAM,CAAC,EAAE;AACxB,UAAM,SAAS,SAAM,CAAC,EAAE;AACxB,QAAI,UAAU,QAAQ;AACpB,YAAM,QAAQ,GAAG,QAAQ,MAAM;AAC/B,aAAO,gBAAgB,KAAK,EAAE;IAChC;EACF;AACF;;;ACrMO,SAASC,cAAa,KAAiC;AAC5D,SAAO,QAAQ,QACb,OAAO,QAAQ,YACf,UAAU,OACV,OAAO,IAAI,SAAS,WAClB,OACA;AACN;AAwCO,SAASC,SAAQC,SAAgC;AACtD,SAAOA,YAAU,QACf,OAAOA,YAAU,YACjB,UAAUA,WACV,OAAOA,QAAM,SAAS,YACtB,SAASA,WACT,OAAOA,QAAM,QAAQ,YACrB,CAAC,MAAMA,QAAM,IAAI,KACjB,CAAC,MAAMA,QAAM,GAAG,IACd,OACA;AACN;AAGA,IAAMC,UAAS,CAAC,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC;AAEpC,IAAMC,iBAAgBD,QAAO;EAAI,CAAC,WAChC,KAAK,MAAO,SAAS,IAAK,EAAE;AAC9B;AAKO,SAASE,aAAYH,SAAgC;AAC1D,QAAM,EAAE,MAAM,KAAK,KAAK,MAAM,EAAE,IAAIA;AACpC,QAAM,IAAIC,QAAO,IAAI,IAAI,IAAI;AAC7B,MAAI,QAAQ,QAAW;AACrB,WAAO,CAAC,MAAM,CAAC;EACjB;AACA,QAAM,IAAI,MAAMC,eAAc,IAAI,IAAI,IAAI;AAC1C,SAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AAC1B;;;AChFA,IAAME,WAAU,CAAC,GAAW,MAAc,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC;AAmCvE,IAAMC,cAAuB,OAAO,OAAO;EACzC,OAAO;EACP,MAAM;EACN,KAAK;EACL,GAAG;EACH,MAAM;EACN,MAAM;EACN,KAAK;EACL,KAAK;EACL,QAAQ;EACR,WAAW;EACX,QAAQ;EACR,OAAO,CAAC;EACR,KAAK;AACP,CAAC;AAGD,IAAMC,wBAAuB;AAE7B,IAAMC,4BAA2B;AACjC,IAAMC,SAAQ,IAAI;EAChB,MAAMF,wBAAuB,MAAMC,4BAA2B;AAChE;AAOO,SAASE,kBAAiB,KAAoC;AACnE,QAAM,IAAID,OAAM,KAAK,GAAG,GAAG,EAAE;AAC7B,MAAI,MAAM,MAAM;AACd,WAAO,CAAC,IAAI,EAAE;EAChB;AACA,SAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC1C;AAEA,IAAME,SAAuC,CAAC;AAsBvC,SAASC,UAAS,KAAgC;AACvD,SAAO,OAAO,QAAQ,WAClBD,OAAM,GAAG,MAAMA,OAAM,GAAG,IAAIE,OAAM,GAAG,KACrCC,SAAQ,GAAG,IACTF,UAASG,WAAU,GAAG,CAAC,IACvBC,cAAa,GAAG,IACdJ,UAAS,IAAI,IAAI,IACjBN;AACV;AAEA,IAAMW,SAAQ,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE;AACnC,IAAMC,SAAQ;AACd,SAASL,OAAM,KAAwB;AACrC,QAAM,SAASH,kBAAiB,GAAG;AACnC,MAAI,OAAO,CAAC,MAAM,IAAI;AACpB,WAAOJ;EACT;AACA,QAAMa,OAAM,CAAC,OAAO,CAAC;AACrB,QAAM,IAAI,OAAO,CAAC;AAClB,QAAM,QAAQ,KAAK,IAAIA,IAAG,IAAI,KAAK;AACnC,QAAM,IAAID,OAAM,IAAI;AACpB,MAAI,MAAM,OAAO,MAAM,KAAK;AAC1B,WAAOZ;EACT;AACA,QAAM,OAAO,MAAM,MAAM,cAAc;AAEvC,QAAMc,QAAO,KAAKD,OAAM;AACxB,QAAM,MAAMA,OAAM,IAAI,KAAK;AAC3B,QAAM,SAASA,SAAQ,KAAKA,SAAQ,KAAKA,OAAM,OAAO,OAAO;AAC7D,QAAM,MAAME,QAAO,MAAM,CAAC;AAC1B,QAAM,MAAM,KAAK,OAAO,KAAK,IAAIF,IAAG,IAAI,KAAK,CAAC;AAC9C,QAAMG,aAAY,OAAOL,OAAM,IAAI,IAAI,MAAM,KAAK;AAClD,QAAMM,WAAY,OAAON,OAAM,IAAI,IAAI,OAAQ,KAAM,MAAM;AAC3D,QAAM,QAAQO,aAAY,EAAE,MAAM,KAAK,KAAK,IAAI,CAAC;AACjD,SAAO;IACL,OAAO;IACP,MAAAJ;IACA,KAAAD;IACA;IACA;IACA;IACA;IACA;IACA;IACA,WAAAG;IACA,QAAAC;IACA;IACA;EACF;AACF;AAkBA,SAASE,QAAO,MAAY,GAAmB;AAC7C,SAAQ,MAAM,OAAO,SAAS,eAC3B,MAAM,OAAO,SAAS,gBACrB,IACA,MAAM,OAAO,SAAS,cACpB,KACA,OAAO,KAAK,CAAC,IACX,EAAE,SACF,OAAO,KAAK,CAAC,IACX,MAAM,SAAS,gBAAgB,EAAE,SAAS,EAAE,SAAS,KACrD;AACZ;AAGA,SAASC,WAAU,OAAsB;AACvC,QAAM,EAAE,MAAM,KAAK,MAAM,GAAG,IAAI,IAAI;AACpC,MAAI,CAAC,KAAK;AACR,WAAO;EACT;AACA,QAAM,UAAU,OAAO,IAAI,IAAI;AAE/B,QAAMC,OAAM,YAAY,IAAI,OAAO,IAAI;AACvC,QAAM,IAAI,MAAM,IAAI,MAAM;AAC1B,QAAM,OAAOC,OAAM,IAAI,MAAM,MAAM,cAAc;AACjD,QAAMC,QAAO,IAAIF,OAAMG,QAAO,MAAM,GAAG;AACvC,SAAOD;AACT;AAEA,SAASC,QAAO,MAAY,KAAsB;AAChD,MAAI,QAAQ,GAAG;AACb,WAAO,SAAS,cAAc,MAAM;EACtC,WAAW,QAAQ,MAAM,SAAS,aAAa;AAC7C,WAAO;EACT,WAAW,MAAM,GAAG;AAClB,WAAOC,SAAQ,KAAK,GAAG;EACzB,OAAO;AACL,WAAOA,SAAQ,KAAK,SAAS,gBAAgB,MAAM,MAAM,CAAC;EAC5D;AACF;;;AC/LA,IAAM,iBAAiC,EAAE,OAAO,MAAM,MAAM,IAAI,WAAW,GAAG;AAE9E,IAAMC,SAAuD,CAAC;AAiBvD,SAASC,KAAI,KAAyC;AAC3D,SAAO,OAAO,QAAQ,WAClBD,OAAM,GAAG,MAAMA,OAAM,GAAG,IAAIE,OAAM,GAAG,KACrC,OAAO,QAAQ,WACbD,KAAI,MAAM,GAAG,KAAK,EAAE,IACpBE,SAAQ,GAAG,IACT,UAAU,GAAG,IACbC,cAAa,GAAG,IACdH,KAAI,IAAI,IAAI,IACZ;AACZ;AAMO,IAAM,eAAeA;AAYrB,SAASI,OAAM,QAAQ,MAAM;AAClC,UAAQ,QAAQ,QAAQ,aAAa,MAAM;AAC7C;AAEA,SAAS,UAAUC,QAA6C;AAC9D,SAAOL,KAAI,SAASK,OAAM,GAAG,IAAI,MAAMA,OAAM,IAAI,CAAC;AACpD;AAEA,IAAMC,SACJ;AAIK,SAASC,UAAS,KAAiC;AACxD,SAAQD,OAAM,KAAK,GAAG,KAAK,CAAC,IAAI,IAAI,IAAI,EAAE;AAC5C;AAEA,IAAM,SAAS;AACf,IAAM,QAAQ,OAAO,MAAM,GAAG;AAC9B,IAAM,cAAc,OAAO,YAAY,EAAE,MAAM,GAAG;AAElD,SAASL,OAAM,KAA4C;AACzD,QAAM,CAACO,OAAM,KAAK,OAAOC,UAAS,IAAIF,UAAS,GAAG;AAClD,MAAI,CAAC,OAAO;AACV,WAAO;EACT;AAEA,QAAM,aAAa,MAAM,YAAY;AACrC,QAAM,OAAO,MAAM,QAAQ,UAAU;AACrC,QAAM,MAAM,SAAS,GAAG;AACxB,QAAM,MAAM;AACZ,SAAO;IACL,OAAO;IACP,MAAAC;IACA;IACA,UAAUE,UAAS,EAAE,MAAM,KAAK,IAAI,CAAC,EAAE;IACvC;IACA,WAAAD;IACA;IACA;IACA,OAAO,UAAU;IACjB,KAAK;IACL;EACF;AACF;AAGA,IAAO,wBAAQ;EACb,OAAAL;EACA,KAAAJ;;EAEA;AACF;;;ACnHA,IAAM,QAA2B,OAAO,OAAO,CAAC,CAAa;AAS7D,IAAM,QAAa;EACjB,MAAM;EACN,OAAO;EACP,YAAY;EACZ,cAAc;AAChB;AAaA,IAAM,aAAuB;EAC3B,OAAO;EACP,QAAQ;EACR,WAAW;EACX,OAAO;EACP,QAAQ;EACR,QAAQ;EACR,wBAAwB;EACxB,aAAa;AACf;AAYA,IAAM,aAAuB;EAC3B,GAAG;EACH,GAAG;EACH,MAAM;EACN,eAAe;EACf,OAAO;EACP,oBAAoB;EACpB,iCAAiC;EACjC,qBAAqB;EACrB,kCAAkC;AACpC;AAUA,IAAM,aAAuB;EAC3B,GAAG;EACH,MAAM;EACN,eAAe;EACf,SAAS;EACT,UAAU;EACV,SAAS;AACX;AAEA,IAAM,iBAAiB,CAAC,OAAiB,MAAgB,MAAM,OAC7D,KAAK,IAAI,CAAC,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,EAAE;AAElD,SAAS,SACP,QACAW,SACAC,SACA,mBACAC,cACA;AACA,SAAO,CAAC,UAA4B;AAClC,UAAM,YAAY,OAAO,IAAI,CAAC,OAAOC,KAAM,EAAE,EAAE,YAAY,EAAE;AAC7D,UAAM,QAAQ,UAAU,IAAI,CAACC,cAAaC,WAAU,OAAOD,SAAQ,CAAC;AAEpE,WAAO;MACL;MACA;MACA;MACA;MACA,QAAQ,eAAe,OAAOJ,OAAM;MACpC,QAAQ,eAAe,OAAOC,OAAM;MACpC,wBAAwB,kBAAkB,MAAM;MAChD,aAAa,eAAe,OAAOC,cAAa,GAAG;IACrD;EACF;AACF;AAEA,IAAM,eAAe,CAAC,MAAc,OAAe;AACjD,QAAM,IAAI,KAAK,IAAI;AACnB,QAAM,IAAI,KAAK,EAAE;AACjB,SAAO,EAAE,SAAS,EAAE,QAAQ,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC;AACxD;AAEA,IAAM,aAAa;EACjB,uBAAuB,MAAM,GAAG;EAChC,eAAe,MAAM,GAAG;EACxB,4BAA4B,MAAM,GAAG;EACrC,kBAAkB,MAAM,GAAG;EAC3B,wDAAwD,MAAM,GAAG;AACnE;AACA,IAAM,eAAe;EACnB,0BAA0B,MAAM,GAAG;EACnC,eAAe,MAAM,GAAG;EACxB,4BAA4B,MAAM,GAAG;EACrC,oBAAoB,MAAM,GAAG;EAC7B,wDAAwD,MAAM,GAAG;AACnE;AACA,IAAM,gBAAgB;EACpB,yBAAyB,MAAM,GAAG;EAClC,oBAAoB,MAAM,GAAG;EAC7B,gCAAgC,MAAM,GAAG;EACzC,mBAAmB,MAAM,GAAG;EAC5B,sGAAsG;IACpG;EACF;AACF;AACA,IAAM,eAAe;EACnB,wBAAwB,MAAM,GAAG;EACjC,oBAAoB,MAAM,GAAG;EAC7B,4BAA4B,MAAM,GAAG;EACrC,gBAAgB,MAAM,GAAG;EACzB,4FAA4F;IAC1F;EACF;AACF;AAMO,SAAS,SAAS,OAAyB;AAChD,QAAM,KAAK,KAAK,KAAK,EAAE;AACvB,MAAI,CAAC,GAAI,QAAO;AAEhB,QAAMI,YAAW,WAAW,EAAE;AAC9B,QAAM,aAAa,aAAa,KAAK,EAAE;AACvC,QAAM,eAAe,CAAC,QAAgB;AACpC,UAAM,IAAIH,KAAM,GAAG;AACnB,QAAI,EAAE,MAAO,QAAO;AAEpB,WAAOE,WAAU,OAAO,EAAE,QAAQ,IAAI,EAAE;EAC1C;AAEA,SAAO;IACL,GAAGC;IACH,MAAM;IACN,eAAeD,WAAU,IAAI,KAAK;IAClC;IACA,cAAc,SAAS,UAAU;IACjC,oBAAoB,2BAA2B,MAAM,GAAG,EAAE,IAAI,YAAY;IAC1E,iCAAiC,qCAC9B,MAAM,GAAG,EACT,IAAI,YAAY;IACnB,qBAAqB,+BAClB,MAAM,GAAG,EACT,IAAI,YAAY;IACnB,kCAAkC,gCAC/B,MAAM,GAAG,EACT,IAAI,YAAY;EACrB;AACF;AAMO,SAAS,SAAS,KAAuB;AAC9C,QAAM,KAAK,KAAK,GAAG,EAAE;AACrB,MAAI,CAAC,GAAI,QAAO;AAEhB,QAAM,aAAa,aAAa,KAAK,EAAE,IAAI;AAC3C,SAAO;IACL,MAAM;IACN,OAAO;IACP,eAAeA,WAAU,IAAI,IAAI;IACjC;IACA,cAAc,SAAS,UAAU;IACjC,SAAS,aAAa,EAAE;IACxB,UAAU,cAAc,EAAE;IAC1B,SAAS,aAAa,EAAE;EAC1B;AACF;AAQO,SAAS,2BACd,KACe;AACf,MAAI,OAAO,QAAQ,UAAU;AAC3B,WAAO,gBAAgB,KAAK,GAAG;EACjC,WAAW,OAAO,QAAQ,YAAY,UAAU,KAAK,GAAG,GAAG;AACzD,WAAO,gBAAgB,KAAK,SAAS,GAAG,CAAC;EAC3C;AACA,SAAO;AACT;AAGA,IAAO,cAAQ,EAAE,UAAU,4BAA4B,SAAS;;;AChNzD,SAASE,cAAa,KAAiC;AAC5D,SAAO,QAAQ,QACb,OAAO,QAAQ,YACf,UAAU,OACV,OAAO,IAAI,SAAS,WAClB,OACA;AACN;AAwCO,SAASC,SAAQC,SAAgC;AACtD,SAAOA,YAAU,QACf,OAAOA,YAAU,YACjB,UAAUA,WACV,OAAOA,QAAM,SAAS,YACtB,SAASA,WACT,OAAOA,QAAM,QAAQ,YACrB,CAAC,MAAMA,QAAM,IAAI,KACjB,CAAC,MAAMA,QAAM,GAAG,IACd,OACA;AACN;AAGA,IAAMC,UAAS,CAAC,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC;AAEpC,IAAMC,iBAAgBD,QAAO;EAAI,CAAC,WAChC,KAAK,MAAO,SAAS,IAAK,EAAE;AAC9B;AAKO,SAASE,aAAYH,SAAgC;AAC1D,QAAM,EAAE,MAAM,KAAK,KAAK,MAAM,EAAE,IAAIA;AACpC,QAAM,IAAIC,QAAO,IAAI,IAAI,IAAI;AAC7B,MAAI,QAAQ,QAAW;AACrB,WAAO,CAAC,MAAM,CAAC;EACjB;AACA,QAAM,IAAI,MAAMC,eAAc,IAAI,IAAI,IAAI;AAC1C,SAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AAC1B;AAMA,IAAME,mBAAkB,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAKrC,SAASJ,OAAM,OAAgC;AACpD,QAAM,CAAC,GAAG,GAAG,GAAG,IAAI;AACpB,QAAM,OAAOI,iBAAgBC,WAAU,CAAC,CAAC;AACzC,QAAM,MAAM,KAAK,OAAO,IAAI,KAAK,CAAC;AAClC,MAAI,MAAM,QAAW;AACnB,WAAO,EAAE,MAAM,KAAK,IAAI;EAC1B;AACA,QAAM,MAAM,IAAI,IAAI,MAAMH,eAAc,IAAI;AAC5C,SAAO,EAAE,MAAM,KAAK,KAAK,IAAI;AAC/B;AAGA,SAASG,WAAU,GAAmB;AACpC,QAAM,KAAK,IAAI,KAAK;AACpB,SAAO,IAAI,IAAI,IAAI,IAAI;AACzB;;;AC1GA,IAAMC,WAAU,CAAC,GAAW,MAAc,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC;AAmCvE,IAAMC,cAAuB,OAAO,OAAO;EACzC,OAAO;EACP,MAAM;EACN,KAAK;EACL,GAAG;EACH,MAAM;EACN,MAAM;EACN,KAAK;EACL,KAAK;EACL,QAAQ;EACR,WAAW;EACX,QAAQ;EACR,OAAO,CAAC;EACR,KAAK;AACP,CAAC;AAGD,IAAMC,wBAAuB;AAE7B,IAAMC,4BAA2B;AACjC,IAAMC,SAAQ,IAAI;EAChB,MAAMF,wBAAuB,MAAMC,4BAA2B;AAChE;AAOO,SAASE,kBAAiB,KAAoC;AACnE,QAAM,IAAID,OAAM,KAAK,GAAG,GAAG,EAAE;AAC7B,MAAI,MAAM,MAAM;AACd,WAAO,CAAC,IAAI,EAAE;EAChB;AACA,SAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC1C;AAEA,IAAME,SAAuC,CAAC;AAsBvC,SAASC,UAAS,KAAgC;AACvD,SAAO,OAAO,QAAQ,WAClBD,OAAM,GAAG,MAAMA,OAAM,GAAG,IAAIE,OAAM,GAAG,KACrCC,SAAQ,GAAG,IACTF,UAASG,WAAU,GAAG,CAAC,IACvBC,cAAa,GAAG,IACdJ,UAAS,IAAI,IAAI,IACjBN;AACV;AAEA,IAAMW,SAAQ,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE;AACnC,IAAMC,SAAQ;AACd,SAASL,OAAM,KAAwB;AACrC,QAAM,SAASH,kBAAiB,GAAG;AACnC,MAAI,OAAO,CAAC,MAAM,IAAI;AACpB,WAAOJ;EACT;AACA,QAAMa,OAAM,CAAC,OAAO,CAAC;AACrB,QAAM,IAAI,OAAO,CAAC;AAClB,QAAM,QAAQ,KAAK,IAAIA,IAAG,IAAI,KAAK;AACnC,QAAM,IAAID,OAAM,IAAI;AACpB,MAAI,MAAM,OAAO,MAAM,KAAK;AAC1B,WAAOZ;EACT;AACA,QAAM,OAAO,MAAM,MAAM,cAAc;AAEvC,QAAMc,QAAO,KAAKD,OAAM;AACxB,QAAM,MAAMA,OAAM,IAAI,KAAK;AAC3B,QAAM,SAASA,SAAQ,KAAKA,SAAQ,KAAKA,OAAM,OAAO,OAAO;AAC7D,QAAM,MAAME,QAAO,MAAM,CAAC;AAC1B,QAAM,MAAM,KAAK,OAAO,KAAK,IAAIF,IAAG,IAAI,KAAK,CAAC;AAC9C,QAAMG,aAAY,OAAOL,OAAM,IAAI,IAAI,MAAM,KAAK;AAClD,QAAMM,WAAY,OAAON,OAAM,IAAI,IAAI,OAAQ,KAAM,MAAM;AAC3D,QAAM,QAAQO,aAAY,EAAE,MAAM,KAAK,KAAK,IAAI,CAAC;AACjD,SAAO;IACL,OAAO;IACP,MAAAJ;IACA,KAAAD;IACA;IACA;IACA;IACA;IACA;IACA;IACA,WAAAG;IACA,QAAAC;IACA;IACA;EACF;AACF;AAOO,SAASE,iBACd,OACA,iBACU;AACV,QAAM,CAAC,GAAG,IAAI,CAAC,IAAI;AACnB,QAAM,eAAe,IAAI,IAAI,IAAI,KAAK;AACtC,QAAM,MACJ,mBAAmB,eAAe,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC;AAC3D,SAAOb,UAASc,OAAM,GAAG,CAAC;AAC5B;AAEA,SAASL,QAAO,MAAY,GAAmB;AAC7C,SAAQ,MAAM,OAAO,SAAS,eAC3B,MAAM,OAAO,SAAS,gBACrB,IACA,MAAM,OAAO,SAAS,cACpB,KACA,OAAO,KAAK,CAAC,IACX,EAAE,SACF,OAAO,KAAK,CAAC,IACX,MAAM,SAAS,gBAAgB,EAAE,SAAS,EAAE,SAAS,KACrD;AACZ;AAGA,SAASN,WAAU,OAAsB;AACvC,QAAM,EAAE,MAAM,KAAK,MAAM,GAAG,IAAI,IAAI;AACpC,MAAI,CAAC,KAAK;AACR,WAAO;EACT;AACA,QAAM,UAAU,OAAO,IAAI,IAAI;AAE/B,QAAMI,OAAM,YAAY,IAAI,OAAO,IAAI;AACvC,QAAM,IAAI,MAAM,IAAI,MAAM;AAC1B,QAAM,OAAOD,OAAM,IAAI,MAAM,MAAM,cAAc;AACjD,QAAME,QAAO,IAAID,OAAMQ,QAAO,MAAM,GAAG;AACvC,SAAOP;AACT;AAEA,SAASO,QAAO,MAAY,KAAsB;AAChD,MAAI,QAAQ,GAAG;AACb,WAAO,SAAS,cAAc,MAAM;EACtC,WAAW,QAAQ,MAAM,SAAS,aAAa;AAC7C,WAAO;EACT,WAAW,MAAM,GAAG;AAClB,WAAOtB,SAAQ,KAAK,GAAG;EACzB,OAAO;AACL,WAAOA,SAAQ,KAAK,SAAS,gBAAgB,MAAM,MAAM,CAAC;EAC5D;AACF;;;AC7LO,IAAMuB,OAAMC;AAmDZ,SAASC,UAASC,OAAkC;AACzD,QAAM,IAAIC,UAAMD,KAAI;AACpB,SAAO,EAAE,QAAQ,KAAK,EAAE,SAAS,EAAE;AACrC;AA4BA,IAAME,MAAK,0BAA0B,MAAM,GAAG;AAsCvC,IAAMC,OAAMC,YAAW,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AAuB3D,IAAM,WAAWC,YAAW,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AAEhE,SAASC,iBACdC,WACA,QACc;AACd,QAAM,MAAMC,KAAID,SAAQ;AACxB,MAAI,IAAI,MAAO,QAAO;AAEtB,QAAM,CAAC,SAAS,OAAO,GAAG,IAAI,IAAI;AAClC,SAAOE,iBAAgB,CAAC,UAAU,QAAQ,OAAO,GAAG,CAAC,EAAE;AACzD;AA2BA,SAASC,YAAW,IAAe;AACjC,SAAO,CAAC,GAAiB,MAA8C;AACrE,UAAM,SAASC,UAAM,CAAC,EAAE;AACxB,UAAM,SAASA,UAAM,CAAC,EAAE;AACxB,QAAI,UAAU,QAAQ;AACpB,YAAM,QAAQ,GAAG,QAAQ,MAAM;AAC/B,aAAOC,iBAAgB,KAAK,EAAE;IAChC;EACF;AACF;;;AC7MA,IAAM,QAAQ;EACZ,CAAC,GAAG,MAAM,GAAG,UAAU,IAAI,QAAQ,OAAO;EAC1C,CAAC,GAAG,MAAM,GAAG,UAAU,KAAK,IAAI;EAChC,CAAC,GAAG,MAAM,GAAG,YAAY,KAAK,IAAI;EAClC,CAAC,GAAG,MAAM,IAAI,UAAU,IAAI,MAAM;EAClC,CAAC,GAAG,MAAM,GAAG,cAAc,IAAI,GAAG;EAClC,CAAC,GAAG,MAAM,GAAG,WAAW,KAAK,MAAM,OAAO;EAC1C,CAAC,GAAG,MAAM,GAAG,WAAW,OAAO,MAAM;AACvC;AAaA,IAAM,SAAe;EACnB,GAAG;EACH,MAAM;EACN,KAAK;EACL,SAAS;EACT,OAAO;EACP,SAAS;EACT,SAAS,CAAC;AACZ;AAEA,IAAMC,SAAgB,MAAM,IAAI,MAAM;AACtC,IAAMC,SAA8B,CAAC;AACrCD,OAAM,QAAQ,CAACE,UAAS;AACtB,EAAAD,OAAMC,MAAK,IAAI,IAAIA;AACnBA,QAAK,QAAQ,QAAQ,CAAC,UAAU;AAC9B,IAAAD,OAAM,KAAK,IAAIC;EACjB,CAAC;AACH,CAAC;AAuBM,SAASC,KAAIC,OAAyB;AAC3C,SAAO,OAAOA,UAAS,WACnBH,OAAMG,MAAK,YAAY,CAAC,KAAK,SAC7BA,SAAQA,MAAK,OACXD,KAAIC,MAAK,IAAI,IACb;AACR;AAGO,IAAM,OAAOD;AAKb,SAASE,OAAM;AACpB,SAAOL,OAAM,MAAM;AACrB;AAGO,IAAMM,WAAUD;AAKhB,SAASE,SAAQ;AACtB,SAAOP,OAAM,IAAI,CAACE,UAASA,MAAK,IAAI;AACtC;AAEA,SAAS,OAAOA,OAAuB;AACrC,QAAM,CAAC,SAAS,QAAQ,KAAKE,OAAM,OAAO,SAAS,KAAK,IAAIF;AAC5D,QAAM,UAAU,QAAQ,CAAC,KAAK,IAAI,CAAC;AACnC,QAAMM,UAAS,OAAO,MAAM,EAAE,SAAS,CAAC;AACxC,QAAM,YAAYL,KAAQC,KAAI,EAAE;AAChC,SAAO;IACL,OAAO;IACP;IACA;IACA,QAAAI;IACA,YAAYA;IACZ,MAAAJ;IACA;IACA;IACA;IACA;IACA;EACF;AACF;AAEO,SAAS,MAAM,UAAuB,OAAiB;AAC5D,SAAOD,KAAI,QAAQ,EAAE,UAAU,IAAI,CAAC,QAAQ,UAAU,OAAO,GAAG,CAAC;AACnE;AAEA,SAAS,OAAOM,SAAkB;AAChC,SAAO,CAAC,UAAuB,UAAoB;AACjD,UAAMP,QAAOC,KAAI,QAAQ;AACzB,QAAID,MAAK,MAAO,QAAO,CAAC;AACxB,UAAMQ,UAAS,OAAOR,MAAK,SAASO,OAAM;AAC1C,UAAM,SAASP,MAAK,UAAU,IAAI,CAAC,MAAM,UAAU,OAAO,CAAC,CAAC;AAC5D,WAAOQ,QAAO,IAAI,CAAC,OAAO,MAAM,OAAO,CAAC,IAAI,KAAK;EACnD;AACF;AAEO,IAAM,SAAS,OAAO,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AAC5C,IAAM,gBAAgB,OAAO,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AAEnD,SAASC,UAAS,aAA0B,QAAqB;AACtE,QAAM,OAAOR,KAAI,MAAM;AACvB,QAAM,KAAKA,KAAI,WAAW;AAC1B,MAAI,KAAK,SAAS,GAAG,MAAO,QAAO;AACnC,SAAOS,UAASC,iBAAgB,MAAM,GAAG,MAAM,KAAK,GAAG,CAAC;AAC1D;AAEO,SAAS,cACd,aACA,QACA,OACA;AACA,SAAO,UAAU,OAAOF,UAAS,aAAa,MAAM,CAAC;AACvD;AAGA,IAAO,eAAQ;EACb,KAAAR;EACA,OAAAI;EACA,KAAAF;EACA,UAAAM;EACA;EACA;EACA;EACA;;EAEA,SAAAL;EACA;AACF;;;AE3JA,IAAMQ,UAAqB;;EAEzB,CAAC,YAAY,SAAS,UAAU;EAChC,CAAC,eAAe,iBAAiB,uBAAuB;EACxD,CAAC,kBAAkB,eAAe,YAAY;EAC9C,CAAC,sBAAsB,oBAAoB,iBAAiB;EAC5D,CAAC,eAAe,SAAS,iBAAiB;EAC1C,CAAC,kBAAkB,qBAAqB,kBAAkB;EAC1D,CAAC,eAAe,4BAA4B,WAAW;EACvD;IACE;IACA;IACA;EACF;;;EAGA,CAAC,YAAY,SAAS,SAAS;EAC/B,CAAC,eAAe,iBAAiB,gBAAgB;EACjD;IACE;IACA;IACA;EACF;EACA,CAAC,eAAe,eAAe,OAAO;EACtC,CAAC,kBAAkB,eAAe,OAAO;EACzC,CAAC,kBAAkB,qBAAqB,eAAe;EACvD,CAAC,sBAAsB,kBAAkB,SAAS;EAClD,CAAC,sBAAsB,oBAAoB,SAAS;;EAEpD,CAAC,YAAY,cAAc,SAAS;EACpC,CAAC,eAAe,sBAAsB,YAAY;EAClD,CAAC,eAAe,mBAAmB,kBAAkB;;;EAGrD,CAAC,eAAe,oBAAoB,OAAO;EAC3C,CAAC,kBAAkB,kBAAkB,GAAG;EACxC,CAAC,sBAAsB,uBAAuB,IAAI;EAClD,CAAC,mBAAmB,2BAA2B,UAAU;;EAEzD,CAAC,kBAAkB,uBAAuB,KAAK;EAC/C,CAAC,kBAAkB,wBAAwB,KAAK;EAChD,CAAC,eAAe,WAAW,MAAM;;EAEjC,CAAC,YAAY,oBAAoB,UAAU;EAC3C,CAAC,YAAY,oBAAoB,MAAM;EACvC,CAAC,eAAe,4BAA4B,YAAY;EACxD,CAAC,mBAAmB,YAAY,IAAI;EACpC;IACE;IACA;IACA;EACF;;EAEA,CAAC,SAAS,SAAS,GAAG;EACtB,CAAC,YAAY,aAAa,cAAc;EACxC,CAAC,YAAY,mBAAmB,YAAY;EAC5C,CAAC,eAAe,qBAAqB,0BAA0B;EAC/D;IACE;IACA;IACA;EACF;;EAEA,CAAC,eAAe,IAAI,gBAAgB;EACpC,CAAC,kBAAkB,IAAI,eAAe;EACtC,CAAC,eAAe,IAAI,qBAAqB;EACzC,CAAC,kBAAkB,IAAI,kBAAkB;EACzC,CAAC,kBAAkB,IAAI,QAAQ;EAC/B,CAAC,sBAAsB,IAAI,QAAQ;EACnC,CAAC,kBAAkB,IAAI,aAAa;EACpC,CAAC,sBAAsB,IAAI,UAAU;EACrC,CAAC,eAAe,IAAI,QAAQ;EAC5B,CAAC,eAAe,IAAI,eAAe;EACnC,CAAC,mBAAmB,IAAI,qBAAqB;EAC7C,CAAC,qBAAqB,IAAI,SAAS;EACnC,CAAC,sBAAsB,IAAI,OAAO;EAClC,CAAC,kBAAkB,IAAI,SAAS;EAChC,CAAC,kBAAkB,IAAI,KAAK;EAC5B,CAAC,sBAAsB,IAAI,WAAW;EACtC,CAAC,0BAA0B,IAAI,6BAA6B;EAC5D,CAAC,kBAAkB,IAAI,MAAM;EAC7B,CAAC,uBAAuB,IAAI,gBAAgB;EAC5C,CAAC,mBAAmB,IAAI,iBAAiB;EACzC,CAAC,sBAAsB,IAAI,oBAAoB;EAC/C,CAAC,0BAA0B,IAAI,SAAS;EACxC,CAAC,0BAA0B,IAAI,WAAW;EAC1C,CAAC,sBAAsB,IAAI,MAAM;EACjC,CAAC,sBAAsB,IAAI,QAAQ;EACnC,CAAC,sBAAsB,IAAI,cAAc;EACzC,CAAC,0BAA0B,IAAI,iBAAiB;EAChD,CAAC,0BAA0B,IAAI,gBAAgB;EAC/C,CAAC,sBAAsB,IAAI,oBAAoB;EAC/C,CAAC,0BAA0B,IAAI,SAAS;EACxC,CAAC,0BAA0B,IAAI,8BAA8B;EAC7D,CAAC,sBAAsB,IAAI,MAAM;EACjC,CAAC,sBAAsB,IAAI,QAAQ;EACnC,CAAC,qBAAqB,IAAI,OAAO;EACjC,CAAC,eAAe,IAAI,mBAAmB;EACvC,CAAC,eAAe,IAAI,QAAQ;EAC5B,CAAC,YAAY,IAAI,KAAK;EACtB,CAAC,qBAAqB,IAAI,MAAM;EAChC,CAAC,eAAe,IAAI,MAAM;EAC1B,CAAC,kBAAkB,IAAI,MAAM;EAC7B,CAAC,eAAe,IAAI,KAAK;EACzB,CAAC,kBAAkB,IAAI,KAAK;EAC5B,CAAC,YAAY,IAAI,MAAM;EACvB,CAAC,gBAAgB,IAAI,MAAM;EAC3B,CAAC,eAAe,IAAI,MAAM;EAC1B,CAAC,mBAAmB,IAAI,OAAO;EAC/B,CAAC,mBAAmB,IAAI,MAAM;EAC9B,CAAC,eAAe,IAAI,OAAO;EAC3B,CAAC,kBAAkB,IAAI,SAAS;EAChC,CAAC,qBAAqB,IAAI,SAAS;EACnC,CAAC,mBAAmB,IAAI,gBAAgB;EACxC,CAAC,eAAe,IAAI,OAAO;EAC3B,CAAC,kBAAkB,IAAI,MAAM;EAC7B,CAAC,eAAe,IAAI,KAAK;EACzB,CAAC,eAAe,IAAI,OAAO;EAC3B,CAAC,eAAe,IAAI,MAAM;EAC1B,CAAC,kBAAkB,IAAI,MAAM;EAC7B,CAAC,sBAAsB,IAAI,MAAM;EACjC,CAAC,eAAe,IAAI,OAAO;EAC3B,CAAC,kBAAkB,IAAI,MAAM;EAC7B,CAAC,eAAe,IAAI,UAAU;EAC9B,CAAC,kBAAkB,IAAI,UAAU;EACjC,CAAC,eAAe,IAAI,SAAS;EAC7B,CAAC,eAAe,IAAI,QAAQ;EAC5B,CAAC,kBAAkB,IAAI,QAAQ;EAC/B,CAAC,kBAAkB,IAAI,YAAY;EACnC,CAAC,sBAAsB,IAAI,cAAc;EACzC,CAAC,sBAAsB,IAAI,uBAAuB;EAClD,CAAC,gBAAgB,IAAI,WAAW;EAChC,CAAC,mBAAmB,IAAI,MAAM;AAChC;AAEA,IAAOC,gBAAQD;ADxHf,IAAME,eAAyB;EAC7B,GAAG;EACH,MAAM;EACN,SAAS;EACT,WAAW,CAAC;EACZ,SAAS,CAAC;AACZ;AAIA,IAAIC,cAA0B,CAAC;AAC/B,IAAIC,SAA0C,CAAC;AA6DxC,SAASC,KAAI,WAAqB,SAAmB,UAAmB;AAC7E,QAAMC,WAAUC,YAAW,SAAS;AACpC,QAAMC,SAAQ;IACZ,GAAG,IAAM,SAAS;IAClB,MAAM,YAAY;IAClB,SAAAF;IACA;IACA;EACF;AACA,EAAAG,YAAW,KAAKD,MAAK;AACrB,MAAIA,OAAM,MAAM;AACd,IAAAE,OAAMF,OAAM,IAAI,IAAIA;EACtB;AACA,EAAAE,OAAMF,OAAM,MAAM,IAAIA;AACtB,EAAAE,OAAMF,OAAM,MAAM,IAAIA;AACtB,EAAAA,OAAM,QAAQ,QAAQ,CAAC,UAAUG,UAASH,QAAO,KAAK,CAAC;AACzD;AAEO,SAASG,UAASH,QAAkB,OAAe;AACxD,EAAAE,OAAM,KAAK,IAAIF;AACjB;AAEA,SAASD,YAAW,WAAmC;AACrD,QAAM,MAAM,CAACK,cAAqB,UAAU,QAAQA,SAAQ,MAAM;AAClE,SAAO,IAAI,IAAI,IACX,cACA,IAAI,IAAI,IACN,UACA,IAAI,IAAI,IACN,eACA,IAAI,IAAI,IACN,UACA;AACZ;AAEAC,cAAK;EAAQ,CAAC,CAAC,MAAM,UAAUC,OAAK,MAClCT,KAAI,KAAK,MAAM,GAAG,GAAGS,QAAM,MAAM,GAAG,GAAG,QAAQ;AACjD;AACAL,YAAW,KAAK,CAAC,GAAG,MAAM,EAAE,SAAS,EAAE,MAAM;;;AErHtC,SAASM,cAAa,KAAiC;AAC5D,SAAO,QAAQ,QACb,OAAO,QAAQ,YACf,UAAU,OACV,OAAO,IAAI,SAAS,WAClB,OACA;AACN;AAwCO,SAASC,SAAQC,SAAgC;AACtD,SAAOA,YAAU,QACf,OAAOA,YAAU,YACjB,UAAUA,WACV,OAAOA,QAAM,SAAS,YACtB,SAASA,WACT,OAAOA,QAAM,QAAQ,YACrB,CAAC,MAAMA,QAAM,IAAI,KACjB,CAAC,MAAMA,QAAM,GAAG,IACd,OACA;AACN;AAGA,IAAMC,UAAS,CAAC,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC;AAEpC,IAAMC,iBAAgBD,QAAO;EAAI,CAAC,WAChC,KAAK,MAAO,SAAS,IAAK,EAAE;AAC9B;AAKO,SAASE,aAAYH,SAAgC;AAC1D,QAAM,EAAE,MAAM,KAAK,KAAK,MAAM,EAAE,IAAIA;AACpC,QAAM,IAAIC,QAAO,IAAI,IAAI,IAAI;AAC7B,MAAI,QAAQ,QAAW;AACrB,WAAO,CAAC,MAAM,CAAC;EACjB;AACA,QAAM,IAAI,MAAMC,eAAc,IAAI,IAAI,IAAI;AAC1C,SAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AAC1B;AAMA,IAAME,mBAAkB,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAKrC,SAASJ,OAAM,OAAgC;AACpD,QAAM,CAAC,GAAG,GAAG,GAAG,IAAI;AACpB,QAAM,OAAOI,iBAAgBC,WAAU,CAAC,CAAC;AACzC,QAAM,MAAM,KAAK,OAAO,IAAI,KAAK,CAAC;AAClC,MAAI,MAAM,QAAW;AACnB,WAAO,EAAE,MAAM,KAAK,IAAI;EAC1B;AACA,QAAM,MAAM,IAAI,IAAI,MAAMH,eAAc,IAAI;AAC5C,SAAO,EAAE,MAAM,KAAK,KAAK,IAAI;AAC/B;AAGA,SAASG,WAAU,GAAmB;AACpC,QAAM,KAAK,IAAI,KAAK;AACpB,SAAO,IAAI,IAAI,IAAI,IAAI;AACzB;;;AC1GA,IAAMC,WAAU,CAAC,GAAW,MAAc,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC;AAmCvE,IAAMC,cAAuB,OAAO,OAAO;EACzC,OAAO;EACP,MAAM;EACN,KAAK;EACL,GAAG;EACH,MAAM;EACN,MAAM;EACN,KAAK;EACL,KAAK;EACL,QAAQ;EACR,WAAW;EACX,QAAQ;EACR,OAAO,CAAC;EACR,KAAK;AACP,CAAC;AAGD,IAAMC,wBAAuB;AAE7B,IAAMC,4BAA2B;AACjC,IAAMC,SAAQ,IAAI;EAChB,MAAMF,wBAAuB,MAAMC,4BAA2B;AAChE;AAOO,SAASE,kBAAiB,KAAoC;AACnE,QAAM,IAAID,OAAM,KAAK,GAAG,GAAG,EAAE;AAC7B,MAAI,MAAM,MAAM;AACd,WAAO,CAAC,IAAI,EAAE;EAChB;AACA,SAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC1C;AAEA,IAAME,SAAuC,CAAC;AAsBvC,SAASC,UAAS,KAAgC;AACvD,SAAO,OAAO,QAAQ,WAClBD,OAAM,GAAG,MAAMA,OAAM,GAAG,IAAIE,OAAM,GAAG,KACrCC,SAAQ,GAAG,IACTF,UAASG,WAAU,GAAG,CAAC,IACvBC,cAAa,GAAG,IACdJ,UAAS,IAAI,IAAI,IACjBN;AACV;AAEA,IAAMW,SAAQ,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE;AACnC,IAAMC,SAAQ;AACd,SAASL,OAAM,KAAwB;AACrC,QAAM,SAASH,kBAAiB,GAAG;AACnC,MAAI,OAAO,CAAC,MAAM,IAAI;AACpB,WAAOJ;EACT;AACA,QAAMa,OAAM,CAAC,OAAO,CAAC;AACrB,QAAM,IAAI,OAAO,CAAC;AAClB,QAAM,QAAQ,KAAK,IAAIA,IAAG,IAAI,KAAK;AACnC,QAAM,IAAID,OAAM,IAAI;AACpB,MAAI,MAAM,OAAO,MAAM,KAAK;AAC1B,WAAOZ;EACT;AACA,QAAM,OAAO,MAAM,MAAM,cAAc;AAEvC,QAAMc,QAAO,KAAKD,OAAM;AACxB,QAAM,MAAMA,OAAM,IAAI,KAAK;AAC3B,QAAM,SAASA,SAAQ,KAAKA,SAAQ,KAAKA,OAAM,OAAO,OAAO;AAC7D,QAAM,MAAME,QAAO,MAAM,CAAC;AAC1B,QAAM,MAAM,KAAK,OAAO,KAAK,IAAIF,IAAG,IAAI,KAAK,CAAC;AAC9C,QAAMG,aAAY,OAAOL,OAAM,IAAI,IAAI,MAAM,KAAK;AAClD,QAAMM,WAAY,OAAON,OAAM,IAAI,IAAI,OAAQ,KAAM,MAAM;AAC3D,QAAM,QAAQO,aAAY,EAAE,MAAM,KAAK,KAAK,IAAI,CAAC;AACjD,SAAO;IACL,OAAO;IACP,MAAAJ;IACA,KAAAD;IACA;IACA;IACA;IACA;IACA;IACA;IACA,WAAAG;IACA,QAAAC;IACA;IACA;EACF;AACF;AAOO,SAASE,iBACd,OACA,iBACU;AACV,QAAM,CAAC,GAAG,IAAI,CAAC,IAAI;AACnB,QAAM,eAAe,IAAI,IAAI,IAAI,KAAK;AACtC,QAAM,MACJ,mBAAmB,eAAe,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC;AAC3D,SAAOb,UAASc,OAAM,GAAG,CAAC;AAC5B;AAEA,SAASL,QAAO,MAAY,GAAmB;AAC7C,SAAQ,MAAM,OAAO,SAAS,eAC3B,MAAM,OAAO,SAAS,gBACrB,IACA,MAAM,OAAO,SAAS,cACpB,KACA,OAAO,KAAK,CAAC,IACX,EAAE,SACF,OAAO,KAAK,CAAC,IACX,MAAM,SAAS,gBAAgB,EAAE,SAAS,EAAE,SAAS,KACrD;AACZ;AAGA,SAASN,WAAU,OAAsB;AACvC,QAAM,EAAE,MAAM,KAAK,MAAM,GAAG,IAAI,IAAI;AACpC,MAAI,CAAC,KAAK;AACR,WAAO;EACT;AACA,QAAM,UAAU,OAAO,IAAI,IAAI;AAE/B,QAAMI,OAAM,YAAY,IAAI,OAAO,IAAI;AACvC,QAAM,IAAI,MAAM,IAAI,MAAM;AAC1B,QAAM,OAAOD,OAAM,IAAI,MAAM,MAAM,cAAc;AACjD,QAAME,QAAO,IAAID,OAAMQ,QAAO,MAAM,GAAG;AACvC,SAAOP;AACT;AAEA,SAASO,QAAO,MAAY,KAAsB;AAChD,MAAI,QAAQ,GAAG;AACb,WAAO,SAAS,cAAc,MAAM;EACtC,WAAW,QAAQ,MAAM,SAAS,aAAa;AAC7C,WAAO;EACT,WAAW,MAAM,GAAG;AAClB,WAAOtB,SAAQ,KAAK,GAAG;EACzB,OAAO;AACL,WAAOA,SAAQ,KAAK,SAAS,gBAAgB,MAAM,MAAM,CAAC;EAC5D;AACF;;;AC3GA,IAAMuB,MAAK,0BAA0B,MAAM,GAAG;AAsCvC,IAAMC,OAAMC,YAAW,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AAuB3D,IAAMC,YAAWC,YAAW,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AAsCvE,SAASC,YAAW,IAAe;AACjC,SAAO,CAAC,GAAiB,MAA8C;AACrE,UAAM,SAASC,UAAM,CAAC,EAAE;AACxB,UAAM,SAASA,UAAM,CAAC,EAAE;AACxB,QAAI,UAAU,QAAQ;AACpB,YAAM,QAAQ,GAAG,QAAQ,MAAM;AAC/B,aAAOC,iBAAgB,KAAK,EAAE;IAChC;EACF;AACF;;;ACzIO,SAASC,UAASC,OAA+B;AACtD,QAAM,CAAC,QAAQ,KAAK,KAAK,IAAI,IAAI,aAAaA,KAAI;AAClD,MAAI,WAAW,IAAI;AACjB,WAAO,aAAa,IAAIA,KAAI;EAC9B,WAAW,WAAW,OAAO,SAAS,MAAM;AAC1C,WAAO,aAAa,IAAI,KAAK;EAC/B,OAAO;AACL,WAAO,aAAa,SAAS,KAAK,MAAM,IAAI;EAC9C;AACF;AAEA,SAAS,aAAaC,QAAcC,QAAgC;AAClE,QAAM,QAAQA,OAAM,MAAM,GAAG;AAC7B,MAAI,MAAM,WAAW,GAAG;AACtB,WAAO,CAACD,QAAM,MAAM,CAAC,GAAG,EAAE;EAC5B;AACA,QAAM,CAAC,QAAQ,KAAK,KAAK,IAAI,IAAI,aAAa,MAAM,CAAC,CAAC;AAEtD,MAAI,WAAW,MAAM,QAAQ,MAAM,SAAS,IAAI;AAC9C,WAAO,CAACA,QAAM,MAAM,CAAC,GAAG,SAAS,GAAG;EACtC,OAAO;AACL,WAAO,CAACA,QAAMC,QAAO,EAAE;EACzB;AACF;;;ACpFO,SAASC,cAAa,KAAiC;AAC5D,SAAO,QAAQ,QACb,OAAO,QAAQ,YACf,UAAU,OACV,OAAO,IAAI,SAAS,WAClB,OACA;AACN;AAwCO,SAASC,SAAQC,SAAgC;AACtD,SAAOA,YAAU,QACf,OAAOA,YAAU,YACjB,UAAUA,WACV,OAAOA,QAAM,SAAS,YACtB,SAASA,WACT,OAAOA,QAAM,QAAQ,YACrB,CAAC,MAAMA,QAAM,IAAI,KACjB,CAAC,MAAMA,QAAM,GAAG,IACd,OACA;AACN;AAGA,IAAMC,UAAS,CAAC,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC;AAEpC,IAAMC,iBAAgBD,QAAO;EAAI,CAAC,WAChC,KAAK,MAAO,SAAS,IAAK,EAAE;AAC9B;AAKO,SAASE,aAAYH,SAAgC;AAC1D,QAAM,EAAE,MAAM,KAAK,KAAK,MAAM,EAAE,IAAIA;AACpC,QAAM,IAAIC,QAAO,IAAI,IAAI,IAAI;AAC7B,MAAI,QAAQ,QAAW;AACrB,WAAO,CAAC,MAAM,CAAC;EACjB;AACA,QAAM,IAAI,MAAMC,eAAc,IAAI,IAAI,IAAI;AAC1C,SAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AAC1B;;;AChFA,IAAME,WAAU,CAAC,GAAW,MAAc,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC;AAmCvE,IAAMC,cAAuB,OAAO,OAAO;EACzC,OAAO;EACP,MAAM;EACN,KAAK;EACL,GAAG;EACH,MAAM;EACN,MAAM;EACN,KAAK;EACL,KAAK;EACL,QAAQ;EACR,WAAW;EACX,QAAQ;EACR,OAAO,CAAC;EACR,KAAK;AACP,CAAC;AAGD,IAAMC,wBAAuB;AAE7B,IAAMC,4BAA2B;AACjC,IAAMC,SAAQ,IAAI;EAChB,MAAMF,wBAAuB,MAAMC,4BAA2B;AAChE;AAOO,SAASE,kBAAiB,KAAoC;AACnE,QAAM,IAAID,OAAM,KAAK,GAAG,GAAG,EAAE;AAC7B,MAAI,MAAM,MAAM;AACd,WAAO,CAAC,IAAI,EAAE;EAChB;AACA,SAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC1C;AAEA,IAAME,SAAuC,CAAC;AAsBvC,SAASC,UAAS,KAAgC;AACvD,SAAO,OAAO,QAAQ,WAClBD,OAAM,GAAG,MAAMA,OAAM,GAAG,IAAIE,OAAM,GAAG,KACrCC,SAAQ,GAAG,IACTF,UAASG,WAAU,GAAG,CAAC,IACvBC,cAAa,GAAG,IACdJ,UAAS,IAAI,IAAI,IACjBN;AACV;AAEA,IAAMW,SAAQ,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE;AACnC,IAAMC,SAAQ;AACd,SAASL,OAAM,KAAwB;AACrC,QAAM,SAASH,kBAAiB,GAAG;AACnC,MAAI,OAAO,CAAC,MAAM,IAAI;AACpB,WAAOJ;EACT;AACA,QAAMa,OAAM,CAAC,OAAO,CAAC;AACrB,QAAM,IAAI,OAAO,CAAC;AAClB,QAAM,QAAQ,KAAK,IAAIA,IAAG,IAAI,KAAK;AACnC,QAAM,IAAID,OAAM,IAAI;AACpB,MAAI,MAAM,OAAO,MAAM,KAAK;AAC1B,WAAOZ;EACT;AACA,QAAM,OAAO,MAAM,MAAM,cAAc;AAEvC,QAAMc,QAAO,KAAKD,OAAM;AACxB,QAAM,MAAMA,OAAM,IAAI,KAAK;AAC3B,QAAM,SAASA,SAAQ,KAAKA,SAAQ,KAAKA,OAAM,OAAO,OAAO;AAC7D,QAAM,MAAME,QAAO,MAAM,CAAC;AAC1B,QAAM,MAAM,KAAK,OAAO,KAAK,IAAIF,IAAG,IAAI,KAAK,CAAC;AAC9C,QAAMG,aAAY,OAAOL,OAAM,IAAI,IAAI,MAAM,KAAK;AAClD,QAAMM,WAAY,OAAON,OAAM,IAAI,IAAI,OAAQ,KAAM,MAAM;AAC3D,QAAM,QAAQO,aAAY,EAAE,MAAM,KAAK,KAAK,IAAI,CAAC;AACjD,SAAO;IACL,OAAO;IACP,MAAAJ;IACA,KAAAD;IACA;IACA;IACA;IACA;IACA;IACA;IACA,WAAAG;IACA,QAAAC;IACA;IACA;EACF;AACF;AAkBA,SAASE,QAAO,MAAY,GAAmB;AAC7C,SAAQ,MAAM,OAAO,SAAS,eAC3B,MAAM,OAAO,SAAS,gBACrB,IACA,MAAM,OAAO,SAAS,cACpB,KACA,OAAO,KAAK,CAAC,IACX,EAAE,SACF,OAAO,KAAK,CAAC,IACX,MAAM,SAAS,gBAAgB,EAAE,SAAS,EAAE,SAAS,KACrD;AACZ;AAGA,SAASC,WAAU,OAAsB;AACvC,QAAM,EAAE,MAAM,KAAK,MAAM,GAAG,IAAI,IAAI;AACpC,MAAI,CAAC,KAAK;AACR,WAAO;EACT;AACA,QAAM,UAAU,OAAO,IAAI,IAAI;AAE/B,QAAMC,OAAM,YAAY,IAAI,OAAO,IAAI;AACvC,QAAM,IAAI,MAAM,IAAI,MAAM;AAC1B,QAAM,OAAOC,OAAM,IAAI,MAAM,MAAM,cAAc;AACjD,QAAMC,QAAO,IAAIF,OAAMG,QAAO,MAAM,GAAG;AACvC,SAAOD;AACT;AAEA,SAASC,QAAO,MAAY,KAAsB;AAChD,MAAI,QAAQ,GAAG;AACb,WAAO,SAAS,cAAc,MAAM;EACtC,WAAW,QAAQ,MAAM,SAAS,aAAa;AAC7C,WAAO;EACT,WAAW,MAAM,GAAG;AAClB,WAAOC,SAAQ,KAAK,GAAG;EACzB,OAAO;AACL,WAAOA,SAAQ,KAAK,SAAS,gBAAgB,MAAM,MAAM,CAAC;EAC5D;AACF;;;ACtMO,SAAS,kBACd,OACAC,SACU;AACV,QAAM,gBAAgBA,QAAO,IAAIC,IAAY;AAC7C,SAAO,cAAc;IACnB,CAAC,OAAO,UAAU,OAAOC,UAAS,EAAE,CAAC,IAAI,GAAG;EAC9C;AACF;AASO,SAAS,gBACd,OACAF,SACU;AACV,SAAOA,QAAO,IAAI,CAACG,WAAU;AAC3B,UAAM,CAACC,OAAMC,UAAS,IAAIC,UAASH,MAAK;AACxC,UAAM,eAAe,SAAS,OAAOC,KAAI;AACzC,UAAM,QAAQH,KAAaC,UAAS,YAAY,CAAC;AACjD,WAAO,MAAM,OAAOG;EACtB,CAAC;AACH;AAGA,IAAO,sBAAQ,EAAE,mBAAmB,gBAAgB;;;AC1B7C,SAAS,QAAQE,QAAsC;AAC5D,QAAMC,QAAiB;IACrBD,OAAM,IAAI,CAACE,UAAU,OAAOA,UAAS,WAAWA,QAAO,OAAOA,KAAI,CAAE;EACtE;AACA,MAAI,CAACF,OAAM,UAAUC,MAAK,WAAWD,OAAM,QAAQ;AAEjD,WAAO,CAAC;EACV;AAEA,SAAOC,MAAK;IACV,CAAC,QAAQC,UAAS;AAChB,YAAM,OAAe,OAAO,OAAO,SAAS,CAAC;AAC7C,aAAO,OAAO,OAAO,MAAM,MAAMA,KAAI,EAAE,MAAM,CAAC,CAAC;IACjD;IACA,CAACD,MAAK,CAAC,CAAC;EACV;AACF;AAeO,SAAS,UACdD,QACA,SACU;AACV,SAAO,QAAQA,MAAK,EAAE,IAAI,CAACC,UAAS,eAAeA,OAAM,OAAO,CAAC;AACnE;AAGA,IAAO,gBAAQ,EAAE,SAAS,UAAU;;;AC9BpC,IAAM,OAA6B;EACjC,OAAO;EACP,MAAM;EACN,OAAO;EACP,OAAO;EACP,MAAM;EACN,UAAU,CAAC;AACb;AAEA,IAAME,SAAQ,CAAC,OAAO,OAAO,OAAO,OAAO,QAAQ,OAAO,OAAO,KAAK;AAI/D,SAASC,SAAQ;AACtB,SAAOD,OAAM,MAAM;AACrB;AAEA,IAAME,UAAQ;AACd,IAAM,QAAQ,oBAAI,IAAyC;AAEpD,SAASC,MAAI,SAA8C;AAChE,QAAM,qBAAqB,KAAK,UAAU,OAAO;AACjD,QAAM,SAAS,MAAM,IAAI,kBAAkB;AAC3C,MAAI,QAAQ;AACV,WAAO;EACT;AAEA,QAAM,KAAK,MAAMC,OAAM,OAAO,CAAC;AAC/B,QAAM,IAAI,oBAAoB,EAAE;AAChC,SAAO;AACT;AAEO,SAASA,OAAM,SAAoD;AACxE,MAAI,OAAO,YAAY,UAAU;AAE/B,UAAM,CAAC,GAAGC,KAAI,GAAG,IAAIH,QAAM,KAAK,OAAO,KAAK,CAAC;AAC7C,WAAOE,OAAM,CAACC,KAAI,GAAG,CAAC;EACxB;AAEA,QAAM,CAAC,IAAI,IAAI,IAAI;AACnB,QAAM,cAAc,CAAC;AACrB,MAAI,OAAO,OAAO,UAAU;AAC1B,WAAO,CAAC,IAAI,WAAW;EACzB;AAEA,QAAM,OAAO,GAAG,MAAM,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AACxC,SAAO,KAAK,WAAW,IAAI,CAAC,KAAK,CAAC,GAAG,WAAW,IAAI,CAAC,MAAM,WAAW;AACxE;AAGA,IAAO,yBAAQ,EAAE,OAAAJ,QAAO,OAAAG,QAAO,KAAAD,MAAI;AAInC,IAAM,eAAe,CAAC,MAAe,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAK,MAAM;AAExE,SAAS,MAAM,CAAC,IAAI,IAAI,GAAuC;AAC7D,QAAM,QAAQ,MAAM,QAAQ,EAAE,IAAI,GAAG,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI;AAClE,QAAM,QAAQ;AACd,MAAI,UAAU,KAAK,UAAU,GAAG;AAC9B,WAAO;EACT;AAEA,QAAMG,QAAO,MAAM,QAAQ,EAAE,IAAI,GAAG,GAAG,KAAK,GAAG,CAAC,IAAI,IAAI,KAAK,GAAG,EAAE,IAAI,IAAI;AAC1E,QAAM,WAAW,MAAM,QAAQ,EAAE,IAAI,KAAK,CAAC;AAC3C,QAAM,OACJ,UAAU,KAAK,UAAU,IACrB,WACA,UAAU,KAAK,QAAQ,MAAM,IAC3B,aACA,aAAa,KAAK,IAChB,cACA;AAEV,SAAO;IACL,OAAO;IACP,MAAAA;IACA;IACA;IACA;IACA;EACF;AACF;;;ACrFA,IAAM,QAAQC;AACd,IAAM,QAAQ;AACd,IAAM,kBAAkB;AACxB,IAAM,kBAAkB;",
  "names": ["transpose", "note", "interval", "distance", "range", "rotate", "compact", "notes", "all", "quality", "chord", "interval", "names", "notes", "chroma", "chord", "chordType", "mode", "index", "all", "pitch", "fillStr", "REGEX", "SIZES", "num", "name", "semitones", "chroma", "fillStr", "cache", "altToAcc", "accToAlt", "note", "value", "parse", "pitchName", "REGEX", "tokenizeNote", "name", "chroma", "height", "midi", "transpose", "note", "index", "distance", "fillStr", "CHORDS", "data_default", "NoChordType", "dictionary", "index", "get", "chord", "all", "add", "quality", "getQuality", "addAlias", "interval", "names", "tokenize", "name", "tokenizeNote", "get", "chord", "note", "distance", "num", "quality", "notes", "transpose", "interval", "all", "data_default", "names", "add", "name", "REGEX", "get", "fraction", "value", "names", "get", "name", "semitones", "distance", "add", "interval", "transposeFifths", "isNamedPitch", "isPitch", "pitch", "FIFTHS", "STEPS_TO_OCTS", "coordinates", "fillStr", "NoInterval", "INTERVAL_TONAL_REGEX", "INTERVAL_SHORTHAND_REGEX", "REGEX", "tokenizeInterval", "cache", "interval", "parse", "isPitch", "pitchName", "isNamedPitch", "SIZES", "TYPES", "num", "name", "qToAlt", "semitones", "chroma", "coordinates", "qToAlt", "pitchName", "num", "TYPES", "name", "altToQ", "fillStr", "cache", "get", "parse", "isPitch", "isNamedPitch", "names", "pitch", "REGEX", "tokenize", "name", "chordType", "interval", "triads", "chords", "chordScales", "get", "interval", "transpose", "keyScale", "isNamedPitch", "isPitch", "pitch", "FIFTHS", "STEPS_TO_OCTS", "coordinates", "FIFTHS_TO_STEPS", "unaltered", "fillStr", "NoInterval", "INTERVAL_TONAL_REGEX", "INTERVAL_SHORTHAND_REGEX", "REGEX", "tokenizeInterval", "cache", "interval", "parse", "isPitch", "pitchName", "isNamedPitch", "SIZES", "TYPES", "num", "name", "qToAlt", "semitones", "chroma", "coordinates", "coordToInterval", "pitch", "altToQ", "get", "interval", "simplify", "name", "interval", "IQ", "add", "combinator", "combinator", "transposeFifths", "interval", "get", "coordToInterval", "combinator", "interval", "coordToInterval", "modes", "index", "mode", "get", "name", "all", "entries", "names", "chroma", "chords", "triads", "distance", "simplify", "transposeFifths", "CHORDS", "data_default", "NoChordType", "dictionary", "index", "add", "quality", "getQuality", "chord", "dictionary", "index", "addAlias", "interval", "data_default", "names", "isNamedPitch", "isPitch", "pitch", "FIFTHS", "STEPS_TO_OCTS", "coordinates", "FIFTHS_TO_STEPS", "unaltered", "fillStr", "NoInterval", "INTERVAL_TONAL_REGEX", "INTERVAL_SHORTHAND_REGEX", "REGEX", "tokenizeInterval", "cache", "interval", "parse", "isPitch", "pitchName", "isNamedPitch", "SIZES", "TYPES", "num", "name", "qToAlt", "semitones", "chroma", "coordinates", "coordToInterval", "pitch", "altToQ", "IQ", "add", "combinator", "subtract", "combinator", "combinator", "interval", "coordToInterval", "tokenize", "name", "note", "chord", "isNamedPitch", "isPitch", "pitch", "FIFTHS", "STEPS_TO_OCTS", "coordinates", "fillStr", "NoInterval", "INTERVAL_TONAL_REGEX", "INTERVAL_SHORTHAND_REGEX", "REGEX", "tokenizeInterval", "cache", "interval", "parse", "isPitch", "pitchName", "isNamedPitch", "SIZES", "TYPES", "num", "name", "qToAlt", "semitones", "chroma", "coordinates", "qToAlt", "pitchName", "num", "TYPES", "name", "altToQ", "fillStr", "chords", "get", "interval", "chord", "note", "chordType", "tokenize", "notes", "midi", "note", "NAMES", "names", "REGEX", "get", "parse", "up", "name", "dist_exports"]
}
